
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model OTP
 * 
 */
export type OTP = $Result.DefaultSelection<Prisma.$OTPPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model KYCDocument
 * 
 */
export type KYCDocument = $Result.DefaultSelection<Prisma.$KYCDocumentPayload>
/**
 * Model VerificationHistory
 * 
 */
export type VerificationHistory = $Result.DefaultSelection<Prisma.$VerificationHistoryPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model ProfessionalProfile
 * 
 */
export type ProfessionalProfile = $Result.DefaultSelection<Prisma.$ProfessionalProfilePayload>
/**
 * Model School
 * 
 */
export type School = $Result.DefaultSelection<Prisma.$SchoolPayload>
/**
 * Model StaffAssignment
 * 
 */
export type StaffAssignment = $Result.DefaultSelection<Prisma.$StaffAssignmentPayload>
/**
 * Model ParentStudentRelation
 * 
 */
export type ParentStudentRelation = $Result.DefaultSelection<Prisma.$ParentStudentRelationPayload>
/**
 * Model ClassSubject
 * 
 */
export type ClassSubject = $Result.DefaultSelection<Prisma.$ClassSubjectPayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model ClassStudent
 * 
 */
export type ClassStudent = $Result.DefaultSelection<Prisma.$ClassStudentPayload>
/**
 * Model ReportCard
 * 
 */
export type ReportCard = $Result.DefaultSelection<Prisma.$ReportCardPayload>
/**
 * Model Grade
 * 
 */
export type Grade = $Result.DefaultSelection<Prisma.$GradePayload>
/**
 * Model StudentProfile
 * 
 */
export type StudentProfile = $Result.DefaultSelection<Prisma.$StudentProfilePayload>
/**
 * Model ParentProfile
 * 
 */
export type ParentProfile = $Result.DefaultSelection<Prisma.$ParentProfilePayload>
/**
 * Model Attendance
 * 
 */
export type Attendance = $Result.DefaultSelection<Prisma.$AttendancePayload>
/**
 * Model StaffProfile
 * 
 */
export type StaffProfile = $Result.DefaultSelection<Prisma.$StaffProfilePayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model SubjectAssignment
 * 
 */
export type SubjectAssignment = $Result.DefaultSelection<Prisma.$SubjectAssignmentPayload>
/**
 * Model CommunicationGroup
 * 
 */
export type CommunicationGroup = $Result.DefaultSelection<Prisma.$CommunicationGroupPayload>
/**
 * Model SchoolRole
 * 
 */
export type SchoolRole = $Result.DefaultSelection<Prisma.$SchoolRolePayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model FileQuota
 * 
 */
export type FileQuota = $Result.DefaultSelection<Prisma.$FileQuotaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserStatus: {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  INACTIVE: 'INACTIVE'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const VerificationStatus: {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

export type VerificationStatus = (typeof VerificationStatus)[keyof typeof VerificationStatus]


export const EmploymentEligibilityStatus: {
  NOT_CHECKED: 'NOT_CHECKED',
  ELIGIBLE: 'ELIGIBLE',
  INELIGIBLE: 'INELIGIBLE',
  PENDING_REVIEW: 'PENDING_REVIEW'
};

export type EmploymentEligibilityStatus = (typeof EmploymentEligibilityStatus)[keyof typeof EmploymentEligibilityStatus]


export const Role: {
  SYSTEM_ADMIN: 'SYSTEM_ADMIN',
  SCHOOL_OWNER: 'SCHOOL_OWNER',
  SCHOOL_HEAD: 'SCHOOL_HEAD',
  SCHOOL_ADMIN: 'SCHOOL_ADMIN',
  TEACHER: 'TEACHER',
  ACCOUNTANT: 'ACCOUNTANT',
  PARENT: 'PARENT',
  STUDENT: 'STUDENT',
  CHEF: 'CHEF',
  SECURITY: 'SECURITY',
  TRANSPORT_OFFICER: 'TRANSPORT_OFFICER',
  KYC_OFFICER: 'KYC_OFFICER',
  OTHER: 'OTHER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const OTPStatus: {
  PENDING: 'PENDING',
  USED: 'USED',
  EXPIRED: 'EXPIRED'
};

export type OTPStatus = (typeof OTPStatus)[keyof typeof OTPStatus]


export const DocumentType: {
  IDENTITY: 'IDENTITY',
  SCHOOL_LICENSE: 'SCHOOL_LICENSE',
  EMPLOYMENT_PROOF: 'EMPLOYMENT_PROOF',
  QUALIFICATION: 'QUALIFICATION'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const EntityType: {
  USER: 'USER',
  SCHOOL: 'SCHOOL'
};

export type EntityType = (typeof EntityType)[keyof typeof EntityType]


export const OccupationType: {
  EDUCATION_SECTOR: 'EDUCATION_SECTOR',
  HEALTHCARE: 'HEALTHCARE',
  TRANSPORTATION: 'TRANSPORTATION',
  CONSTRUCTION: 'CONSTRUCTION',
  BUSINESS: 'BUSINESS',
  TECHNOLOGY: 'TECHNOLOGY',
  GOVERNMENT: 'GOVERNMENT',
  SELF_EMPLOYED: 'SELF_EMPLOYED',
  OTHER: 'OTHER'
};

export type OccupationType = (typeof OccupationType)[keyof typeof OccupationType]


export const ReportCardStatus: {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  PUBLISHED: 'PUBLISHED',
  AVAILABLE: 'AVAILABLE'
};

export type ReportCardStatus = (typeof ReportCardStatus)[keyof typeof ReportCardStatus]


export const GradeStatus: {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  APPROVED: 'APPROVED'
};

export type GradeStatus = (typeof GradeStatus)[keyof typeof GradeStatus]


export const FileType: {
  DOCUMENT: 'DOCUMENT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  OTHER: 'OTHER'
};

export type FileType = (typeof FileType)[keyof typeof FileType]


export const FileCategory: {
  PROFILE_PICTURE: 'PROFILE_PICTURE',
  KYC_DOCUMENT: 'KYC_DOCUMENT',
  SCHOOL_DOCUMENT: 'SCHOOL_DOCUMENT',
  STUDENT_WORK: 'STUDENT_WORK',
  COURSE_MATERIAL: 'COURSE_MATERIAL',
  OTHER: 'OTHER'
};

export type FileCategory = (typeof FileCategory)[keyof typeof FileCategory]


export const FileAccessLevel: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  RESTRICTED: 'RESTRICTED'
};

export type FileAccessLevel = (typeof FileAccessLevel)[keyof typeof FileAccessLevel]


export const StorageProvider: {
  LOCAL: 'LOCAL',
  CLOUDINARY: 'CLOUDINARY',
  S3: 'S3'
};

export type StorageProvider = (typeof StorageProvider)[keyof typeof StorageProvider]

}

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type VerificationStatus = $Enums.VerificationStatus

export const VerificationStatus: typeof $Enums.VerificationStatus

export type EmploymentEligibilityStatus = $Enums.EmploymentEligibilityStatus

export const EmploymentEligibilityStatus: typeof $Enums.EmploymentEligibilityStatus

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type OTPStatus = $Enums.OTPStatus

export const OTPStatus: typeof $Enums.OTPStatus

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type EntityType = $Enums.EntityType

export const EntityType: typeof $Enums.EntityType

export type OccupationType = $Enums.OccupationType

export const OccupationType: typeof $Enums.OccupationType

export type ReportCardStatus = $Enums.ReportCardStatus

export const ReportCardStatus: typeof $Enums.ReportCardStatus

export type GradeStatus = $Enums.GradeStatus

export const GradeStatus: typeof $Enums.GradeStatus

export type FileType = $Enums.FileType

export const FileType: typeof $Enums.FileType

export type FileCategory = $Enums.FileCategory

export const FileCategory: typeof $Enums.FileCategory

export type FileAccessLevel = $Enums.FileAccessLevel

export const FileAccessLevel: typeof $Enums.FileAccessLevel

export type StorageProvider = $Enums.StorageProvider

export const StorageProvider: typeof $Enums.StorageProvider

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.oTP`: Exposes CRUD operations for the **OTP** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OTPS
    * const oTPS = await prisma.oTP.findMany()
    * ```
    */
  get oTP(): Prisma.OTPDelegate<ExtArgs>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs>;

  /**
   * `prisma.kYCDocument`: Exposes CRUD operations for the **KYCDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KYCDocuments
    * const kYCDocuments = await prisma.kYCDocument.findMany()
    * ```
    */
  get kYCDocument(): Prisma.KYCDocumentDelegate<ExtArgs>;

  /**
   * `prisma.verificationHistory`: Exposes CRUD operations for the **VerificationHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationHistories
    * const verificationHistories = await prisma.verificationHistory.findMany()
    * ```
    */
  get verificationHistory(): Prisma.VerificationHistoryDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.professionalProfile`: Exposes CRUD operations for the **ProfessionalProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionalProfiles
    * const professionalProfiles = await prisma.professionalProfile.findMany()
    * ```
    */
  get professionalProfile(): Prisma.ProfessionalProfileDelegate<ExtArgs>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<ExtArgs>;

  /**
   * `prisma.staffAssignment`: Exposes CRUD operations for the **StaffAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffAssignments
    * const staffAssignments = await prisma.staffAssignment.findMany()
    * ```
    */
  get staffAssignment(): Prisma.StaffAssignmentDelegate<ExtArgs>;

  /**
   * `prisma.parentStudentRelation`: Exposes CRUD operations for the **ParentStudentRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParentStudentRelations
    * const parentStudentRelations = await prisma.parentStudentRelation.findMany()
    * ```
    */
  get parentStudentRelation(): Prisma.ParentStudentRelationDelegate<ExtArgs>;

  /**
   * `prisma.classSubject`: Exposes CRUD operations for the **ClassSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassSubjects
    * const classSubjects = await prisma.classSubject.findMany()
    * ```
    */
  get classSubject(): Prisma.ClassSubjectDelegate<ExtArgs>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs>;

  /**
   * `prisma.classStudent`: Exposes CRUD operations for the **ClassStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassStudents
    * const classStudents = await prisma.classStudent.findMany()
    * ```
    */
  get classStudent(): Prisma.ClassStudentDelegate<ExtArgs>;

  /**
   * `prisma.reportCard`: Exposes CRUD operations for the **ReportCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportCards
    * const reportCards = await prisma.reportCard.findMany()
    * ```
    */
  get reportCard(): Prisma.ReportCardDelegate<ExtArgs>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs>;

  /**
   * `prisma.studentProfile`: Exposes CRUD operations for the **StudentProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentProfiles
    * const studentProfiles = await prisma.studentProfile.findMany()
    * ```
    */
  get studentProfile(): Prisma.StudentProfileDelegate<ExtArgs>;

  /**
   * `prisma.parentProfile`: Exposes CRUD operations for the **ParentProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParentProfiles
    * const parentProfiles = await prisma.parentProfile.findMany()
    * ```
    */
  get parentProfile(): Prisma.ParentProfileDelegate<ExtArgs>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **Attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.AttendanceDelegate<ExtArgs>;

  /**
   * `prisma.staffProfile`: Exposes CRUD operations for the **StaffProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffProfiles
    * const staffProfiles = await prisma.staffProfile.findMany()
    * ```
    */
  get staffProfile(): Prisma.StaffProfileDelegate<ExtArgs>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs>;

  /**
   * `prisma.subjectAssignment`: Exposes CRUD operations for the **SubjectAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubjectAssignments
    * const subjectAssignments = await prisma.subjectAssignment.findMany()
    * ```
    */
  get subjectAssignment(): Prisma.SubjectAssignmentDelegate<ExtArgs>;

  /**
   * `prisma.communicationGroup`: Exposes CRUD operations for the **CommunicationGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommunicationGroups
    * const communicationGroups = await prisma.communicationGroup.findMany()
    * ```
    */
  get communicationGroup(): Prisma.CommunicationGroupDelegate<ExtArgs>;

  /**
   * `prisma.schoolRole`: Exposes CRUD operations for the **SchoolRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchoolRoles
    * const schoolRoles = await prisma.schoolRole.findMany()
    * ```
    */
  get schoolRole(): Prisma.SchoolRoleDelegate<ExtArgs>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs>;

  /**
   * `prisma.fileQuota`: Exposes CRUD operations for the **FileQuota** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FileQuotas
    * const fileQuotas = await prisma.fileQuota.findMany()
    * ```
    */
  get fileQuota(): Prisma.FileQuotaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    OTP: 'OTP',
    RefreshToken: 'RefreshToken',
    KYCDocument: 'KYCDocument',
    VerificationHistory: 'VerificationHistory',
    Profile: 'Profile',
    ProfessionalProfile: 'ProfessionalProfile',
    School: 'School',
    StaffAssignment: 'StaffAssignment',
    ParentStudentRelation: 'ParentStudentRelation',
    ClassSubject: 'ClassSubject',
    Class: 'Class',
    ClassStudent: 'ClassStudent',
    ReportCard: 'ReportCard',
    Grade: 'Grade',
    StudentProfile: 'StudentProfile',
    ParentProfile: 'ParentProfile',
    Attendance: 'Attendance',
    StaffProfile: 'StaffProfile',
    Subject: 'Subject',
    SubjectAssignment: 'SubjectAssignment',
    CommunicationGroup: 'CommunicationGroup',
    SchoolRole: 'SchoolRole',
    File: 'File',
    FileQuota: 'FileQuota'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "oTP" | "refreshToken" | "kYCDocument" | "verificationHistory" | "profile" | "professionalProfile" | "school" | "staffAssignment" | "parentStudentRelation" | "classSubject" | "class" | "classStudent" | "reportCard" | "grade" | "studentProfile" | "parentProfile" | "attendance" | "staffProfile" | "subject" | "subjectAssignment" | "communicationGroup" | "schoolRole" | "file" | "fileQuota"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      OTP: {
        payload: Prisma.$OTPPayload<ExtArgs>
        fields: Prisma.OTPFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OTPFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OTPFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          findFirst: {
            args: Prisma.OTPFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OTPFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          findMany: {
            args: Prisma.OTPFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>[]
          }
          create: {
            args: Prisma.OTPCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          createMany: {
            args: Prisma.OTPCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OTPCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>[]
          }
          delete: {
            args: Prisma.OTPDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          update: {
            args: Prisma.OTPUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          deleteMany: {
            args: Prisma.OTPDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OTPUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OTPUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          aggregate: {
            args: Prisma.OTPAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOTP>
          }
          groupBy: {
            args: Prisma.OTPGroupByArgs<ExtArgs>
            result: $Utils.Optional<OTPGroupByOutputType>[]
          }
          count: {
            args: Prisma.OTPCountArgs<ExtArgs>
            result: $Utils.Optional<OTPCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      KYCDocument: {
        payload: Prisma.$KYCDocumentPayload<ExtArgs>
        fields: Prisma.KYCDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KYCDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KYCDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          findFirst: {
            args: Prisma.KYCDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KYCDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          findMany: {
            args: Prisma.KYCDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>[]
          }
          create: {
            args: Prisma.KYCDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          createMany: {
            args: Prisma.KYCDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KYCDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>[]
          }
          delete: {
            args: Prisma.KYCDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          update: {
            args: Prisma.KYCDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          deleteMany: {
            args: Prisma.KYCDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KYCDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KYCDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          aggregate: {
            args: Prisma.KYCDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKYCDocument>
          }
          groupBy: {
            args: Prisma.KYCDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<KYCDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.KYCDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<KYCDocumentCountAggregateOutputType> | number
          }
        }
      }
      VerificationHistory: {
        payload: Prisma.$VerificationHistoryPayload<ExtArgs>
        fields: Prisma.VerificationHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload>
          }
          findFirst: {
            args: Prisma.VerificationHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload>
          }
          findMany: {
            args: Prisma.VerificationHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload>[]
          }
          create: {
            args: Prisma.VerificationHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload>
          }
          createMany: {
            args: Prisma.VerificationHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload>[]
          }
          delete: {
            args: Prisma.VerificationHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload>
          }
          update: {
            args: Prisma.VerificationHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload>
          }
          deleteMany: {
            args: Prisma.VerificationHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationHistoryPayload>
          }
          aggregate: {
            args: Prisma.VerificationHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationHistory>
          }
          groupBy: {
            args: Prisma.VerificationHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationHistoryCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      ProfessionalProfile: {
        payload: Prisma.$ProfessionalProfilePayload<ExtArgs>
        fields: Prisma.ProfessionalProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionalProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionalProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfessionalProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionalProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload>
          }
          findMany: {
            args: Prisma.ProfessionalProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload>[]
          }
          create: {
            args: Prisma.ProfessionalProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload>
          }
          createMany: {
            args: Prisma.ProfessionalProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionalProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfessionalProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload>
          }
          update: {
            args: Prisma.ProfessionalProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfessionalProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionalProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfessionalProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfessionalProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionalProfile>
          }
          groupBy: {
            args: Prisma.ProfessionalProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionalProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalProfileCountAggregateOutputType> | number
          }
        }
      }
      School: {
        payload: Prisma.$SchoolPayload<ExtArgs>
        fields: Prisma.SchoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findFirst: {
            args: Prisma.SchoolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findMany: {
            args: Prisma.SchoolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          create: {
            args: Prisma.SchoolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          createMany: {
            args: Prisma.SchoolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchoolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          delete: {
            args: Prisma.SchoolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          update: {
            args: Prisma.SchoolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SchoolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          aggregate: {
            args: Prisma.SchoolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchool>
          }
          groupBy: {
            args: Prisma.SchoolGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolCountAggregateOutputType> | number
          }
        }
      }
      StaffAssignment: {
        payload: Prisma.$StaffAssignmentPayload<ExtArgs>
        fields: Prisma.StaffAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload>
          }
          findFirst: {
            args: Prisma.StaffAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload>
          }
          findMany: {
            args: Prisma.StaffAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload>[]
          }
          create: {
            args: Prisma.StaffAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload>
          }
          createMany: {
            args: Prisma.StaffAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload>[]
          }
          delete: {
            args: Prisma.StaffAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload>
          }
          update: {
            args: Prisma.StaffAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.StaffAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffAssignmentPayload>
          }
          aggregate: {
            args: Prisma.StaffAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffAssignment>
          }
          groupBy: {
            args: Prisma.StaffAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<StaffAssignmentCountAggregateOutputType> | number
          }
        }
      }
      ParentStudentRelation: {
        payload: Prisma.$ParentStudentRelationPayload<ExtArgs>
        fields: Prisma.ParentStudentRelationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParentStudentRelationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParentStudentRelationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload>
          }
          findFirst: {
            args: Prisma.ParentStudentRelationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParentStudentRelationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload>
          }
          findMany: {
            args: Prisma.ParentStudentRelationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload>[]
          }
          create: {
            args: Prisma.ParentStudentRelationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload>
          }
          createMany: {
            args: Prisma.ParentStudentRelationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParentStudentRelationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload>[]
          }
          delete: {
            args: Prisma.ParentStudentRelationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload>
          }
          update: {
            args: Prisma.ParentStudentRelationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload>
          }
          deleteMany: {
            args: Prisma.ParentStudentRelationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParentStudentRelationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParentStudentRelationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentRelationPayload>
          }
          aggregate: {
            args: Prisma.ParentStudentRelationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParentStudentRelation>
          }
          groupBy: {
            args: Prisma.ParentStudentRelationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParentStudentRelationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParentStudentRelationCountArgs<ExtArgs>
            result: $Utils.Optional<ParentStudentRelationCountAggregateOutputType> | number
          }
        }
      }
      ClassSubject: {
        payload: Prisma.$ClassSubjectPayload<ExtArgs>
        fields: Prisma.ClassSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassSubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassSubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload>
          }
          findFirst: {
            args: Prisma.ClassSubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassSubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload>
          }
          findMany: {
            args: Prisma.ClassSubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload>[]
          }
          create: {
            args: Prisma.ClassSubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload>
          }
          createMany: {
            args: Prisma.ClassSubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassSubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload>[]
          }
          delete: {
            args: Prisma.ClassSubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload>
          }
          update: {
            args: Prisma.ClassSubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload>
          }
          deleteMany: {
            args: Prisma.ClassSubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassSubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassSubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSubjectPayload>
          }
          aggregate: {
            args: Prisma.ClassSubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassSubject>
          }
          groupBy: {
            args: Prisma.ClassSubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassSubjectCountArgs<ExtArgs>
            result: $Utils.Optional<ClassSubjectCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      ClassStudent: {
        payload: Prisma.$ClassStudentPayload<ExtArgs>
        fields: Prisma.ClassStudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassStudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassStudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          findFirst: {
            args: Prisma.ClassStudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassStudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          findMany: {
            args: Prisma.ClassStudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>[]
          }
          create: {
            args: Prisma.ClassStudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          createMany: {
            args: Prisma.ClassStudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassStudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>[]
          }
          delete: {
            args: Prisma.ClassStudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          update: {
            args: Prisma.ClassStudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          deleteMany: {
            args: Prisma.ClassStudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassStudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassStudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          aggregate: {
            args: Prisma.ClassStudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassStudent>
          }
          groupBy: {
            args: Prisma.ClassStudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassStudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassStudentCountArgs<ExtArgs>
            result: $Utils.Optional<ClassStudentCountAggregateOutputType> | number
          }
        }
      }
      ReportCard: {
        payload: Prisma.$ReportCardPayload<ExtArgs>
        fields: Prisma.ReportCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload>
          }
          findFirst: {
            args: Prisma.ReportCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload>
          }
          findMany: {
            args: Prisma.ReportCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload>[]
          }
          create: {
            args: Prisma.ReportCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload>
          }
          createMany: {
            args: Prisma.ReportCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload>[]
          }
          delete: {
            args: Prisma.ReportCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload>
          }
          update: {
            args: Prisma.ReportCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload>
          }
          deleteMany: {
            args: Prisma.ReportCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCardPayload>
          }
          aggregate: {
            args: Prisma.ReportCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportCard>
          }
          groupBy: {
            args: Prisma.ReportCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCardCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCardCountAggregateOutputType> | number
          }
        }
      }
      Grade: {
        payload: Prisma.$GradePayload<ExtArgs>
        fields: Prisma.GradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findFirst: {
            args: Prisma.GradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findMany: {
            args: Prisma.GradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          create: {
            args: Prisma.GradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          createMany: {
            args: Prisma.GradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GradeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          delete: {
            args: Prisma.GradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          update: {
            args: Prisma.GradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          deleteMany: {
            args: Prisma.GradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          aggregate: {
            args: Prisma.GradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrade>
          }
          groupBy: {
            args: Prisma.GradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GradeCountArgs<ExtArgs>
            result: $Utils.Optional<GradeCountAggregateOutputType> | number
          }
        }
      }
      StudentProfile: {
        payload: Prisma.$StudentProfilePayload<ExtArgs>
        fields: Prisma.StudentProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload>
          }
          findFirst: {
            args: Prisma.StudentProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload>
          }
          findMany: {
            args: Prisma.StudentProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload>[]
          }
          create: {
            args: Prisma.StudentProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload>
          }
          createMany: {
            args: Prisma.StudentProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload>[]
          }
          delete: {
            args: Prisma.StudentProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload>
          }
          update: {
            args: Prisma.StudentProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload>
          }
          deleteMany: {
            args: Prisma.StudentProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProfilePayload>
          }
          aggregate: {
            args: Prisma.StudentProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentProfile>
          }
          groupBy: {
            args: Prisma.StudentProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentProfileCountArgs<ExtArgs>
            result: $Utils.Optional<StudentProfileCountAggregateOutputType> | number
          }
        }
      }
      ParentProfile: {
        payload: Prisma.$ParentProfilePayload<ExtArgs>
        fields: Prisma.ParentProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParentProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParentProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload>
          }
          findFirst: {
            args: Prisma.ParentProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParentProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload>
          }
          findMany: {
            args: Prisma.ParentProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload>[]
          }
          create: {
            args: Prisma.ParentProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload>
          }
          createMany: {
            args: Prisma.ParentProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParentProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload>[]
          }
          delete: {
            args: Prisma.ParentProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload>
          }
          update: {
            args: Prisma.ParentProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload>
          }
          deleteMany: {
            args: Prisma.ParentProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParentProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParentProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentProfilePayload>
          }
          aggregate: {
            args: Prisma.ParentProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParentProfile>
          }
          groupBy: {
            args: Prisma.ParentProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParentProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParentProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ParentProfileCountAggregateOutputType> | number
          }
        }
      }
      Attendance: {
        payload: Prisma.$AttendancePayload<ExtArgs>
        fields: Prisma.AttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findFirst: {
            args: Prisma.AttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findMany: {
            args: Prisma.AttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          create: {
            args: Prisma.AttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          createMany: {
            args: Prisma.AttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          delete: {
            args: Prisma.AttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          update: {
            args: Prisma.AttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          deleteMany: {
            args: Prisma.AttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.AttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      StaffProfile: {
        payload: Prisma.$StaffProfilePayload<ExtArgs>
        fields: Prisma.StaffProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          findFirst: {
            args: Prisma.StaffProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          findMany: {
            args: Prisma.StaffProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>[]
          }
          create: {
            args: Prisma.StaffProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          createMany: {
            args: Prisma.StaffProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>[]
          }
          delete: {
            args: Prisma.StaffProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          update: {
            args: Prisma.StaffProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          deleteMany: {
            args: Prisma.StaffProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          aggregate: {
            args: Prisma.StaffProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffProfile>
          }
          groupBy: {
            args: Prisma.StaffProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffProfileCountArgs<ExtArgs>
            result: $Utils.Optional<StaffProfileCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      SubjectAssignment: {
        payload: Prisma.$SubjectAssignmentPayload<ExtArgs>
        fields: Prisma.SubjectAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload>
          }
          findFirst: {
            args: Prisma.SubjectAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload>
          }
          findMany: {
            args: Prisma.SubjectAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload>[]
          }
          create: {
            args: Prisma.SubjectAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload>
          }
          createMany: {
            args: Prisma.SubjectAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload>[]
          }
          delete: {
            args: Prisma.SubjectAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload>
          }
          update: {
            args: Prisma.SubjectAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.SubjectAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubjectAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectAssignmentPayload>
          }
          aggregate: {
            args: Prisma.SubjectAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubjectAssignment>
          }
          groupBy: {
            args: Prisma.SubjectAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectAssignmentCountAggregateOutputType> | number
          }
        }
      }
      CommunicationGroup: {
        payload: Prisma.$CommunicationGroupPayload<ExtArgs>
        fields: Prisma.CommunicationGroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunicationGroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunicationGroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload>
          }
          findFirst: {
            args: Prisma.CommunicationGroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunicationGroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload>
          }
          findMany: {
            args: Prisma.CommunicationGroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload>[]
          }
          create: {
            args: Prisma.CommunicationGroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload>
          }
          createMany: {
            args: Prisma.CommunicationGroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommunicationGroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload>[]
          }
          delete: {
            args: Prisma.CommunicationGroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload>
          }
          update: {
            args: Prisma.CommunicationGroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload>
          }
          deleteMany: {
            args: Prisma.CommunicationGroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunicationGroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommunicationGroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationGroupPayload>
          }
          aggregate: {
            args: Prisma.CommunicationGroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunicationGroup>
          }
          groupBy: {
            args: Prisma.CommunicationGroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunicationGroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommunicationGroupCountArgs<ExtArgs>
            result: $Utils.Optional<CommunicationGroupCountAggregateOutputType> | number
          }
        }
      }
      SchoolRole: {
        payload: Prisma.$SchoolRolePayload<ExtArgs>
        fields: Prisma.SchoolRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload>
          }
          findFirst: {
            args: Prisma.SchoolRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload>
          }
          findMany: {
            args: Prisma.SchoolRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload>[]
          }
          create: {
            args: Prisma.SchoolRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload>
          }
          createMany: {
            args: Prisma.SchoolRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchoolRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload>[]
          }
          delete: {
            args: Prisma.SchoolRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload>
          }
          update: {
            args: Prisma.SchoolRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload>
          }
          deleteMany: {
            args: Prisma.SchoolRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SchoolRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolRolePayload>
          }
          aggregate: {
            args: Prisma.SchoolRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchoolRole>
          }
          groupBy: {
            args: Prisma.SchoolRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolRoleCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolRoleCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      FileQuota: {
        payload: Prisma.$FileQuotaPayload<ExtArgs>
        fields: Prisma.FileQuotaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileQuotaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileQuotaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload>
          }
          findFirst: {
            args: Prisma.FileQuotaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileQuotaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload>
          }
          findMany: {
            args: Prisma.FileQuotaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload>[]
          }
          create: {
            args: Prisma.FileQuotaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload>
          }
          createMany: {
            args: Prisma.FileQuotaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileQuotaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload>[]
          }
          delete: {
            args: Prisma.FileQuotaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload>
          }
          update: {
            args: Prisma.FileQuotaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload>
          }
          deleteMany: {
            args: Prisma.FileQuotaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileQuotaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FileQuotaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileQuotaPayload>
          }
          aggregate: {
            args: Prisma.FileQuotaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFileQuota>
          }
          groupBy: {
            args: Prisma.FileQuotaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileQuotaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileQuotaCountArgs<ExtArgs>
            result: $Utils.Optional<FileQuotaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    documents: number
    verifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
    verifications?: boolean | UserCountOutputTypeCountVerificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KYCDocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationHistoryWhereInput
  }


  /**
   * Count Type SchoolCountOutputType
   */

  export type SchoolCountOutputType = {
    staffAssignments: number
    reportCards: number
    classSubjects: number
    classes: number
    communicationGroups: number
    schoolRoles: number
  }

  export type SchoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staffAssignments?: boolean | SchoolCountOutputTypeCountStaffAssignmentsArgs
    reportCards?: boolean | SchoolCountOutputTypeCountReportCardsArgs
    classSubjects?: boolean | SchoolCountOutputTypeCountClassSubjectsArgs
    classes?: boolean | SchoolCountOutputTypeCountClassesArgs
    communicationGroups?: boolean | SchoolCountOutputTypeCountCommunicationGroupsArgs
    schoolRoles?: boolean | SchoolCountOutputTypeCountSchoolRolesArgs
  }

  // Custom InputTypes
  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     */
    select?: SchoolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStaffAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffAssignmentWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountReportCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportCardWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountClassSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassSubjectWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountCommunicationGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunicationGroupWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountSchoolRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolRoleWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    classSubjects: number
    students: number
    attendance: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classSubjects?: boolean | ClassCountOutputTypeCountClassSubjectsArgs
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
    attendance?: boolean | ClassCountOutputTypeCountAttendanceArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountClassSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassSubjectWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassStudentWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }


  /**
   * Count Type ReportCardCountOutputType
   */

  export type ReportCardCountOutputType = {
    grades: number
  }

  export type ReportCardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grades?: boolean | ReportCardCountOutputTypeCountGradesArgs
  }

  // Custom InputTypes
  /**
   * ReportCardCountOutputType without action
   */
  export type ReportCardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCardCountOutputType
     */
    select?: ReportCardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportCardCountOutputType without action
   */
  export type ReportCardCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }


  /**
   * Count Type StudentProfileCountOutputType
   */

  export type StudentProfileCountOutputType = {
    guardians: number
    classes: number
    attendanceRecords: number
    reportCards: number
    grades: number
  }

  export type StudentProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guardians?: boolean | StudentProfileCountOutputTypeCountGuardiansArgs
    classes?: boolean | StudentProfileCountOutputTypeCountClassesArgs
    attendanceRecords?: boolean | StudentProfileCountOutputTypeCountAttendanceRecordsArgs
    reportCards?: boolean | StudentProfileCountOutputTypeCountReportCardsArgs
    grades?: boolean | StudentProfileCountOutputTypeCountGradesArgs
  }

  // Custom InputTypes
  /**
   * StudentProfileCountOutputType without action
   */
  export type StudentProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfileCountOutputType
     */
    select?: StudentProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentProfileCountOutputType without action
   */
  export type StudentProfileCountOutputTypeCountGuardiansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentStudentRelationWhereInput
  }

  /**
   * StudentProfileCountOutputType without action
   */
  export type StudentProfileCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassStudentWhereInput
  }

  /**
   * StudentProfileCountOutputType without action
   */
  export type StudentProfileCountOutputTypeCountAttendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * StudentProfileCountOutputType without action
   */
  export type StudentProfileCountOutputTypeCountReportCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportCardWhereInput
  }

  /**
   * StudentProfileCountOutputType without action
   */
  export type StudentProfileCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }


  /**
   * Count Type ParentProfileCountOutputType
   */

  export type ParentProfileCountOutputType = {
    children: number
  }

  export type ParentProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | ParentProfileCountOutputTypeCountChildrenArgs
  }

  // Custom InputTypes
  /**
   * ParentProfileCountOutputType without action
   */
  export type ParentProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfileCountOutputType
     */
    select?: ParentProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParentProfileCountOutputType without action
   */
  export type ParentProfileCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentStudentRelationWhereInput
  }


  /**
   * Count Type StaffProfileCountOutputType
   */

  export type StaffProfileCountOutputType = {
    assignments: number
    subjects: number
    grades: number
    classSubjects: number
  }

  export type StaffProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | StaffProfileCountOutputTypeCountAssignmentsArgs
    subjects?: boolean | StaffProfileCountOutputTypeCountSubjectsArgs
    grades?: boolean | StaffProfileCountOutputTypeCountGradesArgs
    classSubjects?: boolean | StaffProfileCountOutputTypeCountClassSubjectsArgs
  }

  // Custom InputTypes
  /**
   * StaffProfileCountOutputType without action
   */
  export type StaffProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfileCountOutputType
     */
    select?: StaffProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffProfileCountOutputType without action
   */
  export type StaffProfileCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffAssignmentWhereInput
  }

  /**
   * StaffProfileCountOutputType without action
   */
  export type StaffProfileCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectAssignmentWhereInput
  }

  /**
   * StaffProfileCountOutputType without action
   */
  export type StaffProfileCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }

  /**
   * StaffProfileCountOutputType without action
   */
  export type StaffProfileCountOutputTypeCountClassSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassSubjectWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    assignments: number
    classSubjects: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | SubjectCountOutputTypeCountAssignmentsArgs
    classSubjects?: boolean | SubjectCountOutputTypeCountClassSubjectsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectAssignmentWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountClassSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassSubjectWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    phone: string | null
    status: $Enums.UserStatus | null
    kycStatus: $Enums.VerificationStatus | null
    kycVerifiedAt: Date | null
    employmentStatus: $Enums.EmploymentEligibilityStatus | null
    employmentVerifiedAt: Date | null
    socialAccessEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    phone: string | null
    status: $Enums.UserStatus | null
    kycStatus: $Enums.VerificationStatus | null
    kycVerifiedAt: Date | null
    employmentStatus: $Enums.EmploymentEligibilityStatus | null
    employmentVerifiedAt: Date | null
    socialAccessEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    phone: number
    roles: number
    permissions: number
    status: number
    kycStatus: number
    kycVerifiedAt: number
    kycDocumentIds: number
    employmentStatus: number
    employmentVerifiedAt: number
    employmentDocumentIds: number
    socialAccessEnabled: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone?: true
    status?: true
    kycStatus?: true
    kycVerifiedAt?: true
    employmentStatus?: true
    employmentVerifiedAt?: true
    socialAccessEnabled?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone?: true
    status?: true
    kycStatus?: true
    kycVerifiedAt?: true
    employmentStatus?: true
    employmentVerifiedAt?: true
    socialAccessEnabled?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone?: true
    roles?: true
    permissions?: true
    status?: true
    kycStatus?: true
    kycVerifiedAt?: true
    kycDocumentIds?: true
    employmentStatus?: true
    employmentVerifiedAt?: true
    employmentDocumentIds?: true
    socialAccessEnabled?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string | null
    password: string
    phone: string | null
    roles: $Enums.Role[]
    permissions: string[]
    status: $Enums.UserStatus
    kycStatus: $Enums.VerificationStatus | null
    kycVerifiedAt: Date | null
    kycDocumentIds: string[]
    employmentStatus: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt: Date | null
    employmentDocumentIds: string[]
    socialAccessEnabled: boolean
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    roles?: boolean
    permissions?: boolean
    status?: boolean
    kycStatus?: boolean
    kycVerifiedAt?: boolean
    kycDocumentIds?: boolean
    employmentStatus?: boolean
    employmentVerifiedAt?: boolean
    employmentDocumentIds?: boolean
    socialAccessEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    verifications?: boolean | User$verificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    roles?: boolean
    permissions?: boolean
    status?: boolean
    kycStatus?: boolean
    kycVerifiedAt?: boolean
    kycDocumentIds?: boolean
    employmentStatus?: boolean
    employmentVerifiedAt?: boolean
    employmentDocumentIds?: boolean
    socialAccessEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    roles?: boolean
    permissions?: boolean
    status?: boolean
    kycStatus?: boolean
    kycVerifiedAt?: boolean
    kycDocumentIds?: boolean
    employmentStatus?: boolean
    employmentVerifiedAt?: boolean
    employmentDocumentIds?: boolean
    socialAccessEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    verifications?: boolean | User$verificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      documents: Prisma.$KYCDocumentPayload<ExtArgs>[]
      verifications: Prisma.$VerificationHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string | null
      password: string
      phone: string | null
      roles: $Enums.Role[]
      permissions: string[]
      status: $Enums.UserStatus
      kycStatus: $Enums.VerificationStatus | null
      kycVerifiedAt: Date | null
      kycDocumentIds: string[]
      employmentStatus: $Enums.EmploymentEligibilityStatus
      employmentVerifiedAt: Date | null
      employmentDocumentIds: string[]
      socialAccessEnabled: boolean
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    verifications<T extends User$verificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$verificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly roles: FieldRef<"User", 'Role[]'>
    readonly permissions: FieldRef<"User", 'String[]'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly kycStatus: FieldRef<"User", 'VerificationStatus'>
    readonly kycVerifiedAt: FieldRef<"User", 'DateTime'>
    readonly kycDocumentIds: FieldRef<"User", 'String[]'>
    readonly employmentStatus: FieldRef<"User", 'EmploymentEligibilityStatus'>
    readonly employmentVerifiedAt: FieldRef<"User", 'DateTime'>
    readonly employmentDocumentIds: FieldRef<"User", 'String[]'>
    readonly socialAccessEnabled: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    where?: KYCDocumentWhereInput
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    cursor?: KYCDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KYCDocumentScalarFieldEnum | KYCDocumentScalarFieldEnum[]
  }

  /**
   * User.verifications
   */
  export type User$verificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    where?: VerificationHistoryWhereInput
    orderBy?: VerificationHistoryOrderByWithRelationInput | VerificationHistoryOrderByWithRelationInput[]
    cursor?: VerificationHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VerificationHistoryScalarFieldEnum | VerificationHistoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model OTP
   */

  export type AggregateOTP = {
    _count: OTPCountAggregateOutputType | null
    _min: OTPMinAggregateOutputType | null
    _max: OTPMaxAggregateOutputType | null
  }

  export type OTPMinAggregateOutputType = {
    id: string | null
    code: string | null
    userId: string | null
    expiresAt: Date | null
    status: $Enums.OTPStatus | null
    createdAt: Date | null
  }

  export type OTPMaxAggregateOutputType = {
    id: string | null
    code: string | null
    userId: string | null
    expiresAt: Date | null
    status: $Enums.OTPStatus | null
    createdAt: Date | null
  }

  export type OTPCountAggregateOutputType = {
    id: number
    code: number
    userId: number
    expiresAt: number
    status: number
    createdAt: number
    _all: number
  }


  export type OTPMinAggregateInputType = {
    id?: true
    code?: true
    userId?: true
    expiresAt?: true
    status?: true
    createdAt?: true
  }

  export type OTPMaxAggregateInputType = {
    id?: true
    code?: true
    userId?: true
    expiresAt?: true
    status?: true
    createdAt?: true
  }

  export type OTPCountAggregateInputType = {
    id?: true
    code?: true
    userId?: true
    expiresAt?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type OTPAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTP to aggregate.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OTPS
    **/
    _count?: true | OTPCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OTPMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OTPMaxAggregateInputType
  }

  export type GetOTPAggregateType<T extends OTPAggregateArgs> = {
        [P in keyof T & keyof AggregateOTP]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOTP[P]>
      : GetScalarType<T[P], AggregateOTP[P]>
  }




  export type OTPGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OTPWhereInput
    orderBy?: OTPOrderByWithAggregationInput | OTPOrderByWithAggregationInput[]
    by: OTPScalarFieldEnum[] | OTPScalarFieldEnum
    having?: OTPScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OTPCountAggregateInputType | true
    _min?: OTPMinAggregateInputType
    _max?: OTPMaxAggregateInputType
  }

  export type OTPGroupByOutputType = {
    id: string
    code: string
    userId: string
    expiresAt: Date
    status: $Enums.OTPStatus
    createdAt: Date
    _count: OTPCountAggregateOutputType | null
    _min: OTPMinAggregateOutputType | null
    _max: OTPMaxAggregateOutputType | null
  }

  type GetOTPGroupByPayload<T extends OTPGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OTPGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OTPGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OTPGroupByOutputType[P]>
            : GetScalarType<T[P], OTPGroupByOutputType[P]>
        }
      >
    >


  export type OTPSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    userId?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["oTP"]>

  export type OTPSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    userId?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["oTP"]>

  export type OTPSelectScalar = {
    id?: boolean
    code?: boolean
    userId?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
  }


  export type $OTPPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OTP"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      userId: string
      expiresAt: Date
      status: $Enums.OTPStatus
      createdAt: Date
    }, ExtArgs["result"]["oTP"]>
    composites: {}
  }

  type OTPGetPayload<S extends boolean | null | undefined | OTPDefaultArgs> = $Result.GetResult<Prisma.$OTPPayload, S>

  type OTPCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OTPFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OTPCountAggregateInputType | true
    }

  export interface OTPDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OTP'], meta: { name: 'OTP' } }
    /**
     * Find zero or one OTP that matches the filter.
     * @param {OTPFindUniqueArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OTPFindUniqueArgs>(args: SelectSubset<T, OTPFindUniqueArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OTP that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OTPFindUniqueOrThrowArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OTPFindUniqueOrThrowArgs>(args: SelectSubset<T, OTPFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OTP that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindFirstArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OTPFindFirstArgs>(args?: SelectSubset<T, OTPFindFirstArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OTP that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindFirstOrThrowArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OTPFindFirstOrThrowArgs>(args?: SelectSubset<T, OTPFindFirstOrThrowArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OTPS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OTPS
     * const oTPS = await prisma.oTP.findMany()
     * 
     * // Get first 10 OTPS
     * const oTPS = await prisma.oTP.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oTPWithIdOnly = await prisma.oTP.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OTPFindManyArgs>(args?: SelectSubset<T, OTPFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OTP.
     * @param {OTPCreateArgs} args - Arguments to create a OTP.
     * @example
     * // Create one OTP
     * const OTP = await prisma.oTP.create({
     *   data: {
     *     // ... data to create a OTP
     *   }
     * })
     * 
     */
    create<T extends OTPCreateArgs>(args: SelectSubset<T, OTPCreateArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OTPS.
     * @param {OTPCreateManyArgs} args - Arguments to create many OTPS.
     * @example
     * // Create many OTPS
     * const oTP = await prisma.oTP.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OTPCreateManyArgs>(args?: SelectSubset<T, OTPCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OTPS and returns the data saved in the database.
     * @param {OTPCreateManyAndReturnArgs} args - Arguments to create many OTPS.
     * @example
     * // Create many OTPS
     * const oTP = await prisma.oTP.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OTPS and only return the `id`
     * const oTPWithIdOnly = await prisma.oTP.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OTPCreateManyAndReturnArgs>(args?: SelectSubset<T, OTPCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OTP.
     * @param {OTPDeleteArgs} args - Arguments to delete one OTP.
     * @example
     * // Delete one OTP
     * const OTP = await prisma.oTP.delete({
     *   where: {
     *     // ... filter to delete one OTP
     *   }
     * })
     * 
     */
    delete<T extends OTPDeleteArgs>(args: SelectSubset<T, OTPDeleteArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OTP.
     * @param {OTPUpdateArgs} args - Arguments to update one OTP.
     * @example
     * // Update one OTP
     * const oTP = await prisma.oTP.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OTPUpdateArgs>(args: SelectSubset<T, OTPUpdateArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OTPS.
     * @param {OTPDeleteManyArgs} args - Arguments to filter OTPS to delete.
     * @example
     * // Delete a few OTPS
     * const { count } = await prisma.oTP.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OTPDeleteManyArgs>(args?: SelectSubset<T, OTPDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OTPS
     * const oTP = await prisma.oTP.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OTPUpdateManyArgs>(args: SelectSubset<T, OTPUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OTP.
     * @param {OTPUpsertArgs} args - Arguments to update or create a OTP.
     * @example
     * // Update or create a OTP
     * const oTP = await prisma.oTP.upsert({
     *   create: {
     *     // ... data to create a OTP
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OTP we want to update
     *   }
     * })
     */
    upsert<T extends OTPUpsertArgs>(args: SelectSubset<T, OTPUpsertArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPCountArgs} args - Arguments to filter OTPS to count.
     * @example
     * // Count the number of OTPS
     * const count = await prisma.oTP.count({
     *   where: {
     *     // ... the filter for the OTPS we want to count
     *   }
     * })
    **/
    count<T extends OTPCountArgs>(
      args?: Subset<T, OTPCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OTPCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OTPAggregateArgs>(args: Subset<T, OTPAggregateArgs>): Prisma.PrismaPromise<GetOTPAggregateType<T>>

    /**
     * Group by OTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OTPGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OTPGroupByArgs['orderBy'] }
        : { orderBy?: OTPGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OTPGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOTPGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OTP model
   */
  readonly fields: OTPFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OTP.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OTPClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OTP model
   */ 
  interface OTPFieldRefs {
    readonly id: FieldRef<"OTP", 'String'>
    readonly code: FieldRef<"OTP", 'String'>
    readonly userId: FieldRef<"OTP", 'String'>
    readonly expiresAt: FieldRef<"OTP", 'DateTime'>
    readonly status: FieldRef<"OTP", 'OTPStatus'>
    readonly createdAt: FieldRef<"OTP", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OTP findUnique
   */
  export type OTPFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP findUniqueOrThrow
   */
  export type OTPFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP findFirst
   */
  export type OTPFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTPS.
     */
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP findFirstOrThrow
   */
  export type OTPFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTPS.
     */
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP findMany
   */
  export type OTPFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTPS to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP create
   */
  export type OTPCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * The data needed to create a OTP.
     */
    data: XOR<OTPCreateInput, OTPUncheckedCreateInput>
  }

  /**
   * OTP createMany
   */
  export type OTPCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OTPS.
     */
    data: OTPCreateManyInput | OTPCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OTP createManyAndReturn
   */
  export type OTPCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OTPS.
     */
    data: OTPCreateManyInput | OTPCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OTP update
   */
  export type OTPUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * The data needed to update a OTP.
     */
    data: XOR<OTPUpdateInput, OTPUncheckedUpdateInput>
    /**
     * Choose, which OTP to update.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP updateMany
   */
  export type OTPUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OTPS.
     */
    data: XOR<OTPUpdateManyMutationInput, OTPUncheckedUpdateManyInput>
    /**
     * Filter which OTPS to update
     */
    where?: OTPWhereInput
  }

  /**
   * OTP upsert
   */
  export type OTPUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * The filter to search for the OTP to update in case it exists.
     */
    where: OTPWhereUniqueInput
    /**
     * In case the OTP found by the `where` argument doesn't exist, create a new OTP with this data.
     */
    create: XOR<OTPCreateInput, OTPUncheckedCreateInput>
    /**
     * In case the OTP was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OTPUpdateInput, OTPUncheckedUpdateInput>
  }

  /**
   * OTP delete
   */
  export type OTPDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter which OTP to delete.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP deleteMany
   */
  export type OTPDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTPS to delete
     */
    where?: OTPWhereInput
  }

  /**
   * OTP without action
   */
  export type OTPDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    createdAt: Date
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }


  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */ 
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
  }


  /**
   * Model KYCDocument
   */

  export type AggregateKYCDocument = {
    _count: KYCDocumentCountAggregateOutputType | null
    _min: KYCDocumentMinAggregateOutputType | null
    _max: KYCDocumentMaxAggregateOutputType | null
  }

  export type KYCDocumentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.DocumentType | null
    status: $Enums.VerificationStatus | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KYCDocumentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.DocumentType | null
    status: $Enums.VerificationStatus | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KYCDocumentCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    status: number
    documentUrls: number
    verifiedAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KYCDocumentMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    status?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KYCDocumentMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    status?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KYCDocumentCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    status?: true
    documentUrls?: true
    verifiedAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KYCDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KYCDocument to aggregate.
     */
    where?: KYCDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCDocuments to fetch.
     */
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KYCDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KYCDocuments
    **/
    _count?: true | KYCDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KYCDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KYCDocumentMaxAggregateInputType
  }

  export type GetKYCDocumentAggregateType<T extends KYCDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateKYCDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKYCDocument[P]>
      : GetScalarType<T[P], AggregateKYCDocument[P]>
  }




  export type KYCDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KYCDocumentWhereInput
    orderBy?: KYCDocumentOrderByWithAggregationInput | KYCDocumentOrderByWithAggregationInput[]
    by: KYCDocumentScalarFieldEnum[] | KYCDocumentScalarFieldEnum
    having?: KYCDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KYCDocumentCountAggregateInputType | true
    _min?: KYCDocumentMinAggregateInputType
    _max?: KYCDocumentMaxAggregateInputType
  }

  export type KYCDocumentGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.DocumentType
    status: $Enums.VerificationStatus
    documentUrls: string[]
    verifiedAt: Date | null
    metadata: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: KYCDocumentCountAggregateOutputType | null
    _min: KYCDocumentMinAggregateOutputType | null
    _max: KYCDocumentMaxAggregateOutputType | null
  }

  type GetKYCDocumentGroupByPayload<T extends KYCDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KYCDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KYCDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KYCDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], KYCDocumentGroupByOutputType[P]>
        }
      >
    >


  export type KYCDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    status?: boolean
    documentUrls?: boolean
    verifiedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kYCDocument"]>

  export type KYCDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    status?: boolean
    documentUrls?: boolean
    verifiedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kYCDocument"]>

  export type KYCDocumentSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    status?: boolean
    documentUrls?: boolean
    verifiedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KYCDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KYCDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $KYCDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KYCDocument"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.DocumentType
      status: $Enums.VerificationStatus
      documentUrls: string[]
      verifiedAt: Date | null
      metadata: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kYCDocument"]>
    composites: {}
  }

  type KYCDocumentGetPayload<S extends boolean | null | undefined | KYCDocumentDefaultArgs> = $Result.GetResult<Prisma.$KYCDocumentPayload, S>

  type KYCDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KYCDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KYCDocumentCountAggregateInputType | true
    }

  export interface KYCDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KYCDocument'], meta: { name: 'KYCDocument' } }
    /**
     * Find zero or one KYCDocument that matches the filter.
     * @param {KYCDocumentFindUniqueArgs} args - Arguments to find a KYCDocument
     * @example
     * // Get one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KYCDocumentFindUniqueArgs>(args: SelectSubset<T, KYCDocumentFindUniqueArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KYCDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KYCDocumentFindUniqueOrThrowArgs} args - Arguments to find a KYCDocument
     * @example
     * // Get one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KYCDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, KYCDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KYCDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentFindFirstArgs} args - Arguments to find a KYCDocument
     * @example
     * // Get one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KYCDocumentFindFirstArgs>(args?: SelectSubset<T, KYCDocumentFindFirstArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KYCDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentFindFirstOrThrowArgs} args - Arguments to find a KYCDocument
     * @example
     * // Get one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KYCDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, KYCDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KYCDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KYCDocuments
     * const kYCDocuments = await prisma.kYCDocument.findMany()
     * 
     * // Get first 10 KYCDocuments
     * const kYCDocuments = await prisma.kYCDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kYCDocumentWithIdOnly = await prisma.kYCDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KYCDocumentFindManyArgs>(args?: SelectSubset<T, KYCDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KYCDocument.
     * @param {KYCDocumentCreateArgs} args - Arguments to create a KYCDocument.
     * @example
     * // Create one KYCDocument
     * const KYCDocument = await prisma.kYCDocument.create({
     *   data: {
     *     // ... data to create a KYCDocument
     *   }
     * })
     * 
     */
    create<T extends KYCDocumentCreateArgs>(args: SelectSubset<T, KYCDocumentCreateArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KYCDocuments.
     * @param {KYCDocumentCreateManyArgs} args - Arguments to create many KYCDocuments.
     * @example
     * // Create many KYCDocuments
     * const kYCDocument = await prisma.kYCDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KYCDocumentCreateManyArgs>(args?: SelectSubset<T, KYCDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KYCDocuments and returns the data saved in the database.
     * @param {KYCDocumentCreateManyAndReturnArgs} args - Arguments to create many KYCDocuments.
     * @example
     * // Create many KYCDocuments
     * const kYCDocument = await prisma.kYCDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KYCDocuments and only return the `id`
     * const kYCDocumentWithIdOnly = await prisma.kYCDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KYCDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, KYCDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a KYCDocument.
     * @param {KYCDocumentDeleteArgs} args - Arguments to delete one KYCDocument.
     * @example
     * // Delete one KYCDocument
     * const KYCDocument = await prisma.kYCDocument.delete({
     *   where: {
     *     // ... filter to delete one KYCDocument
     *   }
     * })
     * 
     */
    delete<T extends KYCDocumentDeleteArgs>(args: SelectSubset<T, KYCDocumentDeleteArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KYCDocument.
     * @param {KYCDocumentUpdateArgs} args - Arguments to update one KYCDocument.
     * @example
     * // Update one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KYCDocumentUpdateArgs>(args: SelectSubset<T, KYCDocumentUpdateArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KYCDocuments.
     * @param {KYCDocumentDeleteManyArgs} args - Arguments to filter KYCDocuments to delete.
     * @example
     * // Delete a few KYCDocuments
     * const { count } = await prisma.kYCDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KYCDocumentDeleteManyArgs>(args?: SelectSubset<T, KYCDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KYCDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KYCDocuments
     * const kYCDocument = await prisma.kYCDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KYCDocumentUpdateManyArgs>(args: SelectSubset<T, KYCDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KYCDocument.
     * @param {KYCDocumentUpsertArgs} args - Arguments to update or create a KYCDocument.
     * @example
     * // Update or create a KYCDocument
     * const kYCDocument = await prisma.kYCDocument.upsert({
     *   create: {
     *     // ... data to create a KYCDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KYCDocument we want to update
     *   }
     * })
     */
    upsert<T extends KYCDocumentUpsertArgs>(args: SelectSubset<T, KYCDocumentUpsertArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KYCDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentCountArgs} args - Arguments to filter KYCDocuments to count.
     * @example
     * // Count the number of KYCDocuments
     * const count = await prisma.kYCDocument.count({
     *   where: {
     *     // ... the filter for the KYCDocuments we want to count
     *   }
     * })
    **/
    count<T extends KYCDocumentCountArgs>(
      args?: Subset<T, KYCDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KYCDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KYCDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KYCDocumentAggregateArgs>(args: Subset<T, KYCDocumentAggregateArgs>): Prisma.PrismaPromise<GetKYCDocumentAggregateType<T>>

    /**
     * Group by KYCDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KYCDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KYCDocumentGroupByArgs['orderBy'] }
        : { orderBy?: KYCDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KYCDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKYCDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KYCDocument model
   */
  readonly fields: KYCDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KYCDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KYCDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KYCDocument model
   */ 
  interface KYCDocumentFieldRefs {
    readonly id: FieldRef<"KYCDocument", 'String'>
    readonly userId: FieldRef<"KYCDocument", 'String'>
    readonly type: FieldRef<"KYCDocument", 'DocumentType'>
    readonly status: FieldRef<"KYCDocument", 'VerificationStatus'>
    readonly documentUrls: FieldRef<"KYCDocument", 'String[]'>
    readonly verifiedAt: FieldRef<"KYCDocument", 'DateTime'>
    readonly metadata: FieldRef<"KYCDocument", 'Json'>
    readonly createdAt: FieldRef<"KYCDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"KYCDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KYCDocument findUnique
   */
  export type KYCDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocument to fetch.
     */
    where: KYCDocumentWhereUniqueInput
  }

  /**
   * KYCDocument findUniqueOrThrow
   */
  export type KYCDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocument to fetch.
     */
    where: KYCDocumentWhereUniqueInput
  }

  /**
   * KYCDocument findFirst
   */
  export type KYCDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocument to fetch.
     */
    where?: KYCDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCDocuments to fetch.
     */
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KYCDocuments.
     */
    cursor?: KYCDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KYCDocuments.
     */
    distinct?: KYCDocumentScalarFieldEnum | KYCDocumentScalarFieldEnum[]
  }

  /**
   * KYCDocument findFirstOrThrow
   */
  export type KYCDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocument to fetch.
     */
    where?: KYCDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCDocuments to fetch.
     */
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KYCDocuments.
     */
    cursor?: KYCDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KYCDocuments.
     */
    distinct?: KYCDocumentScalarFieldEnum | KYCDocumentScalarFieldEnum[]
  }

  /**
   * KYCDocument findMany
   */
  export type KYCDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocuments to fetch.
     */
    where?: KYCDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCDocuments to fetch.
     */
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KYCDocuments.
     */
    cursor?: KYCDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCDocuments.
     */
    skip?: number
    distinct?: KYCDocumentScalarFieldEnum | KYCDocumentScalarFieldEnum[]
  }

  /**
   * KYCDocument create
   */
  export type KYCDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a KYCDocument.
     */
    data: XOR<KYCDocumentCreateInput, KYCDocumentUncheckedCreateInput>
  }

  /**
   * KYCDocument createMany
   */
  export type KYCDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KYCDocuments.
     */
    data: KYCDocumentCreateManyInput | KYCDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KYCDocument createManyAndReturn
   */
  export type KYCDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KYCDocuments.
     */
    data: KYCDocumentCreateManyInput | KYCDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KYCDocument update
   */
  export type KYCDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a KYCDocument.
     */
    data: XOR<KYCDocumentUpdateInput, KYCDocumentUncheckedUpdateInput>
    /**
     * Choose, which KYCDocument to update.
     */
    where: KYCDocumentWhereUniqueInput
  }

  /**
   * KYCDocument updateMany
   */
  export type KYCDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KYCDocuments.
     */
    data: XOR<KYCDocumentUpdateManyMutationInput, KYCDocumentUncheckedUpdateManyInput>
    /**
     * Filter which KYCDocuments to update
     */
    where?: KYCDocumentWhereInput
  }

  /**
   * KYCDocument upsert
   */
  export type KYCDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the KYCDocument to update in case it exists.
     */
    where: KYCDocumentWhereUniqueInput
    /**
     * In case the KYCDocument found by the `where` argument doesn't exist, create a new KYCDocument with this data.
     */
    create: XOR<KYCDocumentCreateInput, KYCDocumentUncheckedCreateInput>
    /**
     * In case the KYCDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KYCDocumentUpdateInput, KYCDocumentUncheckedUpdateInput>
  }

  /**
   * KYCDocument delete
   */
  export type KYCDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter which KYCDocument to delete.
     */
    where: KYCDocumentWhereUniqueInput
  }

  /**
   * KYCDocument deleteMany
   */
  export type KYCDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KYCDocuments to delete
     */
    where?: KYCDocumentWhereInput
  }

  /**
   * KYCDocument without action
   */
  export type KYCDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
  }


  /**
   * Model VerificationHistory
   */

  export type AggregateVerificationHistory = {
    _count: VerificationHistoryCountAggregateOutputType | null
    _min: VerificationHistoryMinAggregateOutputType | null
    _max: VerificationHistoryMaxAggregateOutputType | null
  }

  export type VerificationHistoryMinAggregateOutputType = {
    id: string | null
    entityId: string | null
    entityType: $Enums.EntityType | null
    status: $Enums.VerificationStatus | null
    verifiedBy: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationHistoryMaxAggregateOutputType = {
    id: string | null
    entityId: string | null
    entityType: $Enums.EntityType | null
    status: $Enums.VerificationStatus | null
    verifiedBy: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationHistoryCountAggregateOutputType = {
    id: number
    entityId: number
    entityType: number
    status: number
    verifiedBy: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationHistoryMinAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    status?: true
    verifiedBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationHistoryMaxAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    status?: true
    verifiedBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationHistoryCountAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    status?: true
    verifiedBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationHistory to aggregate.
     */
    where?: VerificationHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationHistories to fetch.
     */
    orderBy?: VerificationHistoryOrderByWithRelationInput | VerificationHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationHistories
    **/
    _count?: true | VerificationHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationHistoryMaxAggregateInputType
  }

  export type GetVerificationHistoryAggregateType<T extends VerificationHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationHistory[P]>
      : GetScalarType<T[P], AggregateVerificationHistory[P]>
  }




  export type VerificationHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationHistoryWhereInput
    orderBy?: VerificationHistoryOrderByWithAggregationInput | VerificationHistoryOrderByWithAggregationInput[]
    by: VerificationHistoryScalarFieldEnum[] | VerificationHistoryScalarFieldEnum
    having?: VerificationHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationHistoryCountAggregateInputType | true
    _min?: VerificationHistoryMinAggregateInputType
    _max?: VerificationHistoryMaxAggregateInputType
  }

  export type VerificationHistoryGroupByOutputType = {
    id: string
    entityId: string
    entityType: $Enums.EntityType
    status: $Enums.VerificationStatus
    verifiedBy: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: VerificationHistoryCountAggregateOutputType | null
    _min: VerificationHistoryMinAggregateOutputType | null
    _max: VerificationHistoryMaxAggregateOutputType | null
  }

  type GetVerificationHistoryGroupByPayload<T extends VerificationHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationHistoryGroupByOutputType[P]>
        }
      >
    >


  export type VerificationHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    entityType?: boolean
    status?: boolean
    verifiedBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    verifier?: boolean | VerificationHistory$verifierArgs<ExtArgs>
  }, ExtArgs["result"]["verificationHistory"]>

  export type VerificationHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    entityType?: boolean
    status?: boolean
    verifiedBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    verifier?: boolean | VerificationHistory$verifierArgs<ExtArgs>
  }, ExtArgs["result"]["verificationHistory"]>

  export type VerificationHistorySelectScalar = {
    id?: boolean
    entityId?: boolean
    entityType?: boolean
    status?: boolean
    verifiedBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    verifier?: boolean | VerificationHistory$verifierArgs<ExtArgs>
  }
  export type VerificationHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    verifier?: boolean | VerificationHistory$verifierArgs<ExtArgs>
  }

  export type $VerificationHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationHistory"
    objects: {
      verifier: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityId: string
      entityType: $Enums.EntityType
      status: $Enums.VerificationStatus
      verifiedBy: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["verificationHistory"]>
    composites: {}
  }

  type VerificationHistoryGetPayload<S extends boolean | null | undefined | VerificationHistoryDefaultArgs> = $Result.GetResult<Prisma.$VerificationHistoryPayload, S>

  type VerificationHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationHistoryCountAggregateInputType | true
    }

  export interface VerificationHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationHistory'], meta: { name: 'VerificationHistory' } }
    /**
     * Find zero or one VerificationHistory that matches the filter.
     * @param {VerificationHistoryFindUniqueArgs} args - Arguments to find a VerificationHistory
     * @example
     * // Get one VerificationHistory
     * const verificationHistory = await prisma.verificationHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationHistoryFindUniqueArgs>(args: SelectSubset<T, VerificationHistoryFindUniqueArgs<ExtArgs>>): Prisma__VerificationHistoryClient<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VerificationHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationHistoryFindUniqueOrThrowArgs} args - Arguments to find a VerificationHistory
     * @example
     * // Get one VerificationHistory
     * const verificationHistory = await prisma.verificationHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationHistoryClient<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VerificationHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationHistoryFindFirstArgs} args - Arguments to find a VerificationHistory
     * @example
     * // Get one VerificationHistory
     * const verificationHistory = await prisma.verificationHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationHistoryFindFirstArgs>(args?: SelectSubset<T, VerificationHistoryFindFirstArgs<ExtArgs>>): Prisma__VerificationHistoryClient<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VerificationHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationHistoryFindFirstOrThrowArgs} args - Arguments to find a VerificationHistory
     * @example
     * // Get one VerificationHistory
     * const verificationHistory = await prisma.verificationHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationHistoryClient<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VerificationHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationHistories
     * const verificationHistories = await prisma.verificationHistory.findMany()
     * 
     * // Get first 10 VerificationHistories
     * const verificationHistories = await prisma.verificationHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationHistoryWithIdOnly = await prisma.verificationHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationHistoryFindManyArgs>(args?: SelectSubset<T, VerificationHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VerificationHistory.
     * @param {VerificationHistoryCreateArgs} args - Arguments to create a VerificationHistory.
     * @example
     * // Create one VerificationHistory
     * const VerificationHistory = await prisma.verificationHistory.create({
     *   data: {
     *     // ... data to create a VerificationHistory
     *   }
     * })
     * 
     */
    create<T extends VerificationHistoryCreateArgs>(args: SelectSubset<T, VerificationHistoryCreateArgs<ExtArgs>>): Prisma__VerificationHistoryClient<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VerificationHistories.
     * @param {VerificationHistoryCreateManyArgs} args - Arguments to create many VerificationHistories.
     * @example
     * // Create many VerificationHistories
     * const verificationHistory = await prisma.verificationHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationHistoryCreateManyArgs>(args?: SelectSubset<T, VerificationHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationHistories and returns the data saved in the database.
     * @param {VerificationHistoryCreateManyAndReturnArgs} args - Arguments to create many VerificationHistories.
     * @example
     * // Create many VerificationHistories
     * const verificationHistory = await prisma.verificationHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationHistories and only return the `id`
     * const verificationHistoryWithIdOnly = await prisma.verificationHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VerificationHistory.
     * @param {VerificationHistoryDeleteArgs} args - Arguments to delete one VerificationHistory.
     * @example
     * // Delete one VerificationHistory
     * const VerificationHistory = await prisma.verificationHistory.delete({
     *   where: {
     *     // ... filter to delete one VerificationHistory
     *   }
     * })
     * 
     */
    delete<T extends VerificationHistoryDeleteArgs>(args: SelectSubset<T, VerificationHistoryDeleteArgs<ExtArgs>>): Prisma__VerificationHistoryClient<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VerificationHistory.
     * @param {VerificationHistoryUpdateArgs} args - Arguments to update one VerificationHistory.
     * @example
     * // Update one VerificationHistory
     * const verificationHistory = await prisma.verificationHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationHistoryUpdateArgs>(args: SelectSubset<T, VerificationHistoryUpdateArgs<ExtArgs>>): Prisma__VerificationHistoryClient<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VerificationHistories.
     * @param {VerificationHistoryDeleteManyArgs} args - Arguments to filter VerificationHistories to delete.
     * @example
     * // Delete a few VerificationHistories
     * const { count } = await prisma.verificationHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationHistoryDeleteManyArgs>(args?: SelectSubset<T, VerificationHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationHistories
     * const verificationHistory = await prisma.verificationHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationHistoryUpdateManyArgs>(args: SelectSubset<T, VerificationHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationHistory.
     * @param {VerificationHistoryUpsertArgs} args - Arguments to update or create a VerificationHistory.
     * @example
     * // Update or create a VerificationHistory
     * const verificationHistory = await prisma.verificationHistory.upsert({
     *   create: {
     *     // ... data to create a VerificationHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationHistory we want to update
     *   }
     * })
     */
    upsert<T extends VerificationHistoryUpsertArgs>(args: SelectSubset<T, VerificationHistoryUpsertArgs<ExtArgs>>): Prisma__VerificationHistoryClient<$Result.GetResult<Prisma.$VerificationHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VerificationHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationHistoryCountArgs} args - Arguments to filter VerificationHistories to count.
     * @example
     * // Count the number of VerificationHistories
     * const count = await prisma.verificationHistory.count({
     *   where: {
     *     // ... the filter for the VerificationHistories we want to count
     *   }
     * })
    **/
    count<T extends VerificationHistoryCountArgs>(
      args?: Subset<T, VerificationHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationHistoryAggregateArgs>(args: Subset<T, VerificationHistoryAggregateArgs>): Prisma.PrismaPromise<GetVerificationHistoryAggregateType<T>>

    /**
     * Group by VerificationHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationHistoryGroupByArgs['orderBy'] }
        : { orderBy?: VerificationHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationHistory model
   */
  readonly fields: VerificationHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    verifier<T extends VerificationHistory$verifierArgs<ExtArgs> = {}>(args?: Subset<T, VerificationHistory$verifierArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationHistory model
   */ 
  interface VerificationHistoryFieldRefs {
    readonly id: FieldRef<"VerificationHistory", 'String'>
    readonly entityId: FieldRef<"VerificationHistory", 'String'>
    readonly entityType: FieldRef<"VerificationHistory", 'EntityType'>
    readonly status: FieldRef<"VerificationHistory", 'VerificationStatus'>
    readonly verifiedBy: FieldRef<"VerificationHistory", 'String'>
    readonly notes: FieldRef<"VerificationHistory", 'String'>
    readonly createdAt: FieldRef<"VerificationHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"VerificationHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationHistory findUnique
   */
  export type VerificationHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which VerificationHistory to fetch.
     */
    where: VerificationHistoryWhereUniqueInput
  }

  /**
   * VerificationHistory findUniqueOrThrow
   */
  export type VerificationHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which VerificationHistory to fetch.
     */
    where: VerificationHistoryWhereUniqueInput
  }

  /**
   * VerificationHistory findFirst
   */
  export type VerificationHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which VerificationHistory to fetch.
     */
    where?: VerificationHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationHistories to fetch.
     */
    orderBy?: VerificationHistoryOrderByWithRelationInput | VerificationHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationHistories.
     */
    cursor?: VerificationHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationHistories.
     */
    distinct?: VerificationHistoryScalarFieldEnum | VerificationHistoryScalarFieldEnum[]
  }

  /**
   * VerificationHistory findFirstOrThrow
   */
  export type VerificationHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which VerificationHistory to fetch.
     */
    where?: VerificationHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationHistories to fetch.
     */
    orderBy?: VerificationHistoryOrderByWithRelationInput | VerificationHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationHistories.
     */
    cursor?: VerificationHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationHistories.
     */
    distinct?: VerificationHistoryScalarFieldEnum | VerificationHistoryScalarFieldEnum[]
  }

  /**
   * VerificationHistory findMany
   */
  export type VerificationHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which VerificationHistories to fetch.
     */
    where?: VerificationHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationHistories to fetch.
     */
    orderBy?: VerificationHistoryOrderByWithRelationInput | VerificationHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationHistories.
     */
    cursor?: VerificationHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationHistories.
     */
    skip?: number
    distinct?: VerificationHistoryScalarFieldEnum | VerificationHistoryScalarFieldEnum[]
  }

  /**
   * VerificationHistory create
   */
  export type VerificationHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a VerificationHistory.
     */
    data: XOR<VerificationHistoryCreateInput, VerificationHistoryUncheckedCreateInput>
  }

  /**
   * VerificationHistory createMany
   */
  export type VerificationHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationHistories.
     */
    data: VerificationHistoryCreateManyInput | VerificationHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationHistory createManyAndReturn
   */
  export type VerificationHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VerificationHistories.
     */
    data: VerificationHistoryCreateManyInput | VerificationHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VerificationHistory update
   */
  export type VerificationHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a VerificationHistory.
     */
    data: XOR<VerificationHistoryUpdateInput, VerificationHistoryUncheckedUpdateInput>
    /**
     * Choose, which VerificationHistory to update.
     */
    where: VerificationHistoryWhereUniqueInput
  }

  /**
   * VerificationHistory updateMany
   */
  export type VerificationHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationHistories.
     */
    data: XOR<VerificationHistoryUpdateManyMutationInput, VerificationHistoryUncheckedUpdateManyInput>
    /**
     * Filter which VerificationHistories to update
     */
    where?: VerificationHistoryWhereInput
  }

  /**
   * VerificationHistory upsert
   */
  export type VerificationHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the VerificationHistory to update in case it exists.
     */
    where: VerificationHistoryWhereUniqueInput
    /**
     * In case the VerificationHistory found by the `where` argument doesn't exist, create a new VerificationHistory with this data.
     */
    create: XOR<VerificationHistoryCreateInput, VerificationHistoryUncheckedCreateInput>
    /**
     * In case the VerificationHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationHistoryUpdateInput, VerificationHistoryUncheckedUpdateInput>
  }

  /**
   * VerificationHistory delete
   */
  export type VerificationHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
    /**
     * Filter which VerificationHistory to delete.
     */
    where: VerificationHistoryWhereUniqueInput
  }

  /**
   * VerificationHistory deleteMany
   */
  export type VerificationHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationHistories to delete
     */
    where?: VerificationHistoryWhereInput
  }

  /**
   * VerificationHistory.verifier
   */
  export type VerificationHistory$verifierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * VerificationHistory without action
   */
  export type VerificationHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationHistory
     */
    select?: VerificationHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    middleName: string | null
    dateOfBirth: Date | null
    phoneNumber: string | null
    gender: string | null
    nationality: string | null
    occupation: string | null
    occupationType: $Enums.OccupationType | null
    employer: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
    lastActivityAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    middleName: string | null
    dateOfBirth: Date | null
    phoneNumber: string | null
    gender: string | null
    nationality: string | null
    occupation: string | null
    occupationType: $Enums.OccupationType | null
    employer: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
    lastActivityAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    userId: number
    firstName: number
    lastName: number
    middleName: number
    dateOfBirth: number
    phoneNumber: number
    address: number
    gender: number
    nationality: number
    emergencyContact: number
    occupation: number
    occupationType: number
    employer: number
    employerDetails: number
    workAddress: number
    education: number
    metadata: number
    createdAt: number
    updatedAt: number
    settings: number
    communicationPreferences: number
    lastLoginAt: number
    lastActivityAt: number
    deviceInfo: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    middleName?: true
    dateOfBirth?: true
    phoneNumber?: true
    gender?: true
    nationality?: true
    occupation?: true
    occupationType?: true
    employer?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    lastActivityAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    middleName?: true
    dateOfBirth?: true
    phoneNumber?: true
    gender?: true
    nationality?: true
    occupation?: true
    occupationType?: true
    employer?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    lastActivityAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    middleName?: true
    dateOfBirth?: true
    phoneNumber?: true
    address?: true
    gender?: true
    nationality?: true
    emergencyContact?: true
    occupation?: true
    occupationType?: true
    employer?: true
    employerDetails?: true
    workAddress?: true
    education?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    settings?: true
    communicationPreferences?: true
    lastLoginAt?: true
    lastActivityAt?: true
    deviceInfo?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    userId: string
    firstName: string
    lastName: string
    middleName: string | null
    dateOfBirth: Date
    phoneNumber: string | null
    address: JsonValue | null
    gender: string | null
    nationality: string | null
    emergencyContact: JsonValue | null
    occupation: string | null
    occupationType: $Enums.OccupationType | null
    employer: string | null
    employerDetails: JsonValue | null
    workAddress: JsonValue | null
    education: JsonValue[]
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    settings: JsonValue | null
    communicationPreferences: JsonValue | null
    lastLoginAt: Date | null
    lastActivityAt: Date | null
    deviceInfo: JsonValue | null
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    middleName?: boolean
    dateOfBirth?: boolean
    phoneNumber?: boolean
    address?: boolean
    gender?: boolean
    nationality?: boolean
    emergencyContact?: boolean
    occupation?: boolean
    occupationType?: boolean
    employer?: boolean
    employerDetails?: boolean
    workAddress?: boolean
    education?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    settings?: boolean
    communicationPreferences?: boolean
    lastLoginAt?: boolean
    lastActivityAt?: boolean
    deviceInfo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    professionalProfile?: boolean | Profile$professionalProfileArgs<ExtArgs>
    studentProfile?: boolean | Profile$studentProfileArgs<ExtArgs>
    parentProfile?: boolean | Profile$parentProfileArgs<ExtArgs>
    staffProfile?: boolean | Profile$staffProfileArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    middleName?: boolean
    dateOfBirth?: boolean
    phoneNumber?: boolean
    address?: boolean
    gender?: boolean
    nationality?: boolean
    emergencyContact?: boolean
    occupation?: boolean
    occupationType?: boolean
    employer?: boolean
    employerDetails?: boolean
    workAddress?: boolean
    education?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    settings?: boolean
    communicationPreferences?: boolean
    lastLoginAt?: boolean
    lastActivityAt?: boolean
    deviceInfo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    middleName?: boolean
    dateOfBirth?: boolean
    phoneNumber?: boolean
    address?: boolean
    gender?: boolean
    nationality?: boolean
    emergencyContact?: boolean
    occupation?: boolean
    occupationType?: boolean
    employer?: boolean
    employerDetails?: boolean
    workAddress?: boolean
    education?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    settings?: boolean
    communicationPreferences?: boolean
    lastLoginAt?: boolean
    lastActivityAt?: boolean
    deviceInfo?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    professionalProfile?: boolean | Profile$professionalProfileArgs<ExtArgs>
    studentProfile?: boolean | Profile$studentProfileArgs<ExtArgs>
    parentProfile?: boolean | Profile$parentProfileArgs<ExtArgs>
    staffProfile?: boolean | Profile$staffProfileArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      professionalProfile: Prisma.$ProfessionalProfilePayload<ExtArgs> | null
      studentProfile: Prisma.$StudentProfilePayload<ExtArgs> | null
      parentProfile: Prisma.$ParentProfilePayload<ExtArgs> | null
      staffProfile: Prisma.$StaffProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      firstName: string
      lastName: string
      middleName: string | null
      dateOfBirth: Date
      phoneNumber: string | null
      address: Prisma.JsonValue | null
      gender: string | null
      nationality: string | null
      emergencyContact: Prisma.JsonValue | null
      occupation: string | null
      occupationType: $Enums.OccupationType | null
      employer: string | null
      employerDetails: Prisma.JsonValue | null
      workAddress: Prisma.JsonValue | null
      education: Prisma.JsonValue[]
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      settings: Prisma.JsonValue | null
      communicationPreferences: Prisma.JsonValue | null
      lastLoginAt: Date | null
      lastActivityAt: Date | null
      deviceInfo: Prisma.JsonValue | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    professionalProfile<T extends Profile$professionalProfileArgs<ExtArgs> = {}>(args?: Subset<T, Profile$professionalProfileArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    studentProfile<T extends Profile$studentProfileArgs<ExtArgs> = {}>(args?: Subset<T, Profile$studentProfileArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    parentProfile<T extends Profile$parentProfileArgs<ExtArgs> = {}>(args?: Subset<T, Profile$parentProfileArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    staffProfile<T extends Profile$staffProfileArgs<ExtArgs> = {}>(args?: Subset<T, Profile$staffProfileArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly firstName: FieldRef<"Profile", 'String'>
    readonly lastName: FieldRef<"Profile", 'String'>
    readonly middleName: FieldRef<"Profile", 'String'>
    readonly dateOfBirth: FieldRef<"Profile", 'DateTime'>
    readonly phoneNumber: FieldRef<"Profile", 'String'>
    readonly address: FieldRef<"Profile", 'Json'>
    readonly gender: FieldRef<"Profile", 'String'>
    readonly nationality: FieldRef<"Profile", 'String'>
    readonly emergencyContact: FieldRef<"Profile", 'Json'>
    readonly occupation: FieldRef<"Profile", 'String'>
    readonly occupationType: FieldRef<"Profile", 'OccupationType'>
    readonly employer: FieldRef<"Profile", 'String'>
    readonly employerDetails: FieldRef<"Profile", 'Json'>
    readonly workAddress: FieldRef<"Profile", 'Json'>
    readonly education: FieldRef<"Profile", 'Json[]'>
    readonly metadata: FieldRef<"Profile", 'Json'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
    readonly settings: FieldRef<"Profile", 'Json'>
    readonly communicationPreferences: FieldRef<"Profile", 'Json'>
    readonly lastLoginAt: FieldRef<"Profile", 'DateTime'>
    readonly lastActivityAt: FieldRef<"Profile", 'DateTime'>
    readonly deviceInfo: FieldRef<"Profile", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile.professionalProfile
   */
  export type Profile$professionalProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    where?: ProfessionalProfileWhereInput
  }

  /**
   * Profile.studentProfile
   */
  export type Profile$studentProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    where?: StudentProfileWhereInput
  }

  /**
   * Profile.parentProfile
   */
  export type Profile$parentProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    where?: ParentProfileWhereInput
  }

  /**
   * Profile.staffProfile
   */
  export type Profile$staffProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    where?: StaffProfileWhereInput
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model ProfessionalProfile
   */

  export type AggregateProfessionalProfile = {
    _count: ProfessionalProfileCountAggregateOutputType | null
    _avg: ProfessionalProfileAvgAggregateOutputType | null
    _sum: ProfessionalProfileSumAggregateOutputType | null
    _min: ProfessionalProfileMinAggregateOutputType | null
    _max: ProfessionalProfileMaxAggregateOutputType | null
  }

  export type ProfessionalProfileAvgAggregateOutputType = {
    yearsOfExperience: number | null
  }

  export type ProfessionalProfileSumAggregateOutputType = {
    yearsOfExperience: number | null
  }

  export type ProfessionalProfileMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    currentPosition: string | null
    yearsOfExperience: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionalProfileMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    currentPosition: string | null
    yearsOfExperience: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionalProfileCountAggregateOutputType = {
    id: number
    profileId: number
    currentPosition: number
    yearsOfExperience: number
    workHistory: number
    teachingExperience: number
    subjectsQualified: number
    adminExperience: number
    certifications: number
    licenses: number
    skills: number
    specializations: number
    achievements: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessionalProfileAvgAggregateInputType = {
    yearsOfExperience?: true
  }

  export type ProfessionalProfileSumAggregateInputType = {
    yearsOfExperience?: true
  }

  export type ProfessionalProfileMinAggregateInputType = {
    id?: true
    profileId?: true
    currentPosition?: true
    yearsOfExperience?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionalProfileMaxAggregateInputType = {
    id?: true
    profileId?: true
    currentPosition?: true
    yearsOfExperience?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionalProfileCountAggregateInputType = {
    id?: true
    profileId?: true
    currentPosition?: true
    yearsOfExperience?: true
    workHistory?: true
    teachingExperience?: true
    subjectsQualified?: true
    adminExperience?: true
    certifications?: true
    licenses?: true
    skills?: true
    specializations?: true
    achievements?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessionalProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalProfile to aggregate.
     */
    where?: ProfessionalProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalProfiles to fetch.
     */
    orderBy?: ProfessionalProfileOrderByWithRelationInput | ProfessionalProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionalProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionalProfiles
    **/
    _count?: true | ProfessionalProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionalProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionalProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalProfileMaxAggregateInputType
  }

  export type GetProfessionalProfileAggregateType<T extends ProfessionalProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionalProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionalProfile[P]>
      : GetScalarType<T[P], AggregateProfessionalProfile[P]>
  }




  export type ProfessionalProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalProfileWhereInput
    orderBy?: ProfessionalProfileOrderByWithAggregationInput | ProfessionalProfileOrderByWithAggregationInput[]
    by: ProfessionalProfileScalarFieldEnum[] | ProfessionalProfileScalarFieldEnum
    having?: ProfessionalProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalProfileCountAggregateInputType | true
    _avg?: ProfessionalProfileAvgAggregateInputType
    _sum?: ProfessionalProfileSumAggregateInputType
    _min?: ProfessionalProfileMinAggregateInputType
    _max?: ProfessionalProfileMaxAggregateInputType
  }

  export type ProfessionalProfileGroupByOutputType = {
    id: string
    profileId: string
    currentPosition: string | null
    yearsOfExperience: number | null
    workHistory: JsonValue[]
    teachingExperience: JsonValue | null
    subjectsQualified: string[]
    adminExperience: JsonValue | null
    certifications: JsonValue[]
    licenses: JsonValue[]
    skills: string[]
    specializations: string[]
    achievements: JsonValue[]
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProfessionalProfileCountAggregateOutputType | null
    _avg: ProfessionalProfileAvgAggregateOutputType | null
    _sum: ProfessionalProfileSumAggregateOutputType | null
    _min: ProfessionalProfileMinAggregateOutputType | null
    _max: ProfessionalProfileMaxAggregateOutputType | null
  }

  type GetProfessionalProfileGroupByPayload<T extends ProfessionalProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionalProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    currentPosition?: boolean
    yearsOfExperience?: boolean
    workHistory?: boolean
    teachingExperience?: boolean
    subjectsQualified?: boolean
    adminExperience?: boolean
    certifications?: boolean
    licenses?: boolean
    skills?: boolean
    specializations?: boolean
    achievements?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalProfile"]>

  export type ProfessionalProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    currentPosition?: boolean
    yearsOfExperience?: boolean
    workHistory?: boolean
    teachingExperience?: boolean
    subjectsQualified?: boolean
    adminExperience?: boolean
    certifications?: boolean
    licenses?: boolean
    skills?: boolean
    specializations?: boolean
    achievements?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalProfile"]>

  export type ProfessionalProfileSelectScalar = {
    id?: boolean
    profileId?: boolean
    currentPosition?: boolean
    yearsOfExperience?: boolean
    workHistory?: boolean
    teachingExperience?: boolean
    subjectsQualified?: boolean
    adminExperience?: boolean
    certifications?: boolean
    licenses?: boolean
    skills?: boolean
    specializations?: boolean
    achievements?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessionalProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type ProfessionalProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $ProfessionalProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionalProfile"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      currentPosition: string | null
      yearsOfExperience: number | null
      workHistory: Prisma.JsonValue[]
      teachingExperience: Prisma.JsonValue | null
      subjectsQualified: string[]
      adminExperience: Prisma.JsonValue | null
      certifications: Prisma.JsonValue[]
      licenses: Prisma.JsonValue[]
      skills: string[]
      specializations: string[]
      achievements: Prisma.JsonValue[]
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["professionalProfile"]>
    composites: {}
  }

  type ProfessionalProfileGetPayload<S extends boolean | null | undefined | ProfessionalProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfessionalProfilePayload, S>

  type ProfessionalProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfessionalProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfessionalProfileCountAggregateInputType | true
    }

  export interface ProfessionalProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionalProfile'], meta: { name: 'ProfessionalProfile' } }
    /**
     * Find zero or one ProfessionalProfile that matches the filter.
     * @param {ProfessionalProfileFindUniqueArgs} args - Arguments to find a ProfessionalProfile
     * @example
     * // Get one ProfessionalProfile
     * const professionalProfile = await prisma.professionalProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionalProfileFindUniqueArgs>(args: SelectSubset<T, ProfessionalProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProfessionalProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfessionalProfileFindUniqueOrThrowArgs} args - Arguments to find a ProfessionalProfile
     * @example
     * // Get one ProfessionalProfile
     * const professionalProfile = await prisma.professionalProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionalProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionalProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProfessionalProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalProfileFindFirstArgs} args - Arguments to find a ProfessionalProfile
     * @example
     * // Get one ProfessionalProfile
     * const professionalProfile = await prisma.professionalProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionalProfileFindFirstArgs>(args?: SelectSubset<T, ProfessionalProfileFindFirstArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProfessionalProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalProfileFindFirstOrThrowArgs} args - Arguments to find a ProfessionalProfile
     * @example
     * // Get one ProfessionalProfile
     * const professionalProfile = await prisma.professionalProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionalProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionalProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProfessionalProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionalProfiles
     * const professionalProfiles = await prisma.professionalProfile.findMany()
     * 
     * // Get first 10 ProfessionalProfiles
     * const professionalProfiles = await prisma.professionalProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalProfileWithIdOnly = await prisma.professionalProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionalProfileFindManyArgs>(args?: SelectSubset<T, ProfessionalProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProfessionalProfile.
     * @param {ProfessionalProfileCreateArgs} args - Arguments to create a ProfessionalProfile.
     * @example
     * // Create one ProfessionalProfile
     * const ProfessionalProfile = await prisma.professionalProfile.create({
     *   data: {
     *     // ... data to create a ProfessionalProfile
     *   }
     * })
     * 
     */
    create<T extends ProfessionalProfileCreateArgs>(args: SelectSubset<T, ProfessionalProfileCreateArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProfessionalProfiles.
     * @param {ProfessionalProfileCreateManyArgs} args - Arguments to create many ProfessionalProfiles.
     * @example
     * // Create many ProfessionalProfiles
     * const professionalProfile = await prisma.professionalProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionalProfileCreateManyArgs>(args?: SelectSubset<T, ProfessionalProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessionalProfiles and returns the data saved in the database.
     * @param {ProfessionalProfileCreateManyAndReturnArgs} args - Arguments to create many ProfessionalProfiles.
     * @example
     * // Create many ProfessionalProfiles
     * const professionalProfile = await prisma.professionalProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessionalProfiles and only return the `id`
     * const professionalProfileWithIdOnly = await prisma.professionalProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionalProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionalProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProfessionalProfile.
     * @param {ProfessionalProfileDeleteArgs} args - Arguments to delete one ProfessionalProfile.
     * @example
     * // Delete one ProfessionalProfile
     * const ProfessionalProfile = await prisma.professionalProfile.delete({
     *   where: {
     *     // ... filter to delete one ProfessionalProfile
     *   }
     * })
     * 
     */
    delete<T extends ProfessionalProfileDeleteArgs>(args: SelectSubset<T, ProfessionalProfileDeleteArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProfessionalProfile.
     * @param {ProfessionalProfileUpdateArgs} args - Arguments to update one ProfessionalProfile.
     * @example
     * // Update one ProfessionalProfile
     * const professionalProfile = await prisma.professionalProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionalProfileUpdateArgs>(args: SelectSubset<T, ProfessionalProfileUpdateArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProfessionalProfiles.
     * @param {ProfessionalProfileDeleteManyArgs} args - Arguments to filter ProfessionalProfiles to delete.
     * @example
     * // Delete a few ProfessionalProfiles
     * const { count } = await prisma.professionalProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionalProfileDeleteManyArgs>(args?: SelectSubset<T, ProfessionalProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionalProfiles
     * const professionalProfile = await prisma.professionalProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionalProfileUpdateManyArgs>(args: SelectSubset<T, ProfessionalProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfessionalProfile.
     * @param {ProfessionalProfileUpsertArgs} args - Arguments to update or create a ProfessionalProfile.
     * @example
     * // Update or create a ProfessionalProfile
     * const professionalProfile = await prisma.professionalProfile.upsert({
     *   create: {
     *     // ... data to create a ProfessionalProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionalProfile we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionalProfileUpsertArgs>(args: SelectSubset<T, ProfessionalProfileUpsertArgs<ExtArgs>>): Prisma__ProfessionalProfileClient<$Result.GetResult<Prisma.$ProfessionalProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProfessionalProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalProfileCountArgs} args - Arguments to filter ProfessionalProfiles to count.
     * @example
     * // Count the number of ProfessionalProfiles
     * const count = await prisma.professionalProfile.count({
     *   where: {
     *     // ... the filter for the ProfessionalProfiles we want to count
     *   }
     * })
    **/
    count<T extends ProfessionalProfileCountArgs>(
      args?: Subset<T, ProfessionalProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionalProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalProfileAggregateArgs>(args: Subset<T, ProfessionalProfileAggregateArgs>): Prisma.PrismaPromise<GetProfessionalProfileAggregateType<T>>

    /**
     * Group by ProfessionalProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionalProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionalProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionalProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionalProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionalProfile model
   */
  readonly fields: ProfessionalProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionalProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionalProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfessionalProfile model
   */ 
  interface ProfessionalProfileFieldRefs {
    readonly id: FieldRef<"ProfessionalProfile", 'String'>
    readonly profileId: FieldRef<"ProfessionalProfile", 'String'>
    readonly currentPosition: FieldRef<"ProfessionalProfile", 'String'>
    readonly yearsOfExperience: FieldRef<"ProfessionalProfile", 'Int'>
    readonly workHistory: FieldRef<"ProfessionalProfile", 'Json[]'>
    readonly teachingExperience: FieldRef<"ProfessionalProfile", 'Json'>
    readonly subjectsQualified: FieldRef<"ProfessionalProfile", 'String[]'>
    readonly adminExperience: FieldRef<"ProfessionalProfile", 'Json'>
    readonly certifications: FieldRef<"ProfessionalProfile", 'Json[]'>
    readonly licenses: FieldRef<"ProfessionalProfile", 'Json[]'>
    readonly skills: FieldRef<"ProfessionalProfile", 'String[]'>
    readonly specializations: FieldRef<"ProfessionalProfile", 'String[]'>
    readonly achievements: FieldRef<"ProfessionalProfile", 'Json[]'>
    readonly metadata: FieldRef<"ProfessionalProfile", 'Json'>
    readonly createdAt: FieldRef<"ProfessionalProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfessionalProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProfessionalProfile findUnique
   */
  export type ProfessionalProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalProfile to fetch.
     */
    where: ProfessionalProfileWhereUniqueInput
  }

  /**
   * ProfessionalProfile findUniqueOrThrow
   */
  export type ProfessionalProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalProfile to fetch.
     */
    where: ProfessionalProfileWhereUniqueInput
  }

  /**
   * ProfessionalProfile findFirst
   */
  export type ProfessionalProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalProfile to fetch.
     */
    where?: ProfessionalProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalProfiles to fetch.
     */
    orderBy?: ProfessionalProfileOrderByWithRelationInput | ProfessionalProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalProfiles.
     */
    cursor?: ProfessionalProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalProfiles.
     */
    distinct?: ProfessionalProfileScalarFieldEnum | ProfessionalProfileScalarFieldEnum[]
  }

  /**
   * ProfessionalProfile findFirstOrThrow
   */
  export type ProfessionalProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalProfile to fetch.
     */
    where?: ProfessionalProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalProfiles to fetch.
     */
    orderBy?: ProfessionalProfileOrderByWithRelationInput | ProfessionalProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalProfiles.
     */
    cursor?: ProfessionalProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalProfiles.
     */
    distinct?: ProfessionalProfileScalarFieldEnum | ProfessionalProfileScalarFieldEnum[]
  }

  /**
   * ProfessionalProfile findMany
   */
  export type ProfessionalProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalProfiles to fetch.
     */
    where?: ProfessionalProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalProfiles to fetch.
     */
    orderBy?: ProfessionalProfileOrderByWithRelationInput | ProfessionalProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionalProfiles.
     */
    cursor?: ProfessionalProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalProfiles.
     */
    skip?: number
    distinct?: ProfessionalProfileScalarFieldEnum | ProfessionalProfileScalarFieldEnum[]
  }

  /**
   * ProfessionalProfile create
   */
  export type ProfessionalProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionalProfile.
     */
    data: XOR<ProfessionalProfileCreateInput, ProfessionalProfileUncheckedCreateInput>
  }

  /**
   * ProfessionalProfile createMany
   */
  export type ProfessionalProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionalProfiles.
     */
    data: ProfessionalProfileCreateManyInput | ProfessionalProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessionalProfile createManyAndReturn
   */
  export type ProfessionalProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProfessionalProfiles.
     */
    data: ProfessionalProfileCreateManyInput | ProfessionalProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionalProfile update
   */
  export type ProfessionalProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionalProfile.
     */
    data: XOR<ProfessionalProfileUpdateInput, ProfessionalProfileUncheckedUpdateInput>
    /**
     * Choose, which ProfessionalProfile to update.
     */
    where: ProfessionalProfileWhereUniqueInput
  }

  /**
   * ProfessionalProfile updateMany
   */
  export type ProfessionalProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionalProfiles.
     */
    data: XOR<ProfessionalProfileUpdateManyMutationInput, ProfessionalProfileUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalProfiles to update
     */
    where?: ProfessionalProfileWhereInput
  }

  /**
   * ProfessionalProfile upsert
   */
  export type ProfessionalProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionalProfile to update in case it exists.
     */
    where: ProfessionalProfileWhereUniqueInput
    /**
     * In case the ProfessionalProfile found by the `where` argument doesn't exist, create a new ProfessionalProfile with this data.
     */
    create: XOR<ProfessionalProfileCreateInput, ProfessionalProfileUncheckedCreateInput>
    /**
     * In case the ProfessionalProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionalProfileUpdateInput, ProfessionalProfileUncheckedUpdateInput>
  }

  /**
   * ProfessionalProfile delete
   */
  export type ProfessionalProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
    /**
     * Filter which ProfessionalProfile to delete.
     */
    where: ProfessionalProfileWhereUniqueInput
  }

  /**
   * ProfessionalProfile deleteMany
   */
  export type ProfessionalProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalProfiles to delete
     */
    where?: ProfessionalProfileWhereInput
  }

  /**
   * ProfessionalProfile without action
   */
  export type ProfessionalProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalProfile
     */
    select?: ProfessionalProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalProfileInclude<ExtArgs> | null
  }


  /**
   * Model School
   */

  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolAvgAggregateOutputType = {
    capacity: number | null
  }

  export type SchoolSumAggregateOutputType = {
    capacity: number | null
  }

  export type SchoolMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    registrationNumber: string | null
    capacity: number | null
    verificationStatus: $Enums.VerificationStatus | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    createdBy: string | null
  }

  export type SchoolMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    registrationNumber: string | null
    capacity: number | null
    verificationStatus: $Enums.VerificationStatus | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    createdBy: string | null
  }

  export type SchoolCountAggregateOutputType = {
    id: number
    name: number
    type: number
    registrationNumber: number
    license: number
    contact: number
    address: number
    facilities: number
    capacity: number
    curriculum: number
    languages: number
    operatingHours: number
    termDates: number
    verificationStatus: number
    verifiedAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    status: number
    settings: number
    communicationSettings: number
    createdBy: number
    ownershipDetails: number
    systemApproval: number
    _all: number
  }


  export type SchoolAvgAggregateInputType = {
    capacity?: true
  }

  export type SchoolSumAggregateInputType = {
    capacity?: true
  }

  export type SchoolMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    registrationNumber?: true
    capacity?: true
    verificationStatus?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    createdBy?: true
  }

  export type SchoolMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    registrationNumber?: true
    capacity?: true
    verificationStatus?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    createdBy?: true
  }

  export type SchoolCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    registrationNumber?: true
    license?: true
    contact?: true
    address?: true
    facilities?: true
    capacity?: true
    curriculum?: true
    languages?: true
    operatingHours?: true
    termDates?: true
    verificationStatus?: true
    verifiedAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    settings?: true
    communicationSettings?: true
    createdBy?: true
    ownershipDetails?: true
    systemApproval?: true
    _all?: true
  }

  export type SchoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which School to aggregate.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithAggregationInput | SchoolOrderByWithAggregationInput[]
    by: SchoolScalarFieldEnum[] | SchoolScalarFieldEnum
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _avg?: SchoolAvgAggregateInputType
    _sum?: SchoolSumAggregateInputType
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }

  export type SchoolGroupByOutputType = {
    id: string
    name: string
    type: string
    registrationNumber: string
    license: JsonValue
    contact: JsonValue
    address: JsonValue
    facilities: string[]
    capacity: number
    curriculum: string[]
    languages: string[]
    operatingHours: JsonValue
    termDates: JsonValue[]
    verificationStatus: $Enums.VerificationStatus
    verifiedAt: Date | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    status: string
    settings: JsonValue | null
    communicationSettings: JsonValue | null
    createdBy: string
    ownershipDetails: JsonValue
    systemApproval: JsonValue | null
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    registrationNumber?: boolean
    license?: boolean
    contact?: boolean
    address?: boolean
    facilities?: boolean
    capacity?: boolean
    curriculum?: boolean
    languages?: boolean
    operatingHours?: boolean
    termDates?: boolean
    verificationStatus?: boolean
    verifiedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    settings?: boolean
    communicationSettings?: boolean
    createdBy?: boolean
    ownershipDetails?: boolean
    systemApproval?: boolean
    staffAssignments?: boolean | School$staffAssignmentsArgs<ExtArgs>
    reportCards?: boolean | School$reportCardsArgs<ExtArgs>
    classSubjects?: boolean | School$classSubjectsArgs<ExtArgs>
    classes?: boolean | School$classesArgs<ExtArgs>
    communicationGroups?: boolean | School$communicationGroupsArgs<ExtArgs>
    schoolRoles?: boolean | School$schoolRolesArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    registrationNumber?: boolean
    license?: boolean
    contact?: boolean
    address?: boolean
    facilities?: boolean
    capacity?: boolean
    curriculum?: boolean
    languages?: boolean
    operatingHours?: boolean
    termDates?: boolean
    verificationStatus?: boolean
    verifiedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    settings?: boolean
    communicationSettings?: boolean
    createdBy?: boolean
    ownershipDetails?: boolean
    systemApproval?: boolean
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    registrationNumber?: boolean
    license?: boolean
    contact?: boolean
    address?: boolean
    facilities?: boolean
    capacity?: boolean
    curriculum?: boolean
    languages?: boolean
    operatingHours?: boolean
    termDates?: boolean
    verificationStatus?: boolean
    verifiedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    settings?: boolean
    communicationSettings?: boolean
    createdBy?: boolean
    ownershipDetails?: boolean
    systemApproval?: boolean
  }

  export type SchoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staffAssignments?: boolean | School$staffAssignmentsArgs<ExtArgs>
    reportCards?: boolean | School$reportCardsArgs<ExtArgs>
    classSubjects?: boolean | School$classSubjectsArgs<ExtArgs>
    classes?: boolean | School$classesArgs<ExtArgs>
    communicationGroups?: boolean | School$communicationGroupsArgs<ExtArgs>
    schoolRoles?: boolean | School$schoolRolesArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SchoolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SchoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "School"
    objects: {
      staffAssignments: Prisma.$StaffAssignmentPayload<ExtArgs>[]
      reportCards: Prisma.$ReportCardPayload<ExtArgs>[]
      classSubjects: Prisma.$ClassSubjectPayload<ExtArgs>[]
      classes: Prisma.$ClassPayload<ExtArgs>[]
      communicationGroups: Prisma.$CommunicationGroupPayload<ExtArgs>[]
      schoolRoles: Prisma.$SchoolRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      registrationNumber: string
      license: Prisma.JsonValue
      contact: Prisma.JsonValue
      address: Prisma.JsonValue
      facilities: string[]
      capacity: number
      curriculum: string[]
      languages: string[]
      operatingHours: Prisma.JsonValue
      termDates: Prisma.JsonValue[]
      verificationStatus: $Enums.VerificationStatus
      verifiedAt: Date | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      status: string
      settings: Prisma.JsonValue | null
      communicationSettings: Prisma.JsonValue | null
      createdBy: string
      ownershipDetails: Prisma.JsonValue
      systemApproval: Prisma.JsonValue | null
    }, ExtArgs["result"]["school"]>
    composites: {}
  }

  type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = $Result.GetResult<Prisma.$SchoolPayload, S>

  type SchoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SchoolCountAggregateInputType | true
    }

  export interface SchoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolFindUniqueArgs>(args: SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one School that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolFindFirstArgs>(args?: SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first School that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchoolFindManyArgs>(args?: SelectSubset<T, SchoolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
     */
    create<T extends SchoolCreateArgs>(args: SelectSubset<T, SchoolCreateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schools.
     * @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolCreateManyArgs>(args?: SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schools and returns the data saved in the database.
     * @param {SchoolCreateManyAndReturnArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schools and only return the `id`
     * const schoolWithIdOnly = await prisma.school.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchoolCreateManyAndReturnArgs>(args?: SelectSubset<T, SchoolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
     */
    delete<T extends SchoolDeleteArgs>(args: SelectSubset<T, SchoolDeleteArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolUpdateArgs>(args: SelectSubset<T, SchoolUpdateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolDeleteManyArgs>(args?: SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolUpdateManyArgs>(args: SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
     */
    upsert<T extends SchoolUpsertArgs>(args: SelectSubset<T, SchoolUpsertArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the School model
   */
  readonly fields: SchoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staffAssignments<T extends School$staffAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, School$staffAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    reportCards<T extends School$reportCardsArgs<ExtArgs> = {}>(args?: Subset<T, School$reportCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findMany"> | Null>
    classSubjects<T extends School$classSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, School$classSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findMany"> | Null>
    classes<T extends School$classesArgs<ExtArgs> = {}>(args?: Subset<T, School$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany"> | Null>
    communicationGroups<T extends School$communicationGroupsArgs<ExtArgs> = {}>(args?: Subset<T, School$communicationGroupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "findMany"> | Null>
    schoolRoles<T extends School$schoolRolesArgs<ExtArgs> = {}>(args?: Subset<T, School$schoolRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the School model
   */ 
  interface SchoolFieldRefs {
    readonly id: FieldRef<"School", 'String'>
    readonly name: FieldRef<"School", 'String'>
    readonly type: FieldRef<"School", 'String'>
    readonly registrationNumber: FieldRef<"School", 'String'>
    readonly license: FieldRef<"School", 'Json'>
    readonly contact: FieldRef<"School", 'Json'>
    readonly address: FieldRef<"School", 'Json'>
    readonly facilities: FieldRef<"School", 'String[]'>
    readonly capacity: FieldRef<"School", 'Int'>
    readonly curriculum: FieldRef<"School", 'String[]'>
    readonly languages: FieldRef<"School", 'String[]'>
    readonly operatingHours: FieldRef<"School", 'Json'>
    readonly termDates: FieldRef<"School", 'Json[]'>
    readonly verificationStatus: FieldRef<"School", 'VerificationStatus'>
    readonly verifiedAt: FieldRef<"School", 'DateTime'>
    readonly metadata: FieldRef<"School", 'Json'>
    readonly createdAt: FieldRef<"School", 'DateTime'>
    readonly updatedAt: FieldRef<"School", 'DateTime'>
    readonly status: FieldRef<"School", 'String'>
    readonly settings: FieldRef<"School", 'Json'>
    readonly communicationSettings: FieldRef<"School", 'Json'>
    readonly createdBy: FieldRef<"School", 'String'>
    readonly ownershipDetails: FieldRef<"School", 'Json'>
    readonly systemApproval: FieldRef<"School", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * School findUnique
   */
  export type SchoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findFirst
   */
  export type SchoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findMany
   */
  export type SchoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which Schools to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School create
   */
  export type SchoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to create a School.
     */
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }

  /**
   * School createMany
   */
  export type SchoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School createManyAndReturn
   */
  export type SchoolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School update
   */
  export type SchoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to update a School.
     */
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
  }

  /**
   * School upsert
   */
  export type SchoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The filter to search for the School to update in case it exists.
     */
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     */
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }

  /**
   * School delete
   */
  export type SchoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter which School to delete.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schools to delete
     */
    where?: SchoolWhereInput
  }

  /**
   * School.staffAssignments
   */
  export type School$staffAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    where?: StaffAssignmentWhereInput
    orderBy?: StaffAssignmentOrderByWithRelationInput | StaffAssignmentOrderByWithRelationInput[]
    cursor?: StaffAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffAssignmentScalarFieldEnum | StaffAssignmentScalarFieldEnum[]
  }

  /**
   * School.reportCards
   */
  export type School$reportCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    where?: ReportCardWhereInput
    orderBy?: ReportCardOrderByWithRelationInput | ReportCardOrderByWithRelationInput[]
    cursor?: ReportCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportCardScalarFieldEnum | ReportCardScalarFieldEnum[]
  }

  /**
   * School.classSubjects
   */
  export type School$classSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    where?: ClassSubjectWhereInput
    orderBy?: ClassSubjectOrderByWithRelationInput | ClassSubjectOrderByWithRelationInput[]
    cursor?: ClassSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassSubjectScalarFieldEnum | ClassSubjectScalarFieldEnum[]
  }

  /**
   * School.classes
   */
  export type School$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * School.communicationGroups
   */
  export type School$communicationGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    where?: CommunicationGroupWhereInput
    orderBy?: CommunicationGroupOrderByWithRelationInput | CommunicationGroupOrderByWithRelationInput[]
    cursor?: CommunicationGroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunicationGroupScalarFieldEnum | CommunicationGroupScalarFieldEnum[]
  }

  /**
   * School.schoolRoles
   */
  export type School$schoolRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    where?: SchoolRoleWhereInput
    orderBy?: SchoolRoleOrderByWithRelationInput | SchoolRoleOrderByWithRelationInput[]
    cursor?: SchoolRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolRoleScalarFieldEnum | SchoolRoleScalarFieldEnum[]
  }

  /**
   * School without action
   */
  export type SchoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
  }


  /**
   * Model StaffAssignment
   */

  export type AggregateStaffAssignment = {
    _count: StaffAssignmentCountAggregateOutputType | null
    _min: StaffAssignmentMinAggregateOutputType | null
    _max: StaffAssignmentMaxAggregateOutputType | null
  }

  export type StaffAssignmentMinAggregateOutputType = {
    id: string | null
    staffProfileId: string | null
    schoolId: string | null
    role: $Enums.Role | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffAssignmentMaxAggregateOutputType = {
    id: string | null
    staffProfileId: string | null
    schoolId: string | null
    role: $Enums.Role | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffAssignmentCountAggregateOutputType = {
    id: number
    staffProfileId: number
    schoolId: number
    role: number
    startDate: number
    endDate: number
    isActive: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffAssignmentMinAggregateInputType = {
    id?: true
    staffProfileId?: true
    schoolId?: true
    role?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffAssignmentMaxAggregateInputType = {
    id?: true
    staffProfileId?: true
    schoolId?: true
    role?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffAssignmentCountAggregateInputType = {
    id?: true
    staffProfileId?: true
    schoolId?: true
    role?: true
    startDate?: true
    endDate?: true
    isActive?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffAssignment to aggregate.
     */
    where?: StaffAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffAssignments to fetch.
     */
    orderBy?: StaffAssignmentOrderByWithRelationInput | StaffAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffAssignments
    **/
    _count?: true | StaffAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffAssignmentMaxAggregateInputType
  }

  export type GetStaffAssignmentAggregateType<T extends StaffAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffAssignment[P]>
      : GetScalarType<T[P], AggregateStaffAssignment[P]>
  }




  export type StaffAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffAssignmentWhereInput
    orderBy?: StaffAssignmentOrderByWithAggregationInput | StaffAssignmentOrderByWithAggregationInput[]
    by: StaffAssignmentScalarFieldEnum[] | StaffAssignmentScalarFieldEnum
    having?: StaffAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffAssignmentCountAggregateInputType | true
    _min?: StaffAssignmentMinAggregateInputType
    _max?: StaffAssignmentMaxAggregateInputType
  }

  export type StaffAssignmentGroupByOutputType = {
    id: string
    staffProfileId: string
    schoolId: string
    role: $Enums.Role
    startDate: Date
    endDate: Date | null
    isActive: boolean
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: StaffAssignmentCountAggregateOutputType | null
    _min: StaffAssignmentMinAggregateOutputType | null
    _max: StaffAssignmentMaxAggregateOutputType | null
  }

  type GetStaffAssignmentGroupByPayload<T extends StaffAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], StaffAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type StaffAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffProfileId?: boolean
    schoolId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffAssignment"]>

  export type StaffAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffProfileId?: boolean
    schoolId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffAssignment"]>

  export type StaffAssignmentSelectScalar = {
    id?: boolean
    staffProfileId?: boolean
    schoolId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }
  export type StaffAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $StaffAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffAssignment"
    objects: {
      staffProfile: Prisma.$StaffProfilePayload<ExtArgs>
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffProfileId: string
      schoolId: string
      role: $Enums.Role
      startDate: Date
      endDate: Date | null
      isActive: boolean
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staffAssignment"]>
    composites: {}
  }

  type StaffAssignmentGetPayload<S extends boolean | null | undefined | StaffAssignmentDefaultArgs> = $Result.GetResult<Prisma.$StaffAssignmentPayload, S>

  type StaffAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StaffAssignmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StaffAssignmentCountAggregateInputType | true
    }

  export interface StaffAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffAssignment'], meta: { name: 'StaffAssignment' } }
    /**
     * Find zero or one StaffAssignment that matches the filter.
     * @param {StaffAssignmentFindUniqueArgs} args - Arguments to find a StaffAssignment
     * @example
     * // Get one StaffAssignment
     * const staffAssignment = await prisma.staffAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffAssignmentFindUniqueArgs>(args: SelectSubset<T, StaffAssignmentFindUniqueArgs<ExtArgs>>): Prisma__StaffAssignmentClient<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StaffAssignment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StaffAssignmentFindUniqueOrThrowArgs} args - Arguments to find a StaffAssignment
     * @example
     * // Get one StaffAssignment
     * const staffAssignment = await prisma.staffAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffAssignmentClient<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StaffAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAssignmentFindFirstArgs} args - Arguments to find a StaffAssignment
     * @example
     * // Get one StaffAssignment
     * const staffAssignment = await prisma.staffAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffAssignmentFindFirstArgs>(args?: SelectSubset<T, StaffAssignmentFindFirstArgs<ExtArgs>>): Prisma__StaffAssignmentClient<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StaffAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAssignmentFindFirstOrThrowArgs} args - Arguments to find a StaffAssignment
     * @example
     * // Get one StaffAssignment
     * const staffAssignment = await prisma.staffAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffAssignmentClient<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StaffAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffAssignments
     * const staffAssignments = await prisma.staffAssignment.findMany()
     * 
     * // Get first 10 StaffAssignments
     * const staffAssignments = await prisma.staffAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffAssignmentWithIdOnly = await prisma.staffAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffAssignmentFindManyArgs>(args?: SelectSubset<T, StaffAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StaffAssignment.
     * @param {StaffAssignmentCreateArgs} args - Arguments to create a StaffAssignment.
     * @example
     * // Create one StaffAssignment
     * const StaffAssignment = await prisma.staffAssignment.create({
     *   data: {
     *     // ... data to create a StaffAssignment
     *   }
     * })
     * 
     */
    create<T extends StaffAssignmentCreateArgs>(args: SelectSubset<T, StaffAssignmentCreateArgs<ExtArgs>>): Prisma__StaffAssignmentClient<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StaffAssignments.
     * @param {StaffAssignmentCreateManyArgs} args - Arguments to create many StaffAssignments.
     * @example
     * // Create many StaffAssignments
     * const staffAssignment = await prisma.staffAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffAssignmentCreateManyArgs>(args?: SelectSubset<T, StaffAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffAssignments and returns the data saved in the database.
     * @param {StaffAssignmentCreateManyAndReturnArgs} args - Arguments to create many StaffAssignments.
     * @example
     * // Create many StaffAssignments
     * const staffAssignment = await prisma.staffAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffAssignments and only return the `id`
     * const staffAssignmentWithIdOnly = await prisma.staffAssignment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StaffAssignment.
     * @param {StaffAssignmentDeleteArgs} args - Arguments to delete one StaffAssignment.
     * @example
     * // Delete one StaffAssignment
     * const StaffAssignment = await prisma.staffAssignment.delete({
     *   where: {
     *     // ... filter to delete one StaffAssignment
     *   }
     * })
     * 
     */
    delete<T extends StaffAssignmentDeleteArgs>(args: SelectSubset<T, StaffAssignmentDeleteArgs<ExtArgs>>): Prisma__StaffAssignmentClient<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StaffAssignment.
     * @param {StaffAssignmentUpdateArgs} args - Arguments to update one StaffAssignment.
     * @example
     * // Update one StaffAssignment
     * const staffAssignment = await prisma.staffAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffAssignmentUpdateArgs>(args: SelectSubset<T, StaffAssignmentUpdateArgs<ExtArgs>>): Prisma__StaffAssignmentClient<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StaffAssignments.
     * @param {StaffAssignmentDeleteManyArgs} args - Arguments to filter StaffAssignments to delete.
     * @example
     * // Delete a few StaffAssignments
     * const { count } = await prisma.staffAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffAssignmentDeleteManyArgs>(args?: SelectSubset<T, StaffAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffAssignments
     * const staffAssignment = await prisma.staffAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffAssignmentUpdateManyArgs>(args: SelectSubset<T, StaffAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StaffAssignment.
     * @param {StaffAssignmentUpsertArgs} args - Arguments to update or create a StaffAssignment.
     * @example
     * // Update or create a StaffAssignment
     * const staffAssignment = await prisma.staffAssignment.upsert({
     *   create: {
     *     // ... data to create a StaffAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffAssignment we want to update
     *   }
     * })
     */
    upsert<T extends StaffAssignmentUpsertArgs>(args: SelectSubset<T, StaffAssignmentUpsertArgs<ExtArgs>>): Prisma__StaffAssignmentClient<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StaffAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAssignmentCountArgs} args - Arguments to filter StaffAssignments to count.
     * @example
     * // Count the number of StaffAssignments
     * const count = await prisma.staffAssignment.count({
     *   where: {
     *     // ... the filter for the StaffAssignments we want to count
     *   }
     * })
    **/
    count<T extends StaffAssignmentCountArgs>(
      args?: Subset<T, StaffAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAssignmentAggregateArgs>(args: Subset<T, StaffAssignmentAggregateArgs>): Prisma.PrismaPromise<GetStaffAssignmentAggregateType<T>>

    /**
     * Group by StaffAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: StaffAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffAssignment model
   */
  readonly fields: StaffAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staffProfile<T extends StaffProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffProfileDefaultArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffAssignment model
   */ 
  interface StaffAssignmentFieldRefs {
    readonly id: FieldRef<"StaffAssignment", 'String'>
    readonly staffProfileId: FieldRef<"StaffAssignment", 'String'>
    readonly schoolId: FieldRef<"StaffAssignment", 'String'>
    readonly role: FieldRef<"StaffAssignment", 'Role'>
    readonly startDate: FieldRef<"StaffAssignment", 'DateTime'>
    readonly endDate: FieldRef<"StaffAssignment", 'DateTime'>
    readonly isActive: FieldRef<"StaffAssignment", 'Boolean'>
    readonly metadata: FieldRef<"StaffAssignment", 'Json'>
    readonly createdAt: FieldRef<"StaffAssignment", 'DateTime'>
    readonly updatedAt: FieldRef<"StaffAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StaffAssignment findUnique
   */
  export type StaffAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StaffAssignment to fetch.
     */
    where: StaffAssignmentWhereUniqueInput
  }

  /**
   * StaffAssignment findUniqueOrThrow
   */
  export type StaffAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StaffAssignment to fetch.
     */
    where: StaffAssignmentWhereUniqueInput
  }

  /**
   * StaffAssignment findFirst
   */
  export type StaffAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StaffAssignment to fetch.
     */
    where?: StaffAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffAssignments to fetch.
     */
    orderBy?: StaffAssignmentOrderByWithRelationInput | StaffAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffAssignments.
     */
    cursor?: StaffAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffAssignments.
     */
    distinct?: StaffAssignmentScalarFieldEnum | StaffAssignmentScalarFieldEnum[]
  }

  /**
   * StaffAssignment findFirstOrThrow
   */
  export type StaffAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StaffAssignment to fetch.
     */
    where?: StaffAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffAssignments to fetch.
     */
    orderBy?: StaffAssignmentOrderByWithRelationInput | StaffAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffAssignments.
     */
    cursor?: StaffAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffAssignments.
     */
    distinct?: StaffAssignmentScalarFieldEnum | StaffAssignmentScalarFieldEnum[]
  }

  /**
   * StaffAssignment findMany
   */
  export type StaffAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StaffAssignments to fetch.
     */
    where?: StaffAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffAssignments to fetch.
     */
    orderBy?: StaffAssignmentOrderByWithRelationInput | StaffAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffAssignments.
     */
    cursor?: StaffAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffAssignments.
     */
    skip?: number
    distinct?: StaffAssignmentScalarFieldEnum | StaffAssignmentScalarFieldEnum[]
  }

  /**
   * StaffAssignment create
   */
  export type StaffAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffAssignment.
     */
    data: XOR<StaffAssignmentCreateInput, StaffAssignmentUncheckedCreateInput>
  }

  /**
   * StaffAssignment createMany
   */
  export type StaffAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffAssignments.
     */
    data: StaffAssignmentCreateManyInput | StaffAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffAssignment createManyAndReturn
   */
  export type StaffAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StaffAssignments.
     */
    data: StaffAssignmentCreateManyInput | StaffAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffAssignment update
   */
  export type StaffAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffAssignment.
     */
    data: XOR<StaffAssignmentUpdateInput, StaffAssignmentUncheckedUpdateInput>
    /**
     * Choose, which StaffAssignment to update.
     */
    where: StaffAssignmentWhereUniqueInput
  }

  /**
   * StaffAssignment updateMany
   */
  export type StaffAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffAssignments.
     */
    data: XOR<StaffAssignmentUpdateManyMutationInput, StaffAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which StaffAssignments to update
     */
    where?: StaffAssignmentWhereInput
  }

  /**
   * StaffAssignment upsert
   */
  export type StaffAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffAssignment to update in case it exists.
     */
    where: StaffAssignmentWhereUniqueInput
    /**
     * In case the StaffAssignment found by the `where` argument doesn't exist, create a new StaffAssignment with this data.
     */
    create: XOR<StaffAssignmentCreateInput, StaffAssignmentUncheckedCreateInput>
    /**
     * In case the StaffAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffAssignmentUpdateInput, StaffAssignmentUncheckedUpdateInput>
  }

  /**
   * StaffAssignment delete
   */
  export type StaffAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    /**
     * Filter which StaffAssignment to delete.
     */
    where: StaffAssignmentWhereUniqueInput
  }

  /**
   * StaffAssignment deleteMany
   */
  export type StaffAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffAssignments to delete
     */
    where?: StaffAssignmentWhereInput
  }

  /**
   * StaffAssignment without action
   */
  export type StaffAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model ParentStudentRelation
   */

  export type AggregateParentStudentRelation = {
    _count: ParentStudentRelationCountAggregateOutputType | null
    _min: ParentStudentRelationMinAggregateOutputType | null
    _max: ParentStudentRelationMaxAggregateOutputType | null
  }

  export type ParentStudentRelationMinAggregateOutputType = {
    id: string | null
    parentProfileId: string | null
    studentProfileId: string | null
    relationship: string | null
    isPrimary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParentStudentRelationMaxAggregateOutputType = {
    id: string | null
    parentProfileId: string | null
    studentProfileId: string | null
    relationship: string | null
    isPrimary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParentStudentRelationCountAggregateOutputType = {
    id: number
    parentProfileId: number
    studentProfileId: number
    relationship: number
    isPrimary: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParentStudentRelationMinAggregateInputType = {
    id?: true
    parentProfileId?: true
    studentProfileId?: true
    relationship?: true
    isPrimary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParentStudentRelationMaxAggregateInputType = {
    id?: true
    parentProfileId?: true
    studentProfileId?: true
    relationship?: true
    isPrimary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParentStudentRelationCountAggregateInputType = {
    id?: true
    parentProfileId?: true
    studentProfileId?: true
    relationship?: true
    isPrimary?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParentStudentRelationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParentStudentRelation to aggregate.
     */
    where?: ParentStudentRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentStudentRelations to fetch.
     */
    orderBy?: ParentStudentRelationOrderByWithRelationInput | ParentStudentRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParentStudentRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentStudentRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentStudentRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParentStudentRelations
    **/
    _count?: true | ParentStudentRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParentStudentRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParentStudentRelationMaxAggregateInputType
  }

  export type GetParentStudentRelationAggregateType<T extends ParentStudentRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateParentStudentRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParentStudentRelation[P]>
      : GetScalarType<T[P], AggregateParentStudentRelation[P]>
  }




  export type ParentStudentRelationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentStudentRelationWhereInput
    orderBy?: ParentStudentRelationOrderByWithAggregationInput | ParentStudentRelationOrderByWithAggregationInput[]
    by: ParentStudentRelationScalarFieldEnum[] | ParentStudentRelationScalarFieldEnum
    having?: ParentStudentRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParentStudentRelationCountAggregateInputType | true
    _min?: ParentStudentRelationMinAggregateInputType
    _max?: ParentStudentRelationMaxAggregateInputType
  }

  export type ParentStudentRelationGroupByOutputType = {
    id: string
    parentProfileId: string
    studentProfileId: string
    relationship: string
    isPrimary: boolean
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ParentStudentRelationCountAggregateOutputType | null
    _min: ParentStudentRelationMinAggregateOutputType | null
    _max: ParentStudentRelationMaxAggregateOutputType | null
  }

  type GetParentStudentRelationGroupByPayload<T extends ParentStudentRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParentStudentRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParentStudentRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParentStudentRelationGroupByOutputType[P]>
            : GetScalarType<T[P], ParentStudentRelationGroupByOutputType[P]>
        }
      >
    >


  export type ParentStudentRelationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentProfileId?: boolean
    studentProfileId?: boolean
    relationship?: boolean
    isPrimary?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentProfile?: boolean | ParentProfileDefaultArgs<ExtArgs>
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parentStudentRelation"]>

  export type ParentStudentRelationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentProfileId?: boolean
    studentProfileId?: boolean
    relationship?: boolean
    isPrimary?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentProfile?: boolean | ParentProfileDefaultArgs<ExtArgs>
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parentStudentRelation"]>

  export type ParentStudentRelationSelectScalar = {
    id?: boolean
    parentProfileId?: boolean
    studentProfileId?: boolean
    relationship?: boolean
    isPrimary?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParentStudentRelationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentProfile?: boolean | ParentProfileDefaultArgs<ExtArgs>
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
  }
  export type ParentStudentRelationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentProfile?: boolean | ParentProfileDefaultArgs<ExtArgs>
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
  }

  export type $ParentStudentRelationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParentStudentRelation"
    objects: {
      parentProfile: Prisma.$ParentProfilePayload<ExtArgs>
      studentProfile: Prisma.$StudentProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parentProfileId: string
      studentProfileId: string
      relationship: string
      isPrimary: boolean
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["parentStudentRelation"]>
    composites: {}
  }

  type ParentStudentRelationGetPayload<S extends boolean | null | undefined | ParentStudentRelationDefaultArgs> = $Result.GetResult<Prisma.$ParentStudentRelationPayload, S>

  type ParentStudentRelationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParentStudentRelationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParentStudentRelationCountAggregateInputType | true
    }

  export interface ParentStudentRelationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParentStudentRelation'], meta: { name: 'ParentStudentRelation' } }
    /**
     * Find zero or one ParentStudentRelation that matches the filter.
     * @param {ParentStudentRelationFindUniqueArgs} args - Arguments to find a ParentStudentRelation
     * @example
     * // Get one ParentStudentRelation
     * const parentStudentRelation = await prisma.parentStudentRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParentStudentRelationFindUniqueArgs>(args: SelectSubset<T, ParentStudentRelationFindUniqueArgs<ExtArgs>>): Prisma__ParentStudentRelationClient<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ParentStudentRelation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParentStudentRelationFindUniqueOrThrowArgs} args - Arguments to find a ParentStudentRelation
     * @example
     * // Get one ParentStudentRelation
     * const parentStudentRelation = await prisma.parentStudentRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParentStudentRelationFindUniqueOrThrowArgs>(args: SelectSubset<T, ParentStudentRelationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParentStudentRelationClient<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ParentStudentRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentRelationFindFirstArgs} args - Arguments to find a ParentStudentRelation
     * @example
     * // Get one ParentStudentRelation
     * const parentStudentRelation = await prisma.parentStudentRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParentStudentRelationFindFirstArgs>(args?: SelectSubset<T, ParentStudentRelationFindFirstArgs<ExtArgs>>): Prisma__ParentStudentRelationClient<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ParentStudentRelation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentRelationFindFirstOrThrowArgs} args - Arguments to find a ParentStudentRelation
     * @example
     * // Get one ParentStudentRelation
     * const parentStudentRelation = await prisma.parentStudentRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParentStudentRelationFindFirstOrThrowArgs>(args?: SelectSubset<T, ParentStudentRelationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParentStudentRelationClient<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ParentStudentRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentRelationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParentStudentRelations
     * const parentStudentRelations = await prisma.parentStudentRelation.findMany()
     * 
     * // Get first 10 ParentStudentRelations
     * const parentStudentRelations = await prisma.parentStudentRelation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parentStudentRelationWithIdOnly = await prisma.parentStudentRelation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParentStudentRelationFindManyArgs>(args?: SelectSubset<T, ParentStudentRelationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ParentStudentRelation.
     * @param {ParentStudentRelationCreateArgs} args - Arguments to create a ParentStudentRelation.
     * @example
     * // Create one ParentStudentRelation
     * const ParentStudentRelation = await prisma.parentStudentRelation.create({
     *   data: {
     *     // ... data to create a ParentStudentRelation
     *   }
     * })
     * 
     */
    create<T extends ParentStudentRelationCreateArgs>(args: SelectSubset<T, ParentStudentRelationCreateArgs<ExtArgs>>): Prisma__ParentStudentRelationClient<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ParentStudentRelations.
     * @param {ParentStudentRelationCreateManyArgs} args - Arguments to create many ParentStudentRelations.
     * @example
     * // Create many ParentStudentRelations
     * const parentStudentRelation = await prisma.parentStudentRelation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParentStudentRelationCreateManyArgs>(args?: SelectSubset<T, ParentStudentRelationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParentStudentRelations and returns the data saved in the database.
     * @param {ParentStudentRelationCreateManyAndReturnArgs} args - Arguments to create many ParentStudentRelations.
     * @example
     * // Create many ParentStudentRelations
     * const parentStudentRelation = await prisma.parentStudentRelation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParentStudentRelations and only return the `id`
     * const parentStudentRelationWithIdOnly = await prisma.parentStudentRelation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParentStudentRelationCreateManyAndReturnArgs>(args?: SelectSubset<T, ParentStudentRelationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ParentStudentRelation.
     * @param {ParentStudentRelationDeleteArgs} args - Arguments to delete one ParentStudentRelation.
     * @example
     * // Delete one ParentStudentRelation
     * const ParentStudentRelation = await prisma.parentStudentRelation.delete({
     *   where: {
     *     // ... filter to delete one ParentStudentRelation
     *   }
     * })
     * 
     */
    delete<T extends ParentStudentRelationDeleteArgs>(args: SelectSubset<T, ParentStudentRelationDeleteArgs<ExtArgs>>): Prisma__ParentStudentRelationClient<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ParentStudentRelation.
     * @param {ParentStudentRelationUpdateArgs} args - Arguments to update one ParentStudentRelation.
     * @example
     * // Update one ParentStudentRelation
     * const parentStudentRelation = await prisma.parentStudentRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParentStudentRelationUpdateArgs>(args: SelectSubset<T, ParentStudentRelationUpdateArgs<ExtArgs>>): Prisma__ParentStudentRelationClient<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ParentStudentRelations.
     * @param {ParentStudentRelationDeleteManyArgs} args - Arguments to filter ParentStudentRelations to delete.
     * @example
     * // Delete a few ParentStudentRelations
     * const { count } = await prisma.parentStudentRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParentStudentRelationDeleteManyArgs>(args?: SelectSubset<T, ParentStudentRelationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParentStudentRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParentStudentRelations
     * const parentStudentRelation = await prisma.parentStudentRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParentStudentRelationUpdateManyArgs>(args: SelectSubset<T, ParentStudentRelationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParentStudentRelation.
     * @param {ParentStudentRelationUpsertArgs} args - Arguments to update or create a ParentStudentRelation.
     * @example
     * // Update or create a ParentStudentRelation
     * const parentStudentRelation = await prisma.parentStudentRelation.upsert({
     *   create: {
     *     // ... data to create a ParentStudentRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParentStudentRelation we want to update
     *   }
     * })
     */
    upsert<T extends ParentStudentRelationUpsertArgs>(args: SelectSubset<T, ParentStudentRelationUpsertArgs<ExtArgs>>): Prisma__ParentStudentRelationClient<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ParentStudentRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentRelationCountArgs} args - Arguments to filter ParentStudentRelations to count.
     * @example
     * // Count the number of ParentStudentRelations
     * const count = await prisma.parentStudentRelation.count({
     *   where: {
     *     // ... the filter for the ParentStudentRelations we want to count
     *   }
     * })
    **/
    count<T extends ParentStudentRelationCountArgs>(
      args?: Subset<T, ParentStudentRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParentStudentRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParentStudentRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParentStudentRelationAggregateArgs>(args: Subset<T, ParentStudentRelationAggregateArgs>): Prisma.PrismaPromise<GetParentStudentRelationAggregateType<T>>

    /**
     * Group by ParentStudentRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParentStudentRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParentStudentRelationGroupByArgs['orderBy'] }
        : { orderBy?: ParentStudentRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParentStudentRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParentStudentRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParentStudentRelation model
   */
  readonly fields: ParentStudentRelationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParentStudentRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParentStudentRelationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parentProfile<T extends ParentProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParentProfileDefaultArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    studentProfile<T extends StudentProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfileDefaultArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParentStudentRelation model
   */ 
  interface ParentStudentRelationFieldRefs {
    readonly id: FieldRef<"ParentStudentRelation", 'String'>
    readonly parentProfileId: FieldRef<"ParentStudentRelation", 'String'>
    readonly studentProfileId: FieldRef<"ParentStudentRelation", 'String'>
    readonly relationship: FieldRef<"ParentStudentRelation", 'String'>
    readonly isPrimary: FieldRef<"ParentStudentRelation", 'Boolean'>
    readonly metadata: FieldRef<"ParentStudentRelation", 'Json'>
    readonly createdAt: FieldRef<"ParentStudentRelation", 'DateTime'>
    readonly updatedAt: FieldRef<"ParentStudentRelation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ParentStudentRelation findUnique
   */
  export type ParentStudentRelationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudentRelation to fetch.
     */
    where: ParentStudentRelationWhereUniqueInput
  }

  /**
   * ParentStudentRelation findUniqueOrThrow
   */
  export type ParentStudentRelationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudentRelation to fetch.
     */
    where: ParentStudentRelationWhereUniqueInput
  }

  /**
   * ParentStudentRelation findFirst
   */
  export type ParentStudentRelationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudentRelation to fetch.
     */
    where?: ParentStudentRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentStudentRelations to fetch.
     */
    orderBy?: ParentStudentRelationOrderByWithRelationInput | ParentStudentRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParentStudentRelations.
     */
    cursor?: ParentStudentRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentStudentRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentStudentRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParentStudentRelations.
     */
    distinct?: ParentStudentRelationScalarFieldEnum | ParentStudentRelationScalarFieldEnum[]
  }

  /**
   * ParentStudentRelation findFirstOrThrow
   */
  export type ParentStudentRelationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudentRelation to fetch.
     */
    where?: ParentStudentRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentStudentRelations to fetch.
     */
    orderBy?: ParentStudentRelationOrderByWithRelationInput | ParentStudentRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParentStudentRelations.
     */
    cursor?: ParentStudentRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentStudentRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentStudentRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParentStudentRelations.
     */
    distinct?: ParentStudentRelationScalarFieldEnum | ParentStudentRelationScalarFieldEnum[]
  }

  /**
   * ParentStudentRelation findMany
   */
  export type ParentStudentRelationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudentRelations to fetch.
     */
    where?: ParentStudentRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentStudentRelations to fetch.
     */
    orderBy?: ParentStudentRelationOrderByWithRelationInput | ParentStudentRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParentStudentRelations.
     */
    cursor?: ParentStudentRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentStudentRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentStudentRelations.
     */
    skip?: number
    distinct?: ParentStudentRelationScalarFieldEnum | ParentStudentRelationScalarFieldEnum[]
  }

  /**
   * ParentStudentRelation create
   */
  export type ParentStudentRelationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * The data needed to create a ParentStudentRelation.
     */
    data: XOR<ParentStudentRelationCreateInput, ParentStudentRelationUncheckedCreateInput>
  }

  /**
   * ParentStudentRelation createMany
   */
  export type ParentStudentRelationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParentStudentRelations.
     */
    data: ParentStudentRelationCreateManyInput | ParentStudentRelationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParentStudentRelation createManyAndReturn
   */
  export type ParentStudentRelationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ParentStudentRelations.
     */
    data: ParentStudentRelationCreateManyInput | ParentStudentRelationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParentStudentRelation update
   */
  export type ParentStudentRelationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * The data needed to update a ParentStudentRelation.
     */
    data: XOR<ParentStudentRelationUpdateInput, ParentStudentRelationUncheckedUpdateInput>
    /**
     * Choose, which ParentStudentRelation to update.
     */
    where: ParentStudentRelationWhereUniqueInput
  }

  /**
   * ParentStudentRelation updateMany
   */
  export type ParentStudentRelationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParentStudentRelations.
     */
    data: XOR<ParentStudentRelationUpdateManyMutationInput, ParentStudentRelationUncheckedUpdateManyInput>
    /**
     * Filter which ParentStudentRelations to update
     */
    where?: ParentStudentRelationWhereInput
  }

  /**
   * ParentStudentRelation upsert
   */
  export type ParentStudentRelationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * The filter to search for the ParentStudentRelation to update in case it exists.
     */
    where: ParentStudentRelationWhereUniqueInput
    /**
     * In case the ParentStudentRelation found by the `where` argument doesn't exist, create a new ParentStudentRelation with this data.
     */
    create: XOR<ParentStudentRelationCreateInput, ParentStudentRelationUncheckedCreateInput>
    /**
     * In case the ParentStudentRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParentStudentRelationUpdateInput, ParentStudentRelationUncheckedUpdateInput>
  }

  /**
   * ParentStudentRelation delete
   */
  export type ParentStudentRelationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    /**
     * Filter which ParentStudentRelation to delete.
     */
    where: ParentStudentRelationWhereUniqueInput
  }

  /**
   * ParentStudentRelation deleteMany
   */
  export type ParentStudentRelationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParentStudentRelations to delete
     */
    where?: ParentStudentRelationWhereInput
  }

  /**
   * ParentStudentRelation without action
   */
  export type ParentStudentRelationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
  }


  /**
   * Model ClassSubject
   */

  export type AggregateClassSubject = {
    _count: ClassSubjectCountAggregateOutputType | null
    _avg: ClassSubjectAvgAggregateOutputType | null
    _sum: ClassSubjectSumAggregateOutputType | null
    _min: ClassSubjectMinAggregateOutputType | null
    _max: ClassSubjectMaxAggregateOutputType | null
  }

  export type ClassSubjectAvgAggregateOutputType = {
    maxStudents: number | null
    currentEnrollment: number | null
  }

  export type ClassSubjectSumAggregateOutputType = {
    maxStudents: number | null
    currentEnrollment: number | null
  }

  export type ClassSubjectMinAggregateOutputType = {
    id: string | null
    classId: string | null
    subjectId: string | null
    staffProfileId: string | null
    schoolId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: string | null
    term: string | null
    maxStudents: number | null
    currentEnrollment: number | null
  }

  export type ClassSubjectMaxAggregateOutputType = {
    id: string | null
    classId: string | null
    subjectId: string | null
    staffProfileId: string | null
    schoolId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: string | null
    term: string | null
    maxStudents: number | null
    currentEnrollment: number | null
  }

  export type ClassSubjectCountAggregateOutputType = {
    id: number
    classId: number
    subjectId: number
    staffProfileId: number
    schoolId: number
    schedule: number
    syllabus: number
    metadata: number
    createdAt: number
    updatedAt: number
    academicYear: number
    term: number
    maxStudents: number
    currentEnrollment: number
    _all: number
  }


  export type ClassSubjectAvgAggregateInputType = {
    maxStudents?: true
    currentEnrollment?: true
  }

  export type ClassSubjectSumAggregateInputType = {
    maxStudents?: true
    currentEnrollment?: true
  }

  export type ClassSubjectMinAggregateInputType = {
    id?: true
    classId?: true
    subjectId?: true
    staffProfileId?: true
    schoolId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    term?: true
    maxStudents?: true
    currentEnrollment?: true
  }

  export type ClassSubjectMaxAggregateInputType = {
    id?: true
    classId?: true
    subjectId?: true
    staffProfileId?: true
    schoolId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    term?: true
    maxStudents?: true
    currentEnrollment?: true
  }

  export type ClassSubjectCountAggregateInputType = {
    id?: true
    classId?: true
    subjectId?: true
    staffProfileId?: true
    schoolId?: true
    schedule?: true
    syllabus?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    term?: true
    maxStudents?: true
    currentEnrollment?: true
    _all?: true
  }

  export type ClassSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassSubject to aggregate.
     */
    where?: ClassSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSubjects to fetch.
     */
    orderBy?: ClassSubjectOrderByWithRelationInput | ClassSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassSubjects
    **/
    _count?: true | ClassSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassSubjectMaxAggregateInputType
  }

  export type GetClassSubjectAggregateType<T extends ClassSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateClassSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassSubject[P]>
      : GetScalarType<T[P], AggregateClassSubject[P]>
  }




  export type ClassSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassSubjectWhereInput
    orderBy?: ClassSubjectOrderByWithAggregationInput | ClassSubjectOrderByWithAggregationInput[]
    by: ClassSubjectScalarFieldEnum[] | ClassSubjectScalarFieldEnum
    having?: ClassSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassSubjectCountAggregateInputType | true
    _avg?: ClassSubjectAvgAggregateInputType
    _sum?: ClassSubjectSumAggregateInputType
    _min?: ClassSubjectMinAggregateInputType
    _max?: ClassSubjectMaxAggregateInputType
  }

  export type ClassSubjectGroupByOutputType = {
    id: string
    classId: string
    subjectId: string
    staffProfileId: string
    schoolId: string
    schedule: JsonValue
    syllabus: JsonValue | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    academicYear: string
    term: string
    maxStudents: number | null
    currentEnrollment: number
    _count: ClassSubjectCountAggregateOutputType | null
    _avg: ClassSubjectAvgAggregateOutputType | null
    _sum: ClassSubjectSumAggregateOutputType | null
    _min: ClassSubjectMinAggregateOutputType | null
    _max: ClassSubjectMaxAggregateOutputType | null
  }

  type GetClassSubjectGroupByPayload<T extends ClassSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], ClassSubjectGroupByOutputType[P]>
        }
      >
    >


  export type ClassSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    subjectId?: boolean
    staffProfileId?: boolean
    schoolId?: boolean
    schedule?: boolean
    syllabus?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    term?: boolean
    maxStudents?: boolean
    currentEnrollment?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classSubject"]>

  export type ClassSubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    subjectId?: boolean
    staffProfileId?: boolean
    schoolId?: boolean
    schedule?: boolean
    syllabus?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    term?: boolean
    maxStudents?: boolean
    currentEnrollment?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classSubject"]>

  export type ClassSubjectSelectScalar = {
    id?: boolean
    classId?: boolean
    subjectId?: boolean
    staffProfileId?: boolean
    schoolId?: boolean
    schedule?: boolean
    syllabus?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    term?: boolean
    maxStudents?: boolean
    currentEnrollment?: boolean
  }

  export type ClassSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }
  export type ClassSubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $ClassSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassSubject"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
      staffProfile: Prisma.$StaffProfilePayload<ExtArgs>
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      classId: string
      subjectId: string
      staffProfileId: string
      schoolId: string
      schedule: Prisma.JsonValue
      syllabus: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      academicYear: string
      term: string
      maxStudents: number | null
      currentEnrollment: number
    }, ExtArgs["result"]["classSubject"]>
    composites: {}
  }

  type ClassSubjectGetPayload<S extends boolean | null | undefined | ClassSubjectDefaultArgs> = $Result.GetResult<Prisma.$ClassSubjectPayload, S>

  type ClassSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClassSubjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClassSubjectCountAggregateInputType | true
    }

  export interface ClassSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassSubject'], meta: { name: 'ClassSubject' } }
    /**
     * Find zero or one ClassSubject that matches the filter.
     * @param {ClassSubjectFindUniqueArgs} args - Arguments to find a ClassSubject
     * @example
     * // Get one ClassSubject
     * const classSubject = await prisma.classSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassSubjectFindUniqueArgs>(args: SelectSubset<T, ClassSubjectFindUniqueArgs<ExtArgs>>): Prisma__ClassSubjectClient<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClassSubject that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClassSubjectFindUniqueOrThrowArgs} args - Arguments to find a ClassSubject
     * @example
     * // Get one ClassSubject
     * const classSubject = await prisma.classSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassSubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassSubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassSubjectClient<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClassSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSubjectFindFirstArgs} args - Arguments to find a ClassSubject
     * @example
     * // Get one ClassSubject
     * const classSubject = await prisma.classSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassSubjectFindFirstArgs>(args?: SelectSubset<T, ClassSubjectFindFirstArgs<ExtArgs>>): Prisma__ClassSubjectClient<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClassSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSubjectFindFirstOrThrowArgs} args - Arguments to find a ClassSubject
     * @example
     * // Get one ClassSubject
     * const classSubject = await prisma.classSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassSubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassSubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassSubjectClient<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClassSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassSubjects
     * const classSubjects = await prisma.classSubject.findMany()
     * 
     * // Get first 10 ClassSubjects
     * const classSubjects = await prisma.classSubject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classSubjectWithIdOnly = await prisma.classSubject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassSubjectFindManyArgs>(args?: SelectSubset<T, ClassSubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClassSubject.
     * @param {ClassSubjectCreateArgs} args - Arguments to create a ClassSubject.
     * @example
     * // Create one ClassSubject
     * const ClassSubject = await prisma.classSubject.create({
     *   data: {
     *     // ... data to create a ClassSubject
     *   }
     * })
     * 
     */
    create<T extends ClassSubjectCreateArgs>(args: SelectSubset<T, ClassSubjectCreateArgs<ExtArgs>>): Prisma__ClassSubjectClient<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClassSubjects.
     * @param {ClassSubjectCreateManyArgs} args - Arguments to create many ClassSubjects.
     * @example
     * // Create many ClassSubjects
     * const classSubject = await prisma.classSubject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassSubjectCreateManyArgs>(args?: SelectSubset<T, ClassSubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassSubjects and returns the data saved in the database.
     * @param {ClassSubjectCreateManyAndReturnArgs} args - Arguments to create many ClassSubjects.
     * @example
     * // Create many ClassSubjects
     * const classSubject = await prisma.classSubject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassSubjects and only return the `id`
     * const classSubjectWithIdOnly = await prisma.classSubject.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassSubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassSubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ClassSubject.
     * @param {ClassSubjectDeleteArgs} args - Arguments to delete one ClassSubject.
     * @example
     * // Delete one ClassSubject
     * const ClassSubject = await prisma.classSubject.delete({
     *   where: {
     *     // ... filter to delete one ClassSubject
     *   }
     * })
     * 
     */
    delete<T extends ClassSubjectDeleteArgs>(args: SelectSubset<T, ClassSubjectDeleteArgs<ExtArgs>>): Prisma__ClassSubjectClient<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClassSubject.
     * @param {ClassSubjectUpdateArgs} args - Arguments to update one ClassSubject.
     * @example
     * // Update one ClassSubject
     * const classSubject = await prisma.classSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassSubjectUpdateArgs>(args: SelectSubset<T, ClassSubjectUpdateArgs<ExtArgs>>): Prisma__ClassSubjectClient<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClassSubjects.
     * @param {ClassSubjectDeleteManyArgs} args - Arguments to filter ClassSubjects to delete.
     * @example
     * // Delete a few ClassSubjects
     * const { count } = await prisma.classSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassSubjectDeleteManyArgs>(args?: SelectSubset<T, ClassSubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassSubjects
     * const classSubject = await prisma.classSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassSubjectUpdateManyArgs>(args: SelectSubset<T, ClassSubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClassSubject.
     * @param {ClassSubjectUpsertArgs} args - Arguments to update or create a ClassSubject.
     * @example
     * // Update or create a ClassSubject
     * const classSubject = await prisma.classSubject.upsert({
     *   create: {
     *     // ... data to create a ClassSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassSubject we want to update
     *   }
     * })
     */
    upsert<T extends ClassSubjectUpsertArgs>(args: SelectSubset<T, ClassSubjectUpsertArgs<ExtArgs>>): Prisma__ClassSubjectClient<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClassSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSubjectCountArgs} args - Arguments to filter ClassSubjects to count.
     * @example
     * // Count the number of ClassSubjects
     * const count = await prisma.classSubject.count({
     *   where: {
     *     // ... the filter for the ClassSubjects we want to count
     *   }
     * })
    **/
    count<T extends ClassSubjectCountArgs>(
      args?: Subset<T, ClassSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassSubjectAggregateArgs>(args: Subset<T, ClassSubjectAggregateArgs>): Prisma.PrismaPromise<GetClassSubjectAggregateType<T>>

    /**
     * Group by ClassSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassSubjectGroupByArgs['orderBy'] }
        : { orderBy?: ClassSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassSubject model
   */
  readonly fields: ClassSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    staffProfile<T extends StaffProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffProfileDefaultArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassSubject model
   */ 
  interface ClassSubjectFieldRefs {
    readonly id: FieldRef<"ClassSubject", 'String'>
    readonly classId: FieldRef<"ClassSubject", 'String'>
    readonly subjectId: FieldRef<"ClassSubject", 'String'>
    readonly staffProfileId: FieldRef<"ClassSubject", 'String'>
    readonly schoolId: FieldRef<"ClassSubject", 'String'>
    readonly schedule: FieldRef<"ClassSubject", 'Json'>
    readonly syllabus: FieldRef<"ClassSubject", 'Json'>
    readonly metadata: FieldRef<"ClassSubject", 'Json'>
    readonly createdAt: FieldRef<"ClassSubject", 'DateTime'>
    readonly updatedAt: FieldRef<"ClassSubject", 'DateTime'>
    readonly academicYear: FieldRef<"ClassSubject", 'String'>
    readonly term: FieldRef<"ClassSubject", 'String'>
    readonly maxStudents: FieldRef<"ClassSubject", 'Int'>
    readonly currentEnrollment: FieldRef<"ClassSubject", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ClassSubject findUnique
   */
  export type ClassSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ClassSubject to fetch.
     */
    where: ClassSubjectWhereUniqueInput
  }

  /**
   * ClassSubject findUniqueOrThrow
   */
  export type ClassSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ClassSubject to fetch.
     */
    where: ClassSubjectWhereUniqueInput
  }

  /**
   * ClassSubject findFirst
   */
  export type ClassSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ClassSubject to fetch.
     */
    where?: ClassSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSubjects to fetch.
     */
    orderBy?: ClassSubjectOrderByWithRelationInput | ClassSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassSubjects.
     */
    cursor?: ClassSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassSubjects.
     */
    distinct?: ClassSubjectScalarFieldEnum | ClassSubjectScalarFieldEnum[]
  }

  /**
   * ClassSubject findFirstOrThrow
   */
  export type ClassSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ClassSubject to fetch.
     */
    where?: ClassSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSubjects to fetch.
     */
    orderBy?: ClassSubjectOrderByWithRelationInput | ClassSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassSubjects.
     */
    cursor?: ClassSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassSubjects.
     */
    distinct?: ClassSubjectScalarFieldEnum | ClassSubjectScalarFieldEnum[]
  }

  /**
   * ClassSubject findMany
   */
  export type ClassSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ClassSubjects to fetch.
     */
    where?: ClassSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSubjects to fetch.
     */
    orderBy?: ClassSubjectOrderByWithRelationInput | ClassSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassSubjects.
     */
    cursor?: ClassSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSubjects.
     */
    skip?: number
    distinct?: ClassSubjectScalarFieldEnum | ClassSubjectScalarFieldEnum[]
  }

  /**
   * ClassSubject create
   */
  export type ClassSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassSubject.
     */
    data: XOR<ClassSubjectCreateInput, ClassSubjectUncheckedCreateInput>
  }

  /**
   * ClassSubject createMany
   */
  export type ClassSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassSubjects.
     */
    data: ClassSubjectCreateManyInput | ClassSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassSubject createManyAndReturn
   */
  export type ClassSubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ClassSubjects.
     */
    data: ClassSubjectCreateManyInput | ClassSubjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassSubject update
   */
  export type ClassSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassSubject.
     */
    data: XOR<ClassSubjectUpdateInput, ClassSubjectUncheckedUpdateInput>
    /**
     * Choose, which ClassSubject to update.
     */
    where: ClassSubjectWhereUniqueInput
  }

  /**
   * ClassSubject updateMany
   */
  export type ClassSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassSubjects.
     */
    data: XOR<ClassSubjectUpdateManyMutationInput, ClassSubjectUncheckedUpdateManyInput>
    /**
     * Filter which ClassSubjects to update
     */
    where?: ClassSubjectWhereInput
  }

  /**
   * ClassSubject upsert
   */
  export type ClassSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassSubject to update in case it exists.
     */
    where: ClassSubjectWhereUniqueInput
    /**
     * In case the ClassSubject found by the `where` argument doesn't exist, create a new ClassSubject with this data.
     */
    create: XOR<ClassSubjectCreateInput, ClassSubjectUncheckedCreateInput>
    /**
     * In case the ClassSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassSubjectUpdateInput, ClassSubjectUncheckedUpdateInput>
  }

  /**
   * ClassSubject delete
   */
  export type ClassSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    /**
     * Filter which ClassSubject to delete.
     */
    where: ClassSubjectWhereUniqueInput
  }

  /**
   * ClassSubject deleteMany
   */
  export type ClassSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassSubjects to delete
     */
    where?: ClassSubjectWhereInput
  }

  /**
   * ClassSubject without action
   */
  export type ClassSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    capacity: number | null
  }

  export type ClassSumAggregateOutputType = {
    capacity: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    name: string | null
    grade: string | null
    section: string | null
    academicYear: string | null
    capacity: number | null
    schoolId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    classMasterId: string | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    name: string | null
    grade: string | null
    section: string | null
    academicYear: string | null
    capacity: number | null
    schoolId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    classMasterId: string | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    grade: number
    section: number
    academicYear: number
    capacity: number
    schedule: number
    schoolId: number
    metadata: number
    createdAt: number
    updatedAt: number
    classMasterId: number
    classMasterHistory: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    capacity?: true
  }

  export type ClassSumAggregateInputType = {
    capacity?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    section?: true
    academicYear?: true
    capacity?: true
    schoolId?: true
    createdAt?: true
    updatedAt?: true
    classMasterId?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    section?: true
    academicYear?: true
    capacity?: true
    schoolId?: true
    createdAt?: true
    updatedAt?: true
    classMasterId?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    section?: true
    academicYear?: true
    capacity?: true
    schedule?: true
    schoolId?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    classMasterId?: true
    classMasterHistory?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: string
    name: string
    grade: string
    section: string | null
    academicYear: string
    capacity: number
    schedule: JsonValue
    schoolId: string
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    classMasterId: string | null
    classMasterHistory: JsonValue[]
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    grade?: boolean
    section?: boolean
    academicYear?: boolean
    capacity?: boolean
    schedule?: boolean
    schoolId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    classMasterId?: boolean
    classMasterHistory?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    classSubjects?: boolean | Class$classSubjectsArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    attendance?: boolean | Class$attendanceArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    grade?: boolean
    section?: boolean
    academicYear?: boolean
    capacity?: boolean
    schedule?: boolean
    schoolId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    classMasterId?: boolean
    classMasterHistory?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
    grade?: boolean
    section?: boolean
    academicYear?: boolean
    capacity?: boolean
    schedule?: boolean
    schoolId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    classMasterId?: boolean
    classMasterHistory?: boolean
  }

  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    classSubjects?: boolean | Class$classSubjectsArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    attendance?: boolean | Class$attendanceArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      classSubjects: Prisma.$ClassSubjectPayload<ExtArgs>[]
      students: Prisma.$ClassStudentPayload<ExtArgs>[]
      attendance: Prisma.$AttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      grade: string
      section: string | null
      academicYear: string
      capacity: number
      schedule: Prisma.JsonValue
      schoolId: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      classMasterId: string | null
      classMasterHistory: Prisma.JsonValue[]
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    classSubjects<T extends Class$classSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, Class$classSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findMany"> | Null>
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findMany"> | Null>
    attendance<T extends Class$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, Class$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */ 
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'String'>
    readonly name: FieldRef<"Class", 'String'>
    readonly grade: FieldRef<"Class", 'String'>
    readonly section: FieldRef<"Class", 'String'>
    readonly academicYear: FieldRef<"Class", 'String'>
    readonly capacity: FieldRef<"Class", 'Int'>
    readonly schedule: FieldRef<"Class", 'Json'>
    readonly schoolId: FieldRef<"Class", 'String'>
    readonly metadata: FieldRef<"Class", 'Json'>
    readonly createdAt: FieldRef<"Class", 'DateTime'>
    readonly updatedAt: FieldRef<"Class", 'DateTime'>
    readonly classMasterId: FieldRef<"Class", 'String'>
    readonly classMasterHistory: FieldRef<"Class", 'Json[]'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
  }

  /**
   * Class.classSubjects
   */
  export type Class$classSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    where?: ClassSubjectWhereInput
    orderBy?: ClassSubjectOrderByWithRelationInput | ClassSubjectOrderByWithRelationInput[]
    cursor?: ClassSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassSubjectScalarFieldEnum | ClassSubjectScalarFieldEnum[]
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    where?: ClassStudentWhereInput
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    cursor?: ClassStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * Class.attendance
   */
  export type Class$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model ClassStudent
   */

  export type AggregateClassStudent = {
    _count: ClassStudentCountAggregateOutputType | null
    _min: ClassStudentMinAggregateOutputType | null
    _max: ClassStudentMaxAggregateOutputType | null
  }

  export type ClassStudentMinAggregateOutputType = {
    id: string | null
    classId: string | null
    studentProfileId: string | null
    enrollmentDate: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassStudentMaxAggregateOutputType = {
    id: string | null
    classId: string | null
    studentProfileId: string | null
    enrollmentDate: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassStudentCountAggregateOutputType = {
    id: number
    classId: number
    studentProfileId: number
    enrollmentDate: number
    status: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClassStudentMinAggregateInputType = {
    id?: true
    classId?: true
    studentProfileId?: true
    enrollmentDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassStudentMaxAggregateInputType = {
    id?: true
    classId?: true
    studentProfileId?: true
    enrollmentDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassStudentCountAggregateInputType = {
    id?: true
    classId?: true
    studentProfileId?: true
    enrollmentDate?: true
    status?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClassStudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassStudent to aggregate.
     */
    where?: ClassStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassStudents to fetch.
     */
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassStudents
    **/
    _count?: true | ClassStudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassStudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassStudentMaxAggregateInputType
  }

  export type GetClassStudentAggregateType<T extends ClassStudentAggregateArgs> = {
        [P in keyof T & keyof AggregateClassStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassStudent[P]>
      : GetScalarType<T[P], AggregateClassStudent[P]>
  }




  export type ClassStudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassStudentWhereInput
    orderBy?: ClassStudentOrderByWithAggregationInput | ClassStudentOrderByWithAggregationInput[]
    by: ClassStudentScalarFieldEnum[] | ClassStudentScalarFieldEnum
    having?: ClassStudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassStudentCountAggregateInputType | true
    _min?: ClassStudentMinAggregateInputType
    _max?: ClassStudentMaxAggregateInputType
  }

  export type ClassStudentGroupByOutputType = {
    id: string
    classId: string
    studentProfileId: string
    enrollmentDate: Date
    status: string
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ClassStudentCountAggregateOutputType | null
    _min: ClassStudentMinAggregateOutputType | null
    _max: ClassStudentMaxAggregateOutputType | null
  }

  type GetClassStudentGroupByPayload<T extends ClassStudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassStudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassStudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassStudentGroupByOutputType[P]>
            : GetScalarType<T[P], ClassStudentGroupByOutputType[P]>
        }
      >
    >


  export type ClassStudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    studentProfileId?: boolean
    enrollmentDate?: boolean
    status?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classStudent"]>

  export type ClassStudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    studentProfileId?: boolean
    enrollmentDate?: boolean
    status?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classStudent"]>

  export type ClassStudentSelectScalar = {
    id?: boolean
    classId?: boolean
    studentProfileId?: boolean
    enrollmentDate?: boolean
    status?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClassStudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
  }
  export type ClassStudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
  }

  export type $ClassStudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassStudent"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      studentProfile: Prisma.$StudentProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      classId: string
      studentProfileId: string
      enrollmentDate: Date
      status: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["classStudent"]>
    composites: {}
  }

  type ClassStudentGetPayload<S extends boolean | null | undefined | ClassStudentDefaultArgs> = $Result.GetResult<Prisma.$ClassStudentPayload, S>

  type ClassStudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClassStudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClassStudentCountAggregateInputType | true
    }

  export interface ClassStudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassStudent'], meta: { name: 'ClassStudent' } }
    /**
     * Find zero or one ClassStudent that matches the filter.
     * @param {ClassStudentFindUniqueArgs} args - Arguments to find a ClassStudent
     * @example
     * // Get one ClassStudent
     * const classStudent = await prisma.classStudent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassStudentFindUniqueArgs>(args: SelectSubset<T, ClassStudentFindUniqueArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClassStudent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClassStudentFindUniqueOrThrowArgs} args - Arguments to find a ClassStudent
     * @example
     * // Get one ClassStudent
     * const classStudent = await prisma.classStudent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassStudentFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassStudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClassStudent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentFindFirstArgs} args - Arguments to find a ClassStudent
     * @example
     * // Get one ClassStudent
     * const classStudent = await prisma.classStudent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassStudentFindFirstArgs>(args?: SelectSubset<T, ClassStudentFindFirstArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClassStudent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentFindFirstOrThrowArgs} args - Arguments to find a ClassStudent
     * @example
     * // Get one ClassStudent
     * const classStudent = await prisma.classStudent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassStudentFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassStudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClassStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassStudents
     * const classStudents = await prisma.classStudent.findMany()
     * 
     * // Get first 10 ClassStudents
     * const classStudents = await prisma.classStudent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classStudentWithIdOnly = await prisma.classStudent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassStudentFindManyArgs>(args?: SelectSubset<T, ClassStudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClassStudent.
     * @param {ClassStudentCreateArgs} args - Arguments to create a ClassStudent.
     * @example
     * // Create one ClassStudent
     * const ClassStudent = await prisma.classStudent.create({
     *   data: {
     *     // ... data to create a ClassStudent
     *   }
     * })
     * 
     */
    create<T extends ClassStudentCreateArgs>(args: SelectSubset<T, ClassStudentCreateArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClassStudents.
     * @param {ClassStudentCreateManyArgs} args - Arguments to create many ClassStudents.
     * @example
     * // Create many ClassStudents
     * const classStudent = await prisma.classStudent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassStudentCreateManyArgs>(args?: SelectSubset<T, ClassStudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassStudents and returns the data saved in the database.
     * @param {ClassStudentCreateManyAndReturnArgs} args - Arguments to create many ClassStudents.
     * @example
     * // Create many ClassStudents
     * const classStudent = await prisma.classStudent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassStudents and only return the `id`
     * const classStudentWithIdOnly = await prisma.classStudent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassStudentCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassStudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ClassStudent.
     * @param {ClassStudentDeleteArgs} args - Arguments to delete one ClassStudent.
     * @example
     * // Delete one ClassStudent
     * const ClassStudent = await prisma.classStudent.delete({
     *   where: {
     *     // ... filter to delete one ClassStudent
     *   }
     * })
     * 
     */
    delete<T extends ClassStudentDeleteArgs>(args: SelectSubset<T, ClassStudentDeleteArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClassStudent.
     * @param {ClassStudentUpdateArgs} args - Arguments to update one ClassStudent.
     * @example
     * // Update one ClassStudent
     * const classStudent = await prisma.classStudent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassStudentUpdateArgs>(args: SelectSubset<T, ClassStudentUpdateArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClassStudents.
     * @param {ClassStudentDeleteManyArgs} args - Arguments to filter ClassStudents to delete.
     * @example
     * // Delete a few ClassStudents
     * const { count } = await prisma.classStudent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassStudentDeleteManyArgs>(args?: SelectSubset<T, ClassStudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassStudents
     * const classStudent = await prisma.classStudent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassStudentUpdateManyArgs>(args: SelectSubset<T, ClassStudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClassStudent.
     * @param {ClassStudentUpsertArgs} args - Arguments to update or create a ClassStudent.
     * @example
     * // Update or create a ClassStudent
     * const classStudent = await prisma.classStudent.upsert({
     *   create: {
     *     // ... data to create a ClassStudent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassStudent we want to update
     *   }
     * })
     */
    upsert<T extends ClassStudentUpsertArgs>(args: SelectSubset<T, ClassStudentUpsertArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClassStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentCountArgs} args - Arguments to filter ClassStudents to count.
     * @example
     * // Count the number of ClassStudents
     * const count = await prisma.classStudent.count({
     *   where: {
     *     // ... the filter for the ClassStudents we want to count
     *   }
     * })
    **/
    count<T extends ClassStudentCountArgs>(
      args?: Subset<T, ClassStudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassStudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassStudentAggregateArgs>(args: Subset<T, ClassStudentAggregateArgs>): Prisma.PrismaPromise<GetClassStudentAggregateType<T>>

    /**
     * Group by ClassStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassStudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassStudentGroupByArgs['orderBy'] }
        : { orderBy?: ClassStudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassStudent model
   */
  readonly fields: ClassStudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassStudent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassStudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    studentProfile<T extends StudentProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfileDefaultArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassStudent model
   */ 
  interface ClassStudentFieldRefs {
    readonly id: FieldRef<"ClassStudent", 'String'>
    readonly classId: FieldRef<"ClassStudent", 'String'>
    readonly studentProfileId: FieldRef<"ClassStudent", 'String'>
    readonly enrollmentDate: FieldRef<"ClassStudent", 'DateTime'>
    readonly status: FieldRef<"ClassStudent", 'String'>
    readonly metadata: FieldRef<"ClassStudent", 'Json'>
    readonly createdAt: FieldRef<"ClassStudent", 'DateTime'>
    readonly updatedAt: FieldRef<"ClassStudent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClassStudent findUnique
   */
  export type ClassStudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudent to fetch.
     */
    where: ClassStudentWhereUniqueInput
  }

  /**
   * ClassStudent findUniqueOrThrow
   */
  export type ClassStudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudent to fetch.
     */
    where: ClassStudentWhereUniqueInput
  }

  /**
   * ClassStudent findFirst
   */
  export type ClassStudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudent to fetch.
     */
    where?: ClassStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassStudents to fetch.
     */
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassStudents.
     */
    cursor?: ClassStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassStudents.
     */
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * ClassStudent findFirstOrThrow
   */
  export type ClassStudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudent to fetch.
     */
    where?: ClassStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassStudents to fetch.
     */
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassStudents.
     */
    cursor?: ClassStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassStudents.
     */
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * ClassStudent findMany
   */
  export type ClassStudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudents to fetch.
     */
    where?: ClassStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassStudents to fetch.
     */
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassStudents.
     */
    cursor?: ClassStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassStudents.
     */
    skip?: number
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * ClassStudent create
   */
  export type ClassStudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassStudent.
     */
    data: XOR<ClassStudentCreateInput, ClassStudentUncheckedCreateInput>
  }

  /**
   * ClassStudent createMany
   */
  export type ClassStudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassStudents.
     */
    data: ClassStudentCreateManyInput | ClassStudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassStudent createManyAndReturn
   */
  export type ClassStudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ClassStudents.
     */
    data: ClassStudentCreateManyInput | ClassStudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassStudent update
   */
  export type ClassStudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassStudent.
     */
    data: XOR<ClassStudentUpdateInput, ClassStudentUncheckedUpdateInput>
    /**
     * Choose, which ClassStudent to update.
     */
    where: ClassStudentWhereUniqueInput
  }

  /**
   * ClassStudent updateMany
   */
  export type ClassStudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassStudents.
     */
    data: XOR<ClassStudentUpdateManyMutationInput, ClassStudentUncheckedUpdateManyInput>
    /**
     * Filter which ClassStudents to update
     */
    where?: ClassStudentWhereInput
  }

  /**
   * ClassStudent upsert
   */
  export type ClassStudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassStudent to update in case it exists.
     */
    where: ClassStudentWhereUniqueInput
    /**
     * In case the ClassStudent found by the `where` argument doesn't exist, create a new ClassStudent with this data.
     */
    create: XOR<ClassStudentCreateInput, ClassStudentUncheckedCreateInput>
    /**
     * In case the ClassStudent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassStudentUpdateInput, ClassStudentUncheckedUpdateInput>
  }

  /**
   * ClassStudent delete
   */
  export type ClassStudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter which ClassStudent to delete.
     */
    where: ClassStudentWhereUniqueInput
  }

  /**
   * ClassStudent deleteMany
   */
  export type ClassStudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassStudents to delete
     */
    where?: ClassStudentWhereInput
  }

  /**
   * ClassStudent without action
   */
  export type ClassStudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
  }


  /**
   * Model ReportCard
   */

  export type AggregateReportCard = {
    _count: ReportCardCountAggregateOutputType | null
    _min: ReportCardMinAggregateOutputType | null
    _max: ReportCardMaxAggregateOutputType | null
  }

  export type ReportCardMinAggregateOutputType = {
    id: string | null
    studentProfileId: string | null
    schoolId: string | null
    term: string | null
    academicYear: string | null
    teacherComments: string | null
    principalComments: string | null
    status: $Enums.ReportCardStatus | null
    publishedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportCardMaxAggregateOutputType = {
    id: string | null
    studentProfileId: string | null
    schoolId: string | null
    term: string | null
    academicYear: string | null
    teacherComments: string | null
    principalComments: string | null
    status: $Enums.ReportCardStatus | null
    publishedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportCardCountAggregateOutputType = {
    id: number
    studentProfileId: number
    schoolId: number
    term: number
    academicYear: number
    teacherComments: number
    principalComments: number
    attendance: number
    status: number
    publishedAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReportCardMinAggregateInputType = {
    id?: true
    studentProfileId?: true
    schoolId?: true
    term?: true
    academicYear?: true
    teacherComments?: true
    principalComments?: true
    status?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportCardMaxAggregateInputType = {
    id?: true
    studentProfileId?: true
    schoolId?: true
    term?: true
    academicYear?: true
    teacherComments?: true
    principalComments?: true
    status?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportCardCountAggregateInputType = {
    id?: true
    studentProfileId?: true
    schoolId?: true
    term?: true
    academicYear?: true
    teacherComments?: true
    principalComments?: true
    attendance?: true
    status?: true
    publishedAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReportCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportCard to aggregate.
     */
    where?: ReportCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCards to fetch.
     */
    orderBy?: ReportCardOrderByWithRelationInput | ReportCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportCards
    **/
    _count?: true | ReportCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportCardMaxAggregateInputType
  }

  export type GetReportCardAggregateType<T extends ReportCardAggregateArgs> = {
        [P in keyof T & keyof AggregateReportCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportCard[P]>
      : GetScalarType<T[P], AggregateReportCard[P]>
  }




  export type ReportCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportCardWhereInput
    orderBy?: ReportCardOrderByWithAggregationInput | ReportCardOrderByWithAggregationInput[]
    by: ReportCardScalarFieldEnum[] | ReportCardScalarFieldEnum
    having?: ReportCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCardCountAggregateInputType | true
    _min?: ReportCardMinAggregateInputType
    _max?: ReportCardMaxAggregateInputType
  }

  export type ReportCardGroupByOutputType = {
    id: string
    studentProfileId: string
    schoolId: string
    term: string
    academicYear: string
    teacherComments: string | null
    principalComments: string | null
    attendance: JsonValue | null
    status: $Enums.ReportCardStatus
    publishedAt: Date | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ReportCardCountAggregateOutputType | null
    _min: ReportCardMinAggregateOutputType | null
    _max: ReportCardMaxAggregateOutputType | null
  }

  type GetReportCardGroupByPayload<T extends ReportCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportCardGroupByOutputType[P]>
            : GetScalarType<T[P], ReportCardGroupByOutputType[P]>
        }
      >
    >


  export type ReportCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentProfileId?: boolean
    schoolId?: boolean
    term?: boolean
    academicYear?: boolean
    teacherComments?: boolean
    principalComments?: boolean
    attendance?: boolean
    status?: boolean
    publishedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    grades?: boolean | ReportCard$gradesArgs<ExtArgs>
    _count?: boolean | ReportCardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportCard"]>

  export type ReportCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentProfileId?: boolean
    schoolId?: boolean
    term?: boolean
    academicYear?: boolean
    teacherComments?: boolean
    principalComments?: boolean
    attendance?: boolean
    status?: boolean
    publishedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportCard"]>

  export type ReportCardSelectScalar = {
    id?: boolean
    studentProfileId?: boolean
    schoolId?: boolean
    term?: boolean
    academicYear?: boolean
    teacherComments?: boolean
    principalComments?: boolean
    attendance?: boolean
    status?: boolean
    publishedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReportCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    grades?: boolean | ReportCard$gradesArgs<ExtArgs>
    _count?: boolean | ReportCardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $ReportCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportCard"
    objects: {
      studentProfile: Prisma.$StudentProfilePayload<ExtArgs>
      school: Prisma.$SchoolPayload<ExtArgs>
      grades: Prisma.$GradePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentProfileId: string
      schoolId: string
      term: string
      academicYear: string
      teacherComments: string | null
      principalComments: string | null
      attendance: Prisma.JsonValue | null
      status: $Enums.ReportCardStatus
      publishedAt: Date | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["reportCard"]>
    composites: {}
  }

  type ReportCardGetPayload<S extends boolean | null | undefined | ReportCardDefaultArgs> = $Result.GetResult<Prisma.$ReportCardPayload, S>

  type ReportCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCardCountAggregateInputType | true
    }

  export interface ReportCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportCard'], meta: { name: 'ReportCard' } }
    /**
     * Find zero or one ReportCard that matches the filter.
     * @param {ReportCardFindUniqueArgs} args - Arguments to find a ReportCard
     * @example
     * // Get one ReportCard
     * const reportCard = await prisma.reportCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportCardFindUniqueArgs>(args: SelectSubset<T, ReportCardFindUniqueArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReportCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportCardFindUniqueOrThrowArgs} args - Arguments to find a ReportCard
     * @example
     * // Get one ReportCard
     * const reportCard = await prisma.reportCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportCardFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReportCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCardFindFirstArgs} args - Arguments to find a ReportCard
     * @example
     * // Get one ReportCard
     * const reportCard = await prisma.reportCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportCardFindFirstArgs>(args?: SelectSubset<T, ReportCardFindFirstArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReportCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCardFindFirstOrThrowArgs} args - Arguments to find a ReportCard
     * @example
     * // Get one ReportCard
     * const reportCard = await prisma.reportCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportCardFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReportCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportCards
     * const reportCards = await prisma.reportCard.findMany()
     * 
     * // Get first 10 ReportCards
     * const reportCards = await prisma.reportCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportCardWithIdOnly = await prisma.reportCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportCardFindManyArgs>(args?: SelectSubset<T, ReportCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReportCard.
     * @param {ReportCardCreateArgs} args - Arguments to create a ReportCard.
     * @example
     * // Create one ReportCard
     * const ReportCard = await prisma.reportCard.create({
     *   data: {
     *     // ... data to create a ReportCard
     *   }
     * })
     * 
     */
    create<T extends ReportCardCreateArgs>(args: SelectSubset<T, ReportCardCreateArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReportCards.
     * @param {ReportCardCreateManyArgs} args - Arguments to create many ReportCards.
     * @example
     * // Create many ReportCards
     * const reportCard = await prisma.reportCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCardCreateManyArgs>(args?: SelectSubset<T, ReportCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportCards and returns the data saved in the database.
     * @param {ReportCardCreateManyAndReturnArgs} args - Arguments to create many ReportCards.
     * @example
     * // Create many ReportCards
     * const reportCard = await prisma.reportCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportCards and only return the `id`
     * const reportCardWithIdOnly = await prisma.reportCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCardCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ReportCard.
     * @param {ReportCardDeleteArgs} args - Arguments to delete one ReportCard.
     * @example
     * // Delete one ReportCard
     * const ReportCard = await prisma.reportCard.delete({
     *   where: {
     *     // ... filter to delete one ReportCard
     *   }
     * })
     * 
     */
    delete<T extends ReportCardDeleteArgs>(args: SelectSubset<T, ReportCardDeleteArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReportCard.
     * @param {ReportCardUpdateArgs} args - Arguments to update one ReportCard.
     * @example
     * // Update one ReportCard
     * const reportCard = await prisma.reportCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportCardUpdateArgs>(args: SelectSubset<T, ReportCardUpdateArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReportCards.
     * @param {ReportCardDeleteManyArgs} args - Arguments to filter ReportCards to delete.
     * @example
     * // Delete a few ReportCards
     * const { count } = await prisma.reportCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportCardDeleteManyArgs>(args?: SelectSubset<T, ReportCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportCards
     * const reportCard = await prisma.reportCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportCardUpdateManyArgs>(args: SelectSubset<T, ReportCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReportCard.
     * @param {ReportCardUpsertArgs} args - Arguments to update or create a ReportCard.
     * @example
     * // Update or create a ReportCard
     * const reportCard = await prisma.reportCard.upsert({
     *   create: {
     *     // ... data to create a ReportCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportCard we want to update
     *   }
     * })
     */
    upsert<T extends ReportCardUpsertArgs>(args: SelectSubset<T, ReportCardUpsertArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReportCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCardCountArgs} args - Arguments to filter ReportCards to count.
     * @example
     * // Count the number of ReportCards
     * const count = await prisma.reportCard.count({
     *   where: {
     *     // ... the filter for the ReportCards we want to count
     *   }
     * })
    **/
    count<T extends ReportCardCountArgs>(
      args?: Subset<T, ReportCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportCardAggregateArgs>(args: Subset<T, ReportCardAggregateArgs>): Prisma.PrismaPromise<GetReportCardAggregateType<T>>

    /**
     * Group by ReportCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportCardGroupByArgs['orderBy'] }
        : { orderBy?: ReportCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportCard model
   */
  readonly fields: ReportCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studentProfile<T extends StudentProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfileDefaultArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    grades<T extends ReportCard$gradesArgs<ExtArgs> = {}>(args?: Subset<T, ReportCard$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportCard model
   */ 
  interface ReportCardFieldRefs {
    readonly id: FieldRef<"ReportCard", 'String'>
    readonly studentProfileId: FieldRef<"ReportCard", 'String'>
    readonly schoolId: FieldRef<"ReportCard", 'String'>
    readonly term: FieldRef<"ReportCard", 'String'>
    readonly academicYear: FieldRef<"ReportCard", 'String'>
    readonly teacherComments: FieldRef<"ReportCard", 'String'>
    readonly principalComments: FieldRef<"ReportCard", 'String'>
    readonly attendance: FieldRef<"ReportCard", 'Json'>
    readonly status: FieldRef<"ReportCard", 'ReportCardStatus'>
    readonly publishedAt: FieldRef<"ReportCard", 'DateTime'>
    readonly metadata: FieldRef<"ReportCard", 'Json'>
    readonly createdAt: FieldRef<"ReportCard", 'DateTime'>
    readonly updatedAt: FieldRef<"ReportCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportCard findUnique
   */
  export type ReportCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * Filter, which ReportCard to fetch.
     */
    where: ReportCardWhereUniqueInput
  }

  /**
   * ReportCard findUniqueOrThrow
   */
  export type ReportCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * Filter, which ReportCard to fetch.
     */
    where: ReportCardWhereUniqueInput
  }

  /**
   * ReportCard findFirst
   */
  export type ReportCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * Filter, which ReportCard to fetch.
     */
    where?: ReportCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCards to fetch.
     */
    orderBy?: ReportCardOrderByWithRelationInput | ReportCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportCards.
     */
    cursor?: ReportCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportCards.
     */
    distinct?: ReportCardScalarFieldEnum | ReportCardScalarFieldEnum[]
  }

  /**
   * ReportCard findFirstOrThrow
   */
  export type ReportCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * Filter, which ReportCard to fetch.
     */
    where?: ReportCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCards to fetch.
     */
    orderBy?: ReportCardOrderByWithRelationInput | ReportCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportCards.
     */
    cursor?: ReportCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportCards.
     */
    distinct?: ReportCardScalarFieldEnum | ReportCardScalarFieldEnum[]
  }

  /**
   * ReportCard findMany
   */
  export type ReportCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * Filter, which ReportCards to fetch.
     */
    where?: ReportCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCards to fetch.
     */
    orderBy?: ReportCardOrderByWithRelationInput | ReportCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportCards.
     */
    cursor?: ReportCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCards.
     */
    skip?: number
    distinct?: ReportCardScalarFieldEnum | ReportCardScalarFieldEnum[]
  }

  /**
   * ReportCard create
   */
  export type ReportCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportCard.
     */
    data: XOR<ReportCardCreateInput, ReportCardUncheckedCreateInput>
  }

  /**
   * ReportCard createMany
   */
  export type ReportCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportCards.
     */
    data: ReportCardCreateManyInput | ReportCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportCard createManyAndReturn
   */
  export type ReportCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReportCards.
     */
    data: ReportCardCreateManyInput | ReportCardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportCard update
   */
  export type ReportCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportCard.
     */
    data: XOR<ReportCardUpdateInput, ReportCardUncheckedUpdateInput>
    /**
     * Choose, which ReportCard to update.
     */
    where: ReportCardWhereUniqueInput
  }

  /**
   * ReportCard updateMany
   */
  export type ReportCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportCards.
     */
    data: XOR<ReportCardUpdateManyMutationInput, ReportCardUncheckedUpdateManyInput>
    /**
     * Filter which ReportCards to update
     */
    where?: ReportCardWhereInput
  }

  /**
   * ReportCard upsert
   */
  export type ReportCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportCard to update in case it exists.
     */
    where: ReportCardWhereUniqueInput
    /**
     * In case the ReportCard found by the `where` argument doesn't exist, create a new ReportCard with this data.
     */
    create: XOR<ReportCardCreateInput, ReportCardUncheckedCreateInput>
    /**
     * In case the ReportCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportCardUpdateInput, ReportCardUncheckedUpdateInput>
  }

  /**
   * ReportCard delete
   */
  export type ReportCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    /**
     * Filter which ReportCard to delete.
     */
    where: ReportCardWhereUniqueInput
  }

  /**
   * ReportCard deleteMany
   */
  export type ReportCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportCards to delete
     */
    where?: ReportCardWhereInput
  }

  /**
   * ReportCard.grades
   */
  export type ReportCard$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * ReportCard without action
   */
  export type ReportCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
  }


  /**
   * Model Grade
   */

  export type AggregateGrade = {
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  export type GradeAvgAggregateOutputType = {
    grade: number | null
    weightage: number | null
  }

  export type GradeSumAggregateOutputType = {
    grade: number | null
    weightage: number | null
  }

  export type GradeMinAggregateOutputType = {
    id: string | null
    studentProfileId: string | null
    reportCardId: string | null
    subjectId: string | null
    teacherId: string | null
    grade: number | null
    comments: string | null
    assessmentType: string | null
    assessmentDate: Date | null
    status: $Enums.GradeStatus | null
    staffProfileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    term: string | null
    academicYear: string | null
    weightage: number | null
  }

  export type GradeMaxAggregateOutputType = {
    id: string | null
    studentProfileId: string | null
    reportCardId: string | null
    subjectId: string | null
    teacherId: string | null
    grade: number | null
    comments: string | null
    assessmentType: string | null
    assessmentDate: Date | null
    status: $Enums.GradeStatus | null
    staffProfileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    term: string | null
    academicYear: string | null
    weightage: number | null
  }

  export type GradeCountAggregateOutputType = {
    id: number
    studentProfileId: number
    reportCardId: number
    subjectId: number
    teacherId: number
    grade: number
    comments: number
    assessmentType: number
    assessmentDate: number
    status: number
    staffProfileId: number
    metadata: number
    createdAt: number
    updatedAt: number
    term: number
    academicYear: number
    weightage: number
    _all: number
  }


  export type GradeAvgAggregateInputType = {
    grade?: true
    weightage?: true
  }

  export type GradeSumAggregateInputType = {
    grade?: true
    weightage?: true
  }

  export type GradeMinAggregateInputType = {
    id?: true
    studentProfileId?: true
    reportCardId?: true
    subjectId?: true
    teacherId?: true
    grade?: true
    comments?: true
    assessmentType?: true
    assessmentDate?: true
    status?: true
    staffProfileId?: true
    createdAt?: true
    updatedAt?: true
    term?: true
    academicYear?: true
    weightage?: true
  }

  export type GradeMaxAggregateInputType = {
    id?: true
    studentProfileId?: true
    reportCardId?: true
    subjectId?: true
    teacherId?: true
    grade?: true
    comments?: true
    assessmentType?: true
    assessmentDate?: true
    status?: true
    staffProfileId?: true
    createdAt?: true
    updatedAt?: true
    term?: true
    academicYear?: true
    weightage?: true
  }

  export type GradeCountAggregateInputType = {
    id?: true
    studentProfileId?: true
    reportCardId?: true
    subjectId?: true
    teacherId?: true
    grade?: true
    comments?: true
    assessmentType?: true
    assessmentDate?: true
    status?: true
    staffProfileId?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    term?: true
    academicYear?: true
    weightage?: true
    _all?: true
  }

  export type GradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grade to aggregate.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grades
    **/
    _count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }




  export type GradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithAggregationInput | GradeOrderByWithAggregationInput[]
    by: GradeScalarFieldEnum[] | GradeScalarFieldEnum
    having?: GradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeCountAggregateInputType | true
    _avg?: GradeAvgAggregateInputType
    _sum?: GradeSumAggregateInputType
    _min?: GradeMinAggregateInputType
    _max?: GradeMaxAggregateInputType
  }

  export type GradeGroupByOutputType = {
    id: string
    studentProfileId: string
    reportCardId: string
    subjectId: string
    teacherId: string
    grade: number
    comments: string | null
    assessmentType: string
    assessmentDate: Date
    status: $Enums.GradeStatus
    staffProfileId: string
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    term: string
    academicYear: string
    weightage: number | null
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeGroupByOutputType[P]>
            : GetScalarType<T[P], GradeGroupByOutputType[P]>
        }
      >
    >


  export type GradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentProfileId?: boolean
    reportCardId?: boolean
    subjectId?: boolean
    teacherId?: boolean
    grade?: boolean
    comments?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    status?: boolean
    staffProfileId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    term?: boolean
    academicYear?: boolean
    weightage?: boolean
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    reportCard?: boolean | ReportCardDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentProfileId?: boolean
    reportCardId?: boolean
    subjectId?: boolean
    teacherId?: boolean
    grade?: boolean
    comments?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    status?: boolean
    staffProfileId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    term?: boolean
    academicYear?: boolean
    weightage?: boolean
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    reportCard?: boolean | ReportCardDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectScalar = {
    id?: boolean
    studentProfileId?: boolean
    reportCardId?: boolean
    subjectId?: boolean
    teacherId?: boolean
    grade?: boolean
    comments?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    status?: boolean
    staffProfileId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    term?: boolean
    academicYear?: boolean
    weightage?: boolean
  }

  export type GradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    reportCard?: boolean | ReportCardDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
  }
  export type GradeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    reportCard?: boolean | ReportCardDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
  }

  export type $GradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grade"
    objects: {
      studentProfile: Prisma.$StudentProfilePayload<ExtArgs>
      reportCard: Prisma.$ReportCardPayload<ExtArgs>
      staffProfile: Prisma.$StaffProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentProfileId: string
      reportCardId: string
      subjectId: string
      teacherId: string
      grade: number
      comments: string | null
      assessmentType: string
      assessmentDate: Date
      status: $Enums.GradeStatus
      staffProfileId: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      term: string
      academicYear: string
      weightage: number | null
    }, ExtArgs["result"]["grade"]>
    composites: {}
  }

  type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = $Result.GetResult<Prisma.$GradePayload, S>

  type GradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GradeCountAggregateInputType | true
    }

  export interface GradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
    /**
     * Find zero or one Grade that matches the filter.
     * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GradeFindUniqueArgs>(args: SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Grade that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs>(args: SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GradeFindFirstArgs>(args?: SelectSubset<T, GradeFindFirstArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Grade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GradeFindFirstOrThrowArgs>(args?: SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GradeFindManyArgs>(args?: SelectSubset<T, GradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Grade.
     * @param {GradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
     */
    create<T extends GradeCreateArgs>(args: SelectSubset<T, GradeCreateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Grades.
     * @param {GradeCreateManyArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GradeCreateManyArgs>(args?: SelectSubset<T, GradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Grades and returns the data saved in the database.
     * @param {GradeCreateManyAndReturnArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Grades and only return the `id`
     * const gradeWithIdOnly = await prisma.grade.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GradeCreateManyAndReturnArgs>(args?: SelectSubset<T, GradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Grade.
     * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
     */
    delete<T extends GradeDeleteArgs>(args: SelectSubset<T, GradeDeleteArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Grade.
     * @param {GradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GradeUpdateArgs>(args: SelectSubset<T, GradeUpdateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Grades.
     * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GradeDeleteManyArgs>(args?: SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GradeUpdateManyArgs>(args: SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grade.
     * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
     */
    upsert<T extends GradeUpsertArgs>(args: SelectSubset<T, GradeUpsertArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends GradeCountArgs>(
      args?: Subset<T, GradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

    /**
     * Group by Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeGroupByArgs['orderBy'] }
        : { orderBy?: GradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grade model
   */
  readonly fields: GradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studentProfile<T extends StudentProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfileDefaultArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reportCard<T extends ReportCardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportCardDefaultArgs<ExtArgs>>): Prisma__ReportCardClient<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    staffProfile<T extends StaffProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffProfileDefaultArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grade model
   */ 
  interface GradeFieldRefs {
    readonly id: FieldRef<"Grade", 'String'>
    readonly studentProfileId: FieldRef<"Grade", 'String'>
    readonly reportCardId: FieldRef<"Grade", 'String'>
    readonly subjectId: FieldRef<"Grade", 'String'>
    readonly teacherId: FieldRef<"Grade", 'String'>
    readonly grade: FieldRef<"Grade", 'Float'>
    readonly comments: FieldRef<"Grade", 'String'>
    readonly assessmentType: FieldRef<"Grade", 'String'>
    readonly assessmentDate: FieldRef<"Grade", 'DateTime'>
    readonly status: FieldRef<"Grade", 'GradeStatus'>
    readonly staffProfileId: FieldRef<"Grade", 'String'>
    readonly metadata: FieldRef<"Grade", 'Json'>
    readonly createdAt: FieldRef<"Grade", 'DateTime'>
    readonly updatedAt: FieldRef<"Grade", 'DateTime'>
    readonly term: FieldRef<"Grade", 'String'>
    readonly academicYear: FieldRef<"Grade", 'String'>
    readonly weightage: FieldRef<"Grade", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Grade findUnique
   */
  export type GradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findUniqueOrThrow
   */
  export type GradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findFirst
   */
  export type GradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findFirstOrThrow
   */
  export type GradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findMany
   */
  export type GradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grades to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade create
   */
  export type GradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grade.
     */
    data: XOR<GradeCreateInput, GradeUncheckedCreateInput>
  }

  /**
   * Grade createMany
   */
  export type GradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grade createManyAndReturn
   */
  export type GradeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Grade update
   */
  export type GradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grade.
     */
    data: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
    /**
     * Choose, which Grade to update.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade updateMany
   */
  export type GradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
  }

  /**
   * Grade upsert
   */
  export type GradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grade to update in case it exists.
     */
    where: GradeWhereUniqueInput
    /**
     * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
     */
    create: XOR<GradeCreateInput, GradeUncheckedCreateInput>
    /**
     * In case the Grade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
  }

  /**
   * Grade delete
   */
  export type GradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter which Grade to delete.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade deleteMany
   */
  export type GradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grades to delete
     */
    where?: GradeWhereInput
  }

  /**
   * Grade without action
   */
  export type GradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
  }


  /**
   * Model StudentProfile
   */

  export type AggregateStudentProfile = {
    _count: StudentProfileCountAggregateOutputType | null
    _avg: StudentProfileAvgAggregateOutputType | null
    _sum: StudentProfileSumAggregateOutputType | null
    _min: StudentProfileMinAggregateOutputType | null
    _max: StudentProfileMaxAggregateOutputType | null
  }

  export type StudentProfileAvgAggregateOutputType = {
    currentGPA: number | null
    attendanceRate: number | null
  }

  export type StudentProfileSumAggregateOutputType = {
    currentGPA: number | null
    attendanceRate: number | null
  }

  export type StudentProfileMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    admissionNumber: string | null
    enrollmentDate: Date | null
    currentGrade: string | null
    createdAt: Date | null
    updatedAt: Date | null
    currentGPA: number | null
    academicStanding: string | null
    attendanceRate: number | null
    lastAttendanceDate: Date | null
  }

  export type StudentProfileMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    admissionNumber: string | null
    enrollmentDate: Date | null
    currentGrade: string | null
    createdAt: Date | null
    updatedAt: Date | null
    currentGPA: number | null
    academicStanding: string | null
    attendanceRate: number | null
    lastAttendanceDate: Date | null
  }

  export type StudentProfileCountAggregateOutputType = {
    id: number
    profileId: number
    admissionNumber: number
    enrollmentDate: number
    currentGrade: number
    previousSchools: number
    learningProgress: number
    achievements: number
    extracurricular: number
    specialNeeds: number
    medicalInfo: number
    dietaryRestrictions: number
    metadata: number
    createdAt: number
    updatedAt: number
    currentGPA: number
    academicStanding: number
    attendanceRate: number
    lastAttendanceDate: number
    _all: number
  }


  export type StudentProfileAvgAggregateInputType = {
    currentGPA?: true
    attendanceRate?: true
  }

  export type StudentProfileSumAggregateInputType = {
    currentGPA?: true
    attendanceRate?: true
  }

  export type StudentProfileMinAggregateInputType = {
    id?: true
    profileId?: true
    admissionNumber?: true
    enrollmentDate?: true
    currentGrade?: true
    createdAt?: true
    updatedAt?: true
    currentGPA?: true
    academicStanding?: true
    attendanceRate?: true
    lastAttendanceDate?: true
  }

  export type StudentProfileMaxAggregateInputType = {
    id?: true
    profileId?: true
    admissionNumber?: true
    enrollmentDate?: true
    currentGrade?: true
    createdAt?: true
    updatedAt?: true
    currentGPA?: true
    academicStanding?: true
    attendanceRate?: true
    lastAttendanceDate?: true
  }

  export type StudentProfileCountAggregateInputType = {
    id?: true
    profileId?: true
    admissionNumber?: true
    enrollmentDate?: true
    currentGrade?: true
    previousSchools?: true
    learningProgress?: true
    achievements?: true
    extracurricular?: true
    specialNeeds?: true
    medicalInfo?: true
    dietaryRestrictions?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    currentGPA?: true
    academicStanding?: true
    attendanceRate?: true
    lastAttendanceDate?: true
    _all?: true
  }

  export type StudentProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentProfile to aggregate.
     */
    where?: StudentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProfiles to fetch.
     */
    orderBy?: StudentProfileOrderByWithRelationInput | StudentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentProfiles
    **/
    _count?: true | StudentProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentProfileMaxAggregateInputType
  }

  export type GetStudentProfileAggregateType<T extends StudentProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentProfile[P]>
      : GetScalarType<T[P], AggregateStudentProfile[P]>
  }




  export type StudentProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentProfileWhereInput
    orderBy?: StudentProfileOrderByWithAggregationInput | StudentProfileOrderByWithAggregationInput[]
    by: StudentProfileScalarFieldEnum[] | StudentProfileScalarFieldEnum
    having?: StudentProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentProfileCountAggregateInputType | true
    _avg?: StudentProfileAvgAggregateInputType
    _sum?: StudentProfileSumAggregateInputType
    _min?: StudentProfileMinAggregateInputType
    _max?: StudentProfileMaxAggregateInputType
  }

  export type StudentProfileGroupByOutputType = {
    id: string
    profileId: string
    admissionNumber: string
    enrollmentDate: Date
    currentGrade: string | null
    previousSchools: JsonValue[]
    learningProgress: JsonValue[]
    achievements: JsonValue[]
    extracurricular: JsonValue[]
    specialNeeds: JsonValue | null
    medicalInfo: JsonValue | null
    dietaryRestrictions: string[]
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    currentGPA: number | null
    academicStanding: string | null
    attendanceRate: number | null
    lastAttendanceDate: Date | null
    _count: StudentProfileCountAggregateOutputType | null
    _avg: StudentProfileAvgAggregateOutputType | null
    _sum: StudentProfileSumAggregateOutputType | null
    _min: StudentProfileMinAggregateOutputType | null
    _max: StudentProfileMaxAggregateOutputType | null
  }

  type GetStudentProfileGroupByPayload<T extends StudentProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentProfileGroupByOutputType[P]>
            : GetScalarType<T[P], StudentProfileGroupByOutputType[P]>
        }
      >
    >


  export type StudentProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    admissionNumber?: boolean
    enrollmentDate?: boolean
    currentGrade?: boolean
    previousSchools?: boolean
    learningProgress?: boolean
    achievements?: boolean
    extracurricular?: boolean
    specialNeeds?: boolean
    medicalInfo?: boolean
    dietaryRestrictions?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentGPA?: boolean
    academicStanding?: boolean
    attendanceRate?: boolean
    lastAttendanceDate?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    guardians?: boolean | StudentProfile$guardiansArgs<ExtArgs>
    classes?: boolean | StudentProfile$classesArgs<ExtArgs>
    attendanceRecords?: boolean | StudentProfile$attendanceRecordsArgs<ExtArgs>
    reportCards?: boolean | StudentProfile$reportCardsArgs<ExtArgs>
    grades?: boolean | StudentProfile$gradesArgs<ExtArgs>
    _count?: boolean | StudentProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentProfile"]>

  export type StudentProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    admissionNumber?: boolean
    enrollmentDate?: boolean
    currentGrade?: boolean
    previousSchools?: boolean
    learningProgress?: boolean
    achievements?: boolean
    extracurricular?: boolean
    specialNeeds?: boolean
    medicalInfo?: boolean
    dietaryRestrictions?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentGPA?: boolean
    academicStanding?: boolean
    attendanceRate?: boolean
    lastAttendanceDate?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentProfile"]>

  export type StudentProfileSelectScalar = {
    id?: boolean
    profileId?: boolean
    admissionNumber?: boolean
    enrollmentDate?: boolean
    currentGrade?: boolean
    previousSchools?: boolean
    learningProgress?: boolean
    achievements?: boolean
    extracurricular?: boolean
    specialNeeds?: boolean
    medicalInfo?: boolean
    dietaryRestrictions?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentGPA?: boolean
    academicStanding?: boolean
    attendanceRate?: boolean
    lastAttendanceDate?: boolean
  }

  export type StudentProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    guardians?: boolean | StudentProfile$guardiansArgs<ExtArgs>
    classes?: boolean | StudentProfile$classesArgs<ExtArgs>
    attendanceRecords?: boolean | StudentProfile$attendanceRecordsArgs<ExtArgs>
    reportCards?: boolean | StudentProfile$reportCardsArgs<ExtArgs>
    grades?: boolean | StudentProfile$gradesArgs<ExtArgs>
    _count?: boolean | StudentProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $StudentProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentProfile"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
      guardians: Prisma.$ParentStudentRelationPayload<ExtArgs>[]
      classes: Prisma.$ClassStudentPayload<ExtArgs>[]
      attendanceRecords: Prisma.$AttendancePayload<ExtArgs>[]
      reportCards: Prisma.$ReportCardPayload<ExtArgs>[]
      grades: Prisma.$GradePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      admissionNumber: string
      enrollmentDate: Date
      currentGrade: string | null
      previousSchools: Prisma.JsonValue[]
      learningProgress: Prisma.JsonValue[]
      achievements: Prisma.JsonValue[]
      extracurricular: Prisma.JsonValue[]
      specialNeeds: Prisma.JsonValue | null
      medicalInfo: Prisma.JsonValue | null
      dietaryRestrictions: string[]
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      currentGPA: number | null
      academicStanding: string | null
      attendanceRate: number | null
      lastAttendanceDate: Date | null
    }, ExtArgs["result"]["studentProfile"]>
    composites: {}
  }

  type StudentProfileGetPayload<S extends boolean | null | undefined | StudentProfileDefaultArgs> = $Result.GetResult<Prisma.$StudentProfilePayload, S>

  type StudentProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentProfileCountAggregateInputType | true
    }

  export interface StudentProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentProfile'], meta: { name: 'StudentProfile' } }
    /**
     * Find zero or one StudentProfile that matches the filter.
     * @param {StudentProfileFindUniqueArgs} args - Arguments to find a StudentProfile
     * @example
     * // Get one StudentProfile
     * const studentProfile = await prisma.studentProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentProfileFindUniqueArgs>(args: SelectSubset<T, StudentProfileFindUniqueArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StudentProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentProfileFindUniqueOrThrowArgs} args - Arguments to find a StudentProfile
     * @example
     * // Get one StudentProfile
     * const studentProfile = await prisma.studentProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StudentProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProfileFindFirstArgs} args - Arguments to find a StudentProfile
     * @example
     * // Get one StudentProfile
     * const studentProfile = await prisma.studentProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentProfileFindFirstArgs>(args?: SelectSubset<T, StudentProfileFindFirstArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StudentProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProfileFindFirstOrThrowArgs} args - Arguments to find a StudentProfile
     * @example
     * // Get one StudentProfile
     * const studentProfile = await prisma.studentProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StudentProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentProfiles
     * const studentProfiles = await prisma.studentProfile.findMany()
     * 
     * // Get first 10 StudentProfiles
     * const studentProfiles = await prisma.studentProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentProfileWithIdOnly = await prisma.studentProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentProfileFindManyArgs>(args?: SelectSubset<T, StudentProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StudentProfile.
     * @param {StudentProfileCreateArgs} args - Arguments to create a StudentProfile.
     * @example
     * // Create one StudentProfile
     * const StudentProfile = await prisma.studentProfile.create({
     *   data: {
     *     // ... data to create a StudentProfile
     *   }
     * })
     * 
     */
    create<T extends StudentProfileCreateArgs>(args: SelectSubset<T, StudentProfileCreateArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StudentProfiles.
     * @param {StudentProfileCreateManyArgs} args - Arguments to create many StudentProfiles.
     * @example
     * // Create many StudentProfiles
     * const studentProfile = await prisma.studentProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentProfileCreateManyArgs>(args?: SelectSubset<T, StudentProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentProfiles and returns the data saved in the database.
     * @param {StudentProfileCreateManyAndReturnArgs} args - Arguments to create many StudentProfiles.
     * @example
     * // Create many StudentProfiles
     * const studentProfile = await prisma.studentProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentProfiles and only return the `id`
     * const studentProfileWithIdOnly = await prisma.studentProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StudentProfile.
     * @param {StudentProfileDeleteArgs} args - Arguments to delete one StudentProfile.
     * @example
     * // Delete one StudentProfile
     * const StudentProfile = await prisma.studentProfile.delete({
     *   where: {
     *     // ... filter to delete one StudentProfile
     *   }
     * })
     * 
     */
    delete<T extends StudentProfileDeleteArgs>(args: SelectSubset<T, StudentProfileDeleteArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StudentProfile.
     * @param {StudentProfileUpdateArgs} args - Arguments to update one StudentProfile.
     * @example
     * // Update one StudentProfile
     * const studentProfile = await prisma.studentProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentProfileUpdateArgs>(args: SelectSubset<T, StudentProfileUpdateArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StudentProfiles.
     * @param {StudentProfileDeleteManyArgs} args - Arguments to filter StudentProfiles to delete.
     * @example
     * // Delete a few StudentProfiles
     * const { count } = await prisma.studentProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentProfileDeleteManyArgs>(args?: SelectSubset<T, StudentProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentProfiles
     * const studentProfile = await prisma.studentProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentProfileUpdateManyArgs>(args: SelectSubset<T, StudentProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentProfile.
     * @param {StudentProfileUpsertArgs} args - Arguments to update or create a StudentProfile.
     * @example
     * // Update or create a StudentProfile
     * const studentProfile = await prisma.studentProfile.upsert({
     *   create: {
     *     // ... data to create a StudentProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentProfile we want to update
     *   }
     * })
     */
    upsert<T extends StudentProfileUpsertArgs>(args: SelectSubset<T, StudentProfileUpsertArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StudentProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProfileCountArgs} args - Arguments to filter StudentProfiles to count.
     * @example
     * // Count the number of StudentProfiles
     * const count = await prisma.studentProfile.count({
     *   where: {
     *     // ... the filter for the StudentProfiles we want to count
     *   }
     * })
    **/
    count<T extends StudentProfileCountArgs>(
      args?: Subset<T, StudentProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentProfileAggregateArgs>(args: Subset<T, StudentProfileAggregateArgs>): Prisma.PrismaPromise<GetStudentProfileAggregateType<T>>

    /**
     * Group by StudentProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentProfileGroupByArgs['orderBy'] }
        : { orderBy?: StudentProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentProfile model
   */
  readonly fields: StudentProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    guardians<T extends StudentProfile$guardiansArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfile$guardiansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "findMany"> | Null>
    classes<T extends StudentProfile$classesArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfile$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findMany"> | Null>
    attendanceRecords<T extends StudentProfile$attendanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfile$attendanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany"> | Null>
    reportCards<T extends StudentProfile$reportCardsArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfile$reportCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findMany"> | Null>
    grades<T extends StudentProfile$gradesArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfile$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentProfile model
   */ 
  interface StudentProfileFieldRefs {
    readonly id: FieldRef<"StudentProfile", 'String'>
    readonly profileId: FieldRef<"StudentProfile", 'String'>
    readonly admissionNumber: FieldRef<"StudentProfile", 'String'>
    readonly enrollmentDate: FieldRef<"StudentProfile", 'DateTime'>
    readonly currentGrade: FieldRef<"StudentProfile", 'String'>
    readonly previousSchools: FieldRef<"StudentProfile", 'Json[]'>
    readonly learningProgress: FieldRef<"StudentProfile", 'Json[]'>
    readonly achievements: FieldRef<"StudentProfile", 'Json[]'>
    readonly extracurricular: FieldRef<"StudentProfile", 'Json[]'>
    readonly specialNeeds: FieldRef<"StudentProfile", 'Json'>
    readonly medicalInfo: FieldRef<"StudentProfile", 'Json'>
    readonly dietaryRestrictions: FieldRef<"StudentProfile", 'String[]'>
    readonly metadata: FieldRef<"StudentProfile", 'Json'>
    readonly createdAt: FieldRef<"StudentProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"StudentProfile", 'DateTime'>
    readonly currentGPA: FieldRef<"StudentProfile", 'Float'>
    readonly academicStanding: FieldRef<"StudentProfile", 'String'>
    readonly attendanceRate: FieldRef<"StudentProfile", 'Float'>
    readonly lastAttendanceDate: FieldRef<"StudentProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentProfile findUnique
   */
  export type StudentProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * Filter, which StudentProfile to fetch.
     */
    where: StudentProfileWhereUniqueInput
  }

  /**
   * StudentProfile findUniqueOrThrow
   */
  export type StudentProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * Filter, which StudentProfile to fetch.
     */
    where: StudentProfileWhereUniqueInput
  }

  /**
   * StudentProfile findFirst
   */
  export type StudentProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * Filter, which StudentProfile to fetch.
     */
    where?: StudentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProfiles to fetch.
     */
    orderBy?: StudentProfileOrderByWithRelationInput | StudentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentProfiles.
     */
    cursor?: StudentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentProfiles.
     */
    distinct?: StudentProfileScalarFieldEnum | StudentProfileScalarFieldEnum[]
  }

  /**
   * StudentProfile findFirstOrThrow
   */
  export type StudentProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * Filter, which StudentProfile to fetch.
     */
    where?: StudentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProfiles to fetch.
     */
    orderBy?: StudentProfileOrderByWithRelationInput | StudentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentProfiles.
     */
    cursor?: StudentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentProfiles.
     */
    distinct?: StudentProfileScalarFieldEnum | StudentProfileScalarFieldEnum[]
  }

  /**
   * StudentProfile findMany
   */
  export type StudentProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * Filter, which StudentProfiles to fetch.
     */
    where?: StudentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProfiles to fetch.
     */
    orderBy?: StudentProfileOrderByWithRelationInput | StudentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentProfiles.
     */
    cursor?: StudentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProfiles.
     */
    skip?: number
    distinct?: StudentProfileScalarFieldEnum | StudentProfileScalarFieldEnum[]
  }

  /**
   * StudentProfile create
   */
  export type StudentProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentProfile.
     */
    data: XOR<StudentProfileCreateInput, StudentProfileUncheckedCreateInput>
  }

  /**
   * StudentProfile createMany
   */
  export type StudentProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentProfiles.
     */
    data: StudentProfileCreateManyInput | StudentProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentProfile createManyAndReturn
   */
  export type StudentProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudentProfiles.
     */
    data: StudentProfileCreateManyInput | StudentProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentProfile update
   */
  export type StudentProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentProfile.
     */
    data: XOR<StudentProfileUpdateInput, StudentProfileUncheckedUpdateInput>
    /**
     * Choose, which StudentProfile to update.
     */
    where: StudentProfileWhereUniqueInput
  }

  /**
   * StudentProfile updateMany
   */
  export type StudentProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentProfiles.
     */
    data: XOR<StudentProfileUpdateManyMutationInput, StudentProfileUncheckedUpdateManyInput>
    /**
     * Filter which StudentProfiles to update
     */
    where?: StudentProfileWhereInput
  }

  /**
   * StudentProfile upsert
   */
  export type StudentProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentProfile to update in case it exists.
     */
    where: StudentProfileWhereUniqueInput
    /**
     * In case the StudentProfile found by the `where` argument doesn't exist, create a new StudentProfile with this data.
     */
    create: XOR<StudentProfileCreateInput, StudentProfileUncheckedCreateInput>
    /**
     * In case the StudentProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentProfileUpdateInput, StudentProfileUncheckedUpdateInput>
  }

  /**
   * StudentProfile delete
   */
  export type StudentProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
    /**
     * Filter which StudentProfile to delete.
     */
    where: StudentProfileWhereUniqueInput
  }

  /**
   * StudentProfile deleteMany
   */
  export type StudentProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentProfiles to delete
     */
    where?: StudentProfileWhereInput
  }

  /**
   * StudentProfile.guardians
   */
  export type StudentProfile$guardiansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    where?: ParentStudentRelationWhereInput
    orderBy?: ParentStudentRelationOrderByWithRelationInput | ParentStudentRelationOrderByWithRelationInput[]
    cursor?: ParentStudentRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParentStudentRelationScalarFieldEnum | ParentStudentRelationScalarFieldEnum[]
  }

  /**
   * StudentProfile.classes
   */
  export type StudentProfile$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    where?: ClassStudentWhereInput
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    cursor?: ClassStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * StudentProfile.attendanceRecords
   */
  export type StudentProfile$attendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * StudentProfile.reportCards
   */
  export type StudentProfile$reportCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCard
     */
    select?: ReportCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCardInclude<ExtArgs> | null
    where?: ReportCardWhereInput
    orderBy?: ReportCardOrderByWithRelationInput | ReportCardOrderByWithRelationInput[]
    cursor?: ReportCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportCardScalarFieldEnum | ReportCardScalarFieldEnum[]
  }

  /**
   * StudentProfile.grades
   */
  export type StudentProfile$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * StudentProfile without action
   */
  export type StudentProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProfile
     */
    select?: StudentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProfileInclude<ExtArgs> | null
  }


  /**
   * Model ParentProfile
   */

  export type AggregateParentProfile = {
    _count: ParentProfileCountAggregateOutputType | null
    _min: ParentProfileMinAggregateOutputType | null
    _max: ParentProfileMaxAggregateOutputType | null
  }

  export type ParentProfileMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    relationship: string | null
    preferredLanguage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParentProfileMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    relationship: string | null
    preferredLanguage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParentProfileCountAggregateOutputType = {
    id: number
    profileId: number
    relationship: number
    preferredLanguage: number
    communicationPreferences: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParentProfileMinAggregateInputType = {
    id?: true
    profileId?: true
    relationship?: true
    preferredLanguage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParentProfileMaxAggregateInputType = {
    id?: true
    profileId?: true
    relationship?: true
    preferredLanguage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParentProfileCountAggregateInputType = {
    id?: true
    profileId?: true
    relationship?: true
    preferredLanguage?: true
    communicationPreferences?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParentProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParentProfile to aggregate.
     */
    where?: ParentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentProfiles to fetch.
     */
    orderBy?: ParentProfileOrderByWithRelationInput | ParentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParentProfiles
    **/
    _count?: true | ParentProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParentProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParentProfileMaxAggregateInputType
  }

  export type GetParentProfileAggregateType<T extends ParentProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateParentProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParentProfile[P]>
      : GetScalarType<T[P], AggregateParentProfile[P]>
  }




  export type ParentProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentProfileWhereInput
    orderBy?: ParentProfileOrderByWithAggregationInput | ParentProfileOrderByWithAggregationInput[]
    by: ParentProfileScalarFieldEnum[] | ParentProfileScalarFieldEnum
    having?: ParentProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParentProfileCountAggregateInputType | true
    _min?: ParentProfileMinAggregateInputType
    _max?: ParentProfileMaxAggregateInputType
  }

  export type ParentProfileGroupByOutputType = {
    id: string
    profileId: string
    relationship: string
    preferredLanguage: string | null
    communicationPreferences: JsonValue | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ParentProfileCountAggregateOutputType | null
    _min: ParentProfileMinAggregateOutputType | null
    _max: ParentProfileMaxAggregateOutputType | null
  }

  type GetParentProfileGroupByPayload<T extends ParentProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParentProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParentProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParentProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ParentProfileGroupByOutputType[P]>
        }
      >
    >


  export type ParentProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    relationship?: boolean
    preferredLanguage?: boolean
    communicationPreferences?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    children?: boolean | ParentProfile$childrenArgs<ExtArgs>
    _count?: boolean | ParentProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parentProfile"]>

  export type ParentProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    relationship?: boolean
    preferredLanguage?: boolean
    communicationPreferences?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parentProfile"]>

  export type ParentProfileSelectScalar = {
    id?: boolean
    profileId?: boolean
    relationship?: boolean
    preferredLanguage?: boolean
    communicationPreferences?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParentProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    children?: boolean | ParentProfile$childrenArgs<ExtArgs>
    _count?: boolean | ParentProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ParentProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $ParentProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParentProfile"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
      children: Prisma.$ParentStudentRelationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      relationship: string
      preferredLanguage: string | null
      communicationPreferences: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["parentProfile"]>
    composites: {}
  }

  type ParentProfileGetPayload<S extends boolean | null | undefined | ParentProfileDefaultArgs> = $Result.GetResult<Prisma.$ParentProfilePayload, S>

  type ParentProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParentProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParentProfileCountAggregateInputType | true
    }

  export interface ParentProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParentProfile'], meta: { name: 'ParentProfile' } }
    /**
     * Find zero or one ParentProfile that matches the filter.
     * @param {ParentProfileFindUniqueArgs} args - Arguments to find a ParentProfile
     * @example
     * // Get one ParentProfile
     * const parentProfile = await prisma.parentProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParentProfileFindUniqueArgs>(args: SelectSubset<T, ParentProfileFindUniqueArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ParentProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParentProfileFindUniqueOrThrowArgs} args - Arguments to find a ParentProfile
     * @example
     * // Get one ParentProfile
     * const parentProfile = await prisma.parentProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParentProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ParentProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ParentProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentProfileFindFirstArgs} args - Arguments to find a ParentProfile
     * @example
     * // Get one ParentProfile
     * const parentProfile = await prisma.parentProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParentProfileFindFirstArgs>(args?: SelectSubset<T, ParentProfileFindFirstArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ParentProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentProfileFindFirstOrThrowArgs} args - Arguments to find a ParentProfile
     * @example
     * // Get one ParentProfile
     * const parentProfile = await prisma.parentProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParentProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ParentProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ParentProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParentProfiles
     * const parentProfiles = await prisma.parentProfile.findMany()
     * 
     * // Get first 10 ParentProfiles
     * const parentProfiles = await prisma.parentProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parentProfileWithIdOnly = await prisma.parentProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParentProfileFindManyArgs>(args?: SelectSubset<T, ParentProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ParentProfile.
     * @param {ParentProfileCreateArgs} args - Arguments to create a ParentProfile.
     * @example
     * // Create one ParentProfile
     * const ParentProfile = await prisma.parentProfile.create({
     *   data: {
     *     // ... data to create a ParentProfile
     *   }
     * })
     * 
     */
    create<T extends ParentProfileCreateArgs>(args: SelectSubset<T, ParentProfileCreateArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ParentProfiles.
     * @param {ParentProfileCreateManyArgs} args - Arguments to create many ParentProfiles.
     * @example
     * // Create many ParentProfiles
     * const parentProfile = await prisma.parentProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParentProfileCreateManyArgs>(args?: SelectSubset<T, ParentProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParentProfiles and returns the data saved in the database.
     * @param {ParentProfileCreateManyAndReturnArgs} args - Arguments to create many ParentProfiles.
     * @example
     * // Create many ParentProfiles
     * const parentProfile = await prisma.parentProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParentProfiles and only return the `id`
     * const parentProfileWithIdOnly = await prisma.parentProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParentProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ParentProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ParentProfile.
     * @param {ParentProfileDeleteArgs} args - Arguments to delete one ParentProfile.
     * @example
     * // Delete one ParentProfile
     * const ParentProfile = await prisma.parentProfile.delete({
     *   where: {
     *     // ... filter to delete one ParentProfile
     *   }
     * })
     * 
     */
    delete<T extends ParentProfileDeleteArgs>(args: SelectSubset<T, ParentProfileDeleteArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ParentProfile.
     * @param {ParentProfileUpdateArgs} args - Arguments to update one ParentProfile.
     * @example
     * // Update one ParentProfile
     * const parentProfile = await prisma.parentProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParentProfileUpdateArgs>(args: SelectSubset<T, ParentProfileUpdateArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ParentProfiles.
     * @param {ParentProfileDeleteManyArgs} args - Arguments to filter ParentProfiles to delete.
     * @example
     * // Delete a few ParentProfiles
     * const { count } = await prisma.parentProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParentProfileDeleteManyArgs>(args?: SelectSubset<T, ParentProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParentProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParentProfiles
     * const parentProfile = await prisma.parentProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParentProfileUpdateManyArgs>(args: SelectSubset<T, ParentProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParentProfile.
     * @param {ParentProfileUpsertArgs} args - Arguments to update or create a ParentProfile.
     * @example
     * // Update or create a ParentProfile
     * const parentProfile = await prisma.parentProfile.upsert({
     *   create: {
     *     // ... data to create a ParentProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParentProfile we want to update
     *   }
     * })
     */
    upsert<T extends ParentProfileUpsertArgs>(args: SelectSubset<T, ParentProfileUpsertArgs<ExtArgs>>): Prisma__ParentProfileClient<$Result.GetResult<Prisma.$ParentProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ParentProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentProfileCountArgs} args - Arguments to filter ParentProfiles to count.
     * @example
     * // Count the number of ParentProfiles
     * const count = await prisma.parentProfile.count({
     *   where: {
     *     // ... the filter for the ParentProfiles we want to count
     *   }
     * })
    **/
    count<T extends ParentProfileCountArgs>(
      args?: Subset<T, ParentProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParentProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParentProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParentProfileAggregateArgs>(args: Subset<T, ParentProfileAggregateArgs>): Prisma.PrismaPromise<GetParentProfileAggregateType<T>>

    /**
     * Group by ParentProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParentProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParentProfileGroupByArgs['orderBy'] }
        : { orderBy?: ParentProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParentProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParentProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParentProfile model
   */
  readonly fields: ParentProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParentProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParentProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    children<T extends ParentProfile$childrenArgs<ExtArgs> = {}>(args?: Subset<T, ParentProfile$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentRelationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParentProfile model
   */ 
  interface ParentProfileFieldRefs {
    readonly id: FieldRef<"ParentProfile", 'String'>
    readonly profileId: FieldRef<"ParentProfile", 'String'>
    readonly relationship: FieldRef<"ParentProfile", 'String'>
    readonly preferredLanguage: FieldRef<"ParentProfile", 'String'>
    readonly communicationPreferences: FieldRef<"ParentProfile", 'Json'>
    readonly metadata: FieldRef<"ParentProfile", 'Json'>
    readonly createdAt: FieldRef<"ParentProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"ParentProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ParentProfile findUnique
   */
  export type ParentProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * Filter, which ParentProfile to fetch.
     */
    where: ParentProfileWhereUniqueInput
  }

  /**
   * ParentProfile findUniqueOrThrow
   */
  export type ParentProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * Filter, which ParentProfile to fetch.
     */
    where: ParentProfileWhereUniqueInput
  }

  /**
   * ParentProfile findFirst
   */
  export type ParentProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * Filter, which ParentProfile to fetch.
     */
    where?: ParentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentProfiles to fetch.
     */
    orderBy?: ParentProfileOrderByWithRelationInput | ParentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParentProfiles.
     */
    cursor?: ParentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParentProfiles.
     */
    distinct?: ParentProfileScalarFieldEnum | ParentProfileScalarFieldEnum[]
  }

  /**
   * ParentProfile findFirstOrThrow
   */
  export type ParentProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * Filter, which ParentProfile to fetch.
     */
    where?: ParentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentProfiles to fetch.
     */
    orderBy?: ParentProfileOrderByWithRelationInput | ParentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParentProfiles.
     */
    cursor?: ParentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParentProfiles.
     */
    distinct?: ParentProfileScalarFieldEnum | ParentProfileScalarFieldEnum[]
  }

  /**
   * ParentProfile findMany
   */
  export type ParentProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * Filter, which ParentProfiles to fetch.
     */
    where?: ParentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentProfiles to fetch.
     */
    orderBy?: ParentProfileOrderByWithRelationInput | ParentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParentProfiles.
     */
    cursor?: ParentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentProfiles.
     */
    skip?: number
    distinct?: ParentProfileScalarFieldEnum | ParentProfileScalarFieldEnum[]
  }

  /**
   * ParentProfile create
   */
  export type ParentProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a ParentProfile.
     */
    data: XOR<ParentProfileCreateInput, ParentProfileUncheckedCreateInput>
  }

  /**
   * ParentProfile createMany
   */
  export type ParentProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParentProfiles.
     */
    data: ParentProfileCreateManyInput | ParentProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParentProfile createManyAndReturn
   */
  export type ParentProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ParentProfiles.
     */
    data: ParentProfileCreateManyInput | ParentProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParentProfile update
   */
  export type ParentProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a ParentProfile.
     */
    data: XOR<ParentProfileUpdateInput, ParentProfileUncheckedUpdateInput>
    /**
     * Choose, which ParentProfile to update.
     */
    where: ParentProfileWhereUniqueInput
  }

  /**
   * ParentProfile updateMany
   */
  export type ParentProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParentProfiles.
     */
    data: XOR<ParentProfileUpdateManyMutationInput, ParentProfileUncheckedUpdateManyInput>
    /**
     * Filter which ParentProfiles to update
     */
    where?: ParentProfileWhereInput
  }

  /**
   * ParentProfile upsert
   */
  export type ParentProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the ParentProfile to update in case it exists.
     */
    where: ParentProfileWhereUniqueInput
    /**
     * In case the ParentProfile found by the `where` argument doesn't exist, create a new ParentProfile with this data.
     */
    create: XOR<ParentProfileCreateInput, ParentProfileUncheckedCreateInput>
    /**
     * In case the ParentProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParentProfileUpdateInput, ParentProfileUncheckedUpdateInput>
  }

  /**
   * ParentProfile delete
   */
  export type ParentProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
    /**
     * Filter which ParentProfile to delete.
     */
    where: ParentProfileWhereUniqueInput
  }

  /**
   * ParentProfile deleteMany
   */
  export type ParentProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParentProfiles to delete
     */
    where?: ParentProfileWhereInput
  }

  /**
   * ParentProfile.children
   */
  export type ParentProfile$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudentRelation
     */
    select?: ParentStudentRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentRelationInclude<ExtArgs> | null
    where?: ParentStudentRelationWhereInput
    orderBy?: ParentStudentRelationOrderByWithRelationInput | ParentStudentRelationOrderByWithRelationInput[]
    cursor?: ParentStudentRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParentStudentRelationScalarFieldEnum | ParentStudentRelationScalarFieldEnum[]
  }

  /**
   * ParentProfile without action
   */
  export type ParentProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentProfile
     */
    select?: ParentProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentProfileInclude<ExtArgs> | null
  }


  /**
   * Model Attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: string | null
    studentProfileId: string | null
    date: Date | null
    status: string | null
    timeIn: Date | null
    timeOut: Date | null
    reason: string | null
    isExcused: boolean | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    term: string | null
    academicYear: string | null
    verifiedBy: string | null
    classMasterId: string | null
    classId: string | null
    recordedBy: string | null
    modifiedBy: string | null
    modifiedAt: Date | null
    verificationNotes: string | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: string | null
    studentProfileId: string | null
    date: Date | null
    status: string | null
    timeIn: Date | null
    timeOut: Date | null
    reason: string | null
    isExcused: boolean | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    term: string | null
    academicYear: string | null
    verifiedBy: string | null
    classMasterId: string | null
    classId: string | null
    recordedBy: string | null
    modifiedBy: string | null
    modifiedAt: Date | null
    verificationNotes: string | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    studentProfileId: number
    date: number
    status: number
    timeIn: number
    timeOut: number
    reason: number
    isExcused: number
    notes: number
    metadata: number
    createdAt: number
    updatedAt: number
    term: number
    academicYear: number
    verifiedBy: number
    classMasterId: number
    classId: number
    recordedBy: number
    modifiedBy: number
    modifiedAt: number
    verificationNotes: number
    _all: number
  }


  export type AttendanceMinAggregateInputType = {
    id?: true
    studentProfileId?: true
    date?: true
    status?: true
    timeIn?: true
    timeOut?: true
    reason?: true
    isExcused?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    term?: true
    academicYear?: true
    verifiedBy?: true
    classMasterId?: true
    classId?: true
    recordedBy?: true
    modifiedBy?: true
    modifiedAt?: true
    verificationNotes?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    studentProfileId?: true
    date?: true
    status?: true
    timeIn?: true
    timeOut?: true
    reason?: true
    isExcused?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    term?: true
    academicYear?: true
    verifiedBy?: true
    classMasterId?: true
    classId?: true
    recordedBy?: true
    modifiedBy?: true
    modifiedAt?: true
    verificationNotes?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    studentProfileId?: true
    date?: true
    status?: true
    timeIn?: true
    timeOut?: true
    reason?: true
    isExcused?: true
    notes?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    term?: true
    academicYear?: true
    verifiedBy?: true
    classMasterId?: true
    classId?: true
    recordedBy?: true
    modifiedBy?: true
    modifiedAt?: true
    verificationNotes?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance to aggregate.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type AttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithAggregationInput | AttendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: AttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: string
    studentProfileId: string
    date: Date
    status: string
    timeIn: Date | null
    timeOut: Date | null
    reason: string | null
    isExcused: boolean
    notes: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    term: string
    academicYear: string
    verifiedBy: string | null
    classMasterId: string
    classId: string
    recordedBy: string
    modifiedBy: string | null
    modifiedAt: Date | null
    verificationNotes: string | null
    _count: AttendanceCountAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends AttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentProfileId?: boolean
    date?: boolean
    status?: boolean
    timeIn?: boolean
    timeOut?: boolean
    reason?: boolean
    isExcused?: boolean
    notes?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    term?: boolean
    academicYear?: boolean
    verifiedBy?: boolean
    classMasterId?: boolean
    classId?: boolean
    recordedBy?: boolean
    modifiedBy?: boolean
    modifiedAt?: boolean
    verificationNotes?: boolean
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentProfileId?: boolean
    date?: boolean
    status?: boolean
    timeIn?: boolean
    timeOut?: boolean
    reason?: boolean
    isExcused?: boolean
    notes?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    term?: boolean
    academicYear?: boolean
    verifiedBy?: boolean
    classMasterId?: boolean
    classId?: boolean
    recordedBy?: boolean
    modifiedBy?: boolean
    modifiedAt?: boolean
    verificationNotes?: boolean
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectScalar = {
    id?: boolean
    studentProfileId?: boolean
    date?: boolean
    status?: boolean
    timeIn?: boolean
    timeOut?: boolean
    reason?: boolean
    isExcused?: boolean
    notes?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    term?: boolean
    academicYear?: boolean
    verifiedBy?: boolean
    classMasterId?: boolean
    classId?: boolean
    recordedBy?: boolean
    modifiedBy?: boolean
    modifiedAt?: boolean
    verificationNotes?: boolean
  }

  export type AttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentProfile?: boolean | StudentProfileDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $AttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendance"
    objects: {
      studentProfile: Prisma.$StudentProfilePayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentProfileId: string
      date: Date
      status: string
      timeIn: Date | null
      timeOut: Date | null
      reason: string | null
      isExcused: boolean
      notes: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      term: string
      academicYear: string
      verifiedBy: string | null
      classMasterId: string
      classId: string
      recordedBy: string
      modifiedBy: string | null
      modifiedAt: Date | null
      verificationNotes: string | null
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type AttendanceGetPayload<S extends boolean | null | undefined | AttendanceDefaultArgs> = $Result.GetResult<Prisma.$AttendancePayload, S>

  type AttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttendanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface AttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance'], meta: { name: 'Attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {AttendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceFindUniqueArgs>(args: SelectSubset<T, AttendanceFindUniqueArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceFindFirstArgs>(args?: SelectSubset<T, AttendanceFindFirstArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceFindManyArgs>(args?: SelectSubset<T, AttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Attendance.
     * @param {AttendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends AttendanceCreateArgs>(args: SelectSubset<T, AttendanceCreateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Attendances.
     * @param {AttendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceCreateManyArgs>(args?: SelectSubset<T, AttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attendances and returns the data saved in the database.
     * @param {AttendanceCreateManyAndReturnArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Attendance.
     * @param {AttendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends AttendanceDeleteArgs>(args: SelectSubset<T, AttendanceDeleteArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Attendance.
     * @param {AttendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceUpdateArgs>(args: SelectSubset<T, AttendanceUpdateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Attendances.
     * @param {AttendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceDeleteManyArgs>(args?: SelectSubset<T, AttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceUpdateManyArgs>(args: SelectSubset<T, AttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendance.
     * @param {AttendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceUpsertArgs>(args: SelectSubset<T, AttendanceUpsertArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends AttendanceCountArgs>(
      args?: Subset<T, AttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendance model
   */
  readonly fields: AttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studentProfile<T extends StudentProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentProfileDefaultArgs<ExtArgs>>): Prisma__StudentProfileClient<$Result.GetResult<Prisma.$StudentProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendance model
   */ 
  interface AttendanceFieldRefs {
    readonly id: FieldRef<"Attendance", 'String'>
    readonly studentProfileId: FieldRef<"Attendance", 'String'>
    readonly date: FieldRef<"Attendance", 'DateTime'>
    readonly status: FieldRef<"Attendance", 'String'>
    readonly timeIn: FieldRef<"Attendance", 'DateTime'>
    readonly timeOut: FieldRef<"Attendance", 'DateTime'>
    readonly reason: FieldRef<"Attendance", 'String'>
    readonly isExcused: FieldRef<"Attendance", 'Boolean'>
    readonly notes: FieldRef<"Attendance", 'String'>
    readonly metadata: FieldRef<"Attendance", 'Json'>
    readonly createdAt: FieldRef<"Attendance", 'DateTime'>
    readonly updatedAt: FieldRef<"Attendance", 'DateTime'>
    readonly term: FieldRef<"Attendance", 'String'>
    readonly academicYear: FieldRef<"Attendance", 'String'>
    readonly verifiedBy: FieldRef<"Attendance", 'String'>
    readonly classMasterId: FieldRef<"Attendance", 'String'>
    readonly classId: FieldRef<"Attendance", 'String'>
    readonly recordedBy: FieldRef<"Attendance", 'String'>
    readonly modifiedBy: FieldRef<"Attendance", 'String'>
    readonly modifiedAt: FieldRef<"Attendance", 'DateTime'>
    readonly verificationNotes: FieldRef<"Attendance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Attendance findUnique
   */
  export type AttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findUniqueOrThrow
   */
  export type AttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findFirst
   */
  export type AttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findFirstOrThrow
   */
  export type AttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findMany
   */
  export type AttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendances to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance create
   */
  export type AttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendance.
     */
    data: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
  }

  /**
   * Attendance createMany
   */
  export type AttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attendance createManyAndReturn
   */
  export type AttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance update
   */
  export type AttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendance.
     */
    data: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
    /**
     * Choose, which Attendance to update.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance updateMany
   */
  export type AttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
  }

  /**
   * Attendance upsert
   */
  export type AttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendance to update in case it exists.
     */
    where: AttendanceWhereUniqueInput
    /**
     * In case the Attendance found by the `where` argument doesn't exist, create a new Attendance with this data.
     */
    create: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
    /**
     * In case the Attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
  }

  /**
   * Attendance delete
   */
  export type AttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter which Attendance to delete.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance deleteMany
   */
  export type AttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendances to delete
     */
    where?: AttendanceWhereInput
  }

  /**
   * Attendance without action
   */
  export type AttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
  }


  /**
   * Model StaffProfile
   */

  export type AggregateStaffProfile = {
    _count: StaffProfileCountAggregateOutputType | null
    _avg: StaffProfileAvgAggregateOutputType | null
    _sum: StaffProfileSumAggregateOutputType | null
    _min: StaffProfileMinAggregateOutputType | null
    _max: StaffProfileMaxAggregateOutputType | null
  }

  export type StaffProfileAvgAggregateOutputType = {
    teachingHours: number | null
  }

  export type StaffProfileSumAggregateOutputType = {
    teachingHours: number | null
  }

  export type StaffProfileMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    employeeId: string | null
    position: string | null
    department: string | null
    employmentType: string | null
    startDate: Date | null
    endDate: Date | null
    teachingHours: number | null
  }

  export type StaffProfileMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    employeeId: string | null
    position: string | null
    department: string | null
    employmentType: string | null
    startDate: Date | null
    endDate: Date | null
    teachingHours: number | null
  }

  export type StaffProfileCountAggregateOutputType = {
    id: number
    profileId: number
    employeeId: number
    position: number
    department: number
    employmentType: number
    startDate: number
    endDate: number
    schedule: number
    responsibilities: number
    teachingHours: number
    specializations: number
    _all: number
  }


  export type StaffProfileAvgAggregateInputType = {
    teachingHours?: true
  }

  export type StaffProfileSumAggregateInputType = {
    teachingHours?: true
  }

  export type StaffProfileMinAggregateInputType = {
    id?: true
    profileId?: true
    employeeId?: true
    position?: true
    department?: true
    employmentType?: true
    startDate?: true
    endDate?: true
    teachingHours?: true
  }

  export type StaffProfileMaxAggregateInputType = {
    id?: true
    profileId?: true
    employeeId?: true
    position?: true
    department?: true
    employmentType?: true
    startDate?: true
    endDate?: true
    teachingHours?: true
  }

  export type StaffProfileCountAggregateInputType = {
    id?: true
    profileId?: true
    employeeId?: true
    position?: true
    department?: true
    employmentType?: true
    startDate?: true
    endDate?: true
    schedule?: true
    responsibilities?: true
    teachingHours?: true
    specializations?: true
    _all?: true
  }

  export type StaffProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffProfile to aggregate.
     */
    where?: StaffProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffProfiles to fetch.
     */
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffProfiles
    **/
    _count?: true | StaffProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffProfileMaxAggregateInputType
  }

  export type GetStaffProfileAggregateType<T extends StaffProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffProfile[P]>
      : GetScalarType<T[P], AggregateStaffProfile[P]>
  }




  export type StaffProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffProfileWhereInput
    orderBy?: StaffProfileOrderByWithAggregationInput | StaffProfileOrderByWithAggregationInput[]
    by: StaffProfileScalarFieldEnum[] | StaffProfileScalarFieldEnum
    having?: StaffProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffProfileCountAggregateInputType | true
    _avg?: StaffProfileAvgAggregateInputType
    _sum?: StaffProfileSumAggregateInputType
    _min?: StaffProfileMinAggregateInputType
    _max?: StaffProfileMaxAggregateInputType
  }

  export type StaffProfileGroupByOutputType = {
    id: string
    profileId: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date
    endDate: Date | null
    schedule: JsonValue | null
    responsibilities: string[]
    teachingHours: number | null
    specializations: string[]
    _count: StaffProfileCountAggregateOutputType | null
    _avg: StaffProfileAvgAggregateOutputType | null
    _sum: StaffProfileSumAggregateOutputType | null
    _min: StaffProfileMinAggregateOutputType | null
    _max: StaffProfileMaxAggregateOutputType | null
  }

  type GetStaffProfileGroupByPayload<T extends StaffProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffProfileGroupByOutputType[P]>
            : GetScalarType<T[P], StaffProfileGroupByOutputType[P]>
        }
      >
    >


  export type StaffProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    employeeId?: boolean
    position?: boolean
    department?: boolean
    employmentType?: boolean
    startDate?: boolean
    endDate?: boolean
    schedule?: boolean
    responsibilities?: boolean
    teachingHours?: boolean
    specializations?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    assignments?: boolean | StaffProfile$assignmentsArgs<ExtArgs>
    subjects?: boolean | StaffProfile$subjectsArgs<ExtArgs>
    grades?: boolean | StaffProfile$gradesArgs<ExtArgs>
    classSubjects?: boolean | StaffProfile$classSubjectsArgs<ExtArgs>
    _count?: boolean | StaffProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffProfile"]>

  export type StaffProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    employeeId?: boolean
    position?: boolean
    department?: boolean
    employmentType?: boolean
    startDate?: boolean
    endDate?: boolean
    schedule?: boolean
    responsibilities?: boolean
    teachingHours?: boolean
    specializations?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffProfile"]>

  export type StaffProfileSelectScalar = {
    id?: boolean
    profileId?: boolean
    employeeId?: boolean
    position?: boolean
    department?: boolean
    employmentType?: boolean
    startDate?: boolean
    endDate?: boolean
    schedule?: boolean
    responsibilities?: boolean
    teachingHours?: boolean
    specializations?: boolean
  }

  export type StaffProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    assignments?: boolean | StaffProfile$assignmentsArgs<ExtArgs>
    subjects?: boolean | StaffProfile$subjectsArgs<ExtArgs>
    grades?: boolean | StaffProfile$gradesArgs<ExtArgs>
    classSubjects?: boolean | StaffProfile$classSubjectsArgs<ExtArgs>
    _count?: boolean | StaffProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StaffProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $StaffProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffProfile"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
      assignments: Prisma.$StaffAssignmentPayload<ExtArgs>[]
      subjects: Prisma.$SubjectAssignmentPayload<ExtArgs>[]
      grades: Prisma.$GradePayload<ExtArgs>[]
      classSubjects: Prisma.$ClassSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      employeeId: string
      position: string
      department: string
      employmentType: string
      startDate: Date
      endDate: Date | null
      schedule: Prisma.JsonValue | null
      responsibilities: string[]
      teachingHours: number | null
      specializations: string[]
    }, ExtArgs["result"]["staffProfile"]>
    composites: {}
  }

  type StaffProfileGetPayload<S extends boolean | null | undefined | StaffProfileDefaultArgs> = $Result.GetResult<Prisma.$StaffProfilePayload, S>

  type StaffProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StaffProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StaffProfileCountAggregateInputType | true
    }

  export interface StaffProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffProfile'], meta: { name: 'StaffProfile' } }
    /**
     * Find zero or one StaffProfile that matches the filter.
     * @param {StaffProfileFindUniqueArgs} args - Arguments to find a StaffProfile
     * @example
     * // Get one StaffProfile
     * const staffProfile = await prisma.staffProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffProfileFindUniqueArgs>(args: SelectSubset<T, StaffProfileFindUniqueArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StaffProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StaffProfileFindUniqueOrThrowArgs} args - Arguments to find a StaffProfile
     * @example
     * // Get one StaffProfile
     * const staffProfile = await prisma.staffProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StaffProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileFindFirstArgs} args - Arguments to find a StaffProfile
     * @example
     * // Get one StaffProfile
     * const staffProfile = await prisma.staffProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffProfileFindFirstArgs>(args?: SelectSubset<T, StaffProfileFindFirstArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StaffProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileFindFirstOrThrowArgs} args - Arguments to find a StaffProfile
     * @example
     * // Get one StaffProfile
     * const staffProfile = await prisma.staffProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StaffProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffProfiles
     * const staffProfiles = await prisma.staffProfile.findMany()
     * 
     * // Get first 10 StaffProfiles
     * const staffProfiles = await prisma.staffProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffProfileWithIdOnly = await prisma.staffProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffProfileFindManyArgs>(args?: SelectSubset<T, StaffProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StaffProfile.
     * @param {StaffProfileCreateArgs} args - Arguments to create a StaffProfile.
     * @example
     * // Create one StaffProfile
     * const StaffProfile = await prisma.staffProfile.create({
     *   data: {
     *     // ... data to create a StaffProfile
     *   }
     * })
     * 
     */
    create<T extends StaffProfileCreateArgs>(args: SelectSubset<T, StaffProfileCreateArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StaffProfiles.
     * @param {StaffProfileCreateManyArgs} args - Arguments to create many StaffProfiles.
     * @example
     * // Create many StaffProfiles
     * const staffProfile = await prisma.staffProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffProfileCreateManyArgs>(args?: SelectSubset<T, StaffProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffProfiles and returns the data saved in the database.
     * @param {StaffProfileCreateManyAndReturnArgs} args - Arguments to create many StaffProfiles.
     * @example
     * // Create many StaffProfiles
     * const staffProfile = await prisma.staffProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffProfiles and only return the `id`
     * const staffProfileWithIdOnly = await prisma.staffProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StaffProfile.
     * @param {StaffProfileDeleteArgs} args - Arguments to delete one StaffProfile.
     * @example
     * // Delete one StaffProfile
     * const StaffProfile = await prisma.staffProfile.delete({
     *   where: {
     *     // ... filter to delete one StaffProfile
     *   }
     * })
     * 
     */
    delete<T extends StaffProfileDeleteArgs>(args: SelectSubset<T, StaffProfileDeleteArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StaffProfile.
     * @param {StaffProfileUpdateArgs} args - Arguments to update one StaffProfile.
     * @example
     * // Update one StaffProfile
     * const staffProfile = await prisma.staffProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffProfileUpdateArgs>(args: SelectSubset<T, StaffProfileUpdateArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StaffProfiles.
     * @param {StaffProfileDeleteManyArgs} args - Arguments to filter StaffProfiles to delete.
     * @example
     * // Delete a few StaffProfiles
     * const { count } = await prisma.staffProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffProfileDeleteManyArgs>(args?: SelectSubset<T, StaffProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffProfiles
     * const staffProfile = await prisma.staffProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffProfileUpdateManyArgs>(args: SelectSubset<T, StaffProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StaffProfile.
     * @param {StaffProfileUpsertArgs} args - Arguments to update or create a StaffProfile.
     * @example
     * // Update or create a StaffProfile
     * const staffProfile = await prisma.staffProfile.upsert({
     *   create: {
     *     // ... data to create a StaffProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffProfile we want to update
     *   }
     * })
     */
    upsert<T extends StaffProfileUpsertArgs>(args: SelectSubset<T, StaffProfileUpsertArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StaffProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileCountArgs} args - Arguments to filter StaffProfiles to count.
     * @example
     * // Count the number of StaffProfiles
     * const count = await prisma.staffProfile.count({
     *   where: {
     *     // ... the filter for the StaffProfiles we want to count
     *   }
     * })
    **/
    count<T extends StaffProfileCountArgs>(
      args?: Subset<T, StaffProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffProfileAggregateArgs>(args: Subset<T, StaffProfileAggregateArgs>): Prisma.PrismaPromise<GetStaffProfileAggregateType<T>>

    /**
     * Group by StaffProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffProfileGroupByArgs['orderBy'] }
        : { orderBy?: StaffProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffProfile model
   */
  readonly fields: StaffProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignments<T extends StaffProfile$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, StaffProfile$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    subjects<T extends StaffProfile$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, StaffProfile$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    grades<T extends StaffProfile$gradesArgs<ExtArgs> = {}>(args?: Subset<T, StaffProfile$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany"> | Null>
    classSubjects<T extends StaffProfile$classSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, StaffProfile$classSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffProfile model
   */ 
  interface StaffProfileFieldRefs {
    readonly id: FieldRef<"StaffProfile", 'String'>
    readonly profileId: FieldRef<"StaffProfile", 'String'>
    readonly employeeId: FieldRef<"StaffProfile", 'String'>
    readonly position: FieldRef<"StaffProfile", 'String'>
    readonly department: FieldRef<"StaffProfile", 'String'>
    readonly employmentType: FieldRef<"StaffProfile", 'String'>
    readonly startDate: FieldRef<"StaffProfile", 'DateTime'>
    readonly endDate: FieldRef<"StaffProfile", 'DateTime'>
    readonly schedule: FieldRef<"StaffProfile", 'Json'>
    readonly responsibilities: FieldRef<"StaffProfile", 'String[]'>
    readonly teachingHours: FieldRef<"StaffProfile", 'Int'>
    readonly specializations: FieldRef<"StaffProfile", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * StaffProfile findUnique
   */
  export type StaffProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfile to fetch.
     */
    where: StaffProfileWhereUniqueInput
  }

  /**
   * StaffProfile findUniqueOrThrow
   */
  export type StaffProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfile to fetch.
     */
    where: StaffProfileWhereUniqueInput
  }

  /**
   * StaffProfile findFirst
   */
  export type StaffProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfile to fetch.
     */
    where?: StaffProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffProfiles to fetch.
     */
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffProfiles.
     */
    cursor?: StaffProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffProfiles.
     */
    distinct?: StaffProfileScalarFieldEnum | StaffProfileScalarFieldEnum[]
  }

  /**
   * StaffProfile findFirstOrThrow
   */
  export type StaffProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfile to fetch.
     */
    where?: StaffProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffProfiles to fetch.
     */
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffProfiles.
     */
    cursor?: StaffProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffProfiles.
     */
    distinct?: StaffProfileScalarFieldEnum | StaffProfileScalarFieldEnum[]
  }

  /**
   * StaffProfile findMany
   */
  export type StaffProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfiles to fetch.
     */
    where?: StaffProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffProfiles to fetch.
     */
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffProfiles.
     */
    cursor?: StaffProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffProfiles.
     */
    skip?: number
    distinct?: StaffProfileScalarFieldEnum | StaffProfileScalarFieldEnum[]
  }

  /**
   * StaffProfile create
   */
  export type StaffProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffProfile.
     */
    data: XOR<StaffProfileCreateInput, StaffProfileUncheckedCreateInput>
  }

  /**
   * StaffProfile createMany
   */
  export type StaffProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffProfiles.
     */
    data: StaffProfileCreateManyInput | StaffProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffProfile createManyAndReturn
   */
  export type StaffProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StaffProfiles.
     */
    data: StaffProfileCreateManyInput | StaffProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffProfile update
   */
  export type StaffProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffProfile.
     */
    data: XOR<StaffProfileUpdateInput, StaffProfileUncheckedUpdateInput>
    /**
     * Choose, which StaffProfile to update.
     */
    where: StaffProfileWhereUniqueInput
  }

  /**
   * StaffProfile updateMany
   */
  export type StaffProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffProfiles.
     */
    data: XOR<StaffProfileUpdateManyMutationInput, StaffProfileUncheckedUpdateManyInput>
    /**
     * Filter which StaffProfiles to update
     */
    where?: StaffProfileWhereInput
  }

  /**
   * StaffProfile upsert
   */
  export type StaffProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffProfile to update in case it exists.
     */
    where: StaffProfileWhereUniqueInput
    /**
     * In case the StaffProfile found by the `where` argument doesn't exist, create a new StaffProfile with this data.
     */
    create: XOR<StaffProfileCreateInput, StaffProfileUncheckedCreateInput>
    /**
     * In case the StaffProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffProfileUpdateInput, StaffProfileUncheckedUpdateInput>
  }

  /**
   * StaffProfile delete
   */
  export type StaffProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter which StaffProfile to delete.
     */
    where: StaffProfileWhereUniqueInput
  }

  /**
   * StaffProfile deleteMany
   */
  export type StaffProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffProfiles to delete
     */
    where?: StaffProfileWhereInput
  }

  /**
   * StaffProfile.assignments
   */
  export type StaffProfile$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffAssignment
     */
    select?: StaffAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffAssignmentInclude<ExtArgs> | null
    where?: StaffAssignmentWhereInput
    orderBy?: StaffAssignmentOrderByWithRelationInput | StaffAssignmentOrderByWithRelationInput[]
    cursor?: StaffAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffAssignmentScalarFieldEnum | StaffAssignmentScalarFieldEnum[]
  }

  /**
   * StaffProfile.subjects
   */
  export type StaffProfile$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    where?: SubjectAssignmentWhereInput
    orderBy?: SubjectAssignmentOrderByWithRelationInput | SubjectAssignmentOrderByWithRelationInput[]
    cursor?: SubjectAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectAssignmentScalarFieldEnum | SubjectAssignmentScalarFieldEnum[]
  }

  /**
   * StaffProfile.grades
   */
  export type StaffProfile$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * StaffProfile.classSubjects
   */
  export type StaffProfile$classSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    where?: ClassSubjectWhereInput
    orderBy?: ClassSubjectOrderByWithRelationInput | ClassSubjectOrderByWithRelationInput[]
    cursor?: ClassSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassSubjectScalarFieldEnum | ClassSubjectScalarFieldEnum[]
  }

  /**
   * StaffProfile without action
   */
  export type StaffProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    credits: number | null
  }

  export type SubjectSumAggregateOutputType = {
    credits: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
    credits: number | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
    credits: number | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    category: number
    gradeLevel: number
    metadata: number
    createdAt: number
    updatedAt: number
    credits: number
    prerequisites: number
    corequisites: number
    learningOutcomes: number
    assessmentCriteria: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    credits?: true
  }

  export type SubjectSumAggregateInputType = {
    credits?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    credits?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    credits?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    gradeLevel?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    credits?: true
    prerequisites?: true
    corequisites?: true
    learningOutcomes?: true
    assessmentCriteria?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    category: string
    gradeLevel: string[]
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    credits: number | null
    prerequisites: string[]
    corequisites: string[]
    learningOutcomes: string[]
    assessmentCriteria: JsonValue | null
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    gradeLevel?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    credits?: boolean
    prerequisites?: boolean
    corequisites?: boolean
    learningOutcomes?: boolean
    assessmentCriteria?: boolean
    assignments?: boolean | Subject$assignmentsArgs<ExtArgs>
    classSubjects?: boolean | Subject$classSubjectsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    gradeLevel?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    credits?: boolean
    prerequisites?: boolean
    corequisites?: boolean
    learningOutcomes?: boolean
    assessmentCriteria?: boolean
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    gradeLevel?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    credits?: boolean
    prerequisites?: boolean
    corequisites?: boolean
    learningOutcomes?: boolean
    assessmentCriteria?: boolean
  }

  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | Subject$assignmentsArgs<ExtArgs>
    classSubjects?: boolean | Subject$classSubjectsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      assignments: Prisma.$SubjectAssignmentPayload<ExtArgs>[]
      classSubjects: Prisma.$ClassSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      category: string
      gradeLevel: string[]
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      credits: number | null
      prerequisites: string[]
      corequisites: string[]
      learningOutcomes: string[]
      assessmentCriteria: Prisma.JsonValue | null
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends Subject$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    classSubjects<T extends Subject$classSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$classSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSubjectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */ 
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'String'>
    readonly code: FieldRef<"Subject", 'String'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly description: FieldRef<"Subject", 'String'>
    readonly category: FieldRef<"Subject", 'String'>
    readonly gradeLevel: FieldRef<"Subject", 'String[]'>
    readonly metadata: FieldRef<"Subject", 'Json'>
    readonly createdAt: FieldRef<"Subject", 'DateTime'>
    readonly updatedAt: FieldRef<"Subject", 'DateTime'>
    readonly credits: FieldRef<"Subject", 'Float'>
    readonly prerequisites: FieldRef<"Subject", 'String[]'>
    readonly corequisites: FieldRef<"Subject", 'String[]'>
    readonly learningOutcomes: FieldRef<"Subject", 'String[]'>
    readonly assessmentCriteria: FieldRef<"Subject", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject createManyAndReturn
   */
  export type SubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
  }

  /**
   * Subject.assignments
   */
  export type Subject$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    where?: SubjectAssignmentWhereInput
    orderBy?: SubjectAssignmentOrderByWithRelationInput | SubjectAssignmentOrderByWithRelationInput[]
    cursor?: SubjectAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectAssignmentScalarFieldEnum | SubjectAssignmentScalarFieldEnum[]
  }

  /**
   * Subject.classSubjects
   */
  export type Subject$classSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSubject
     */
    select?: ClassSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSubjectInclude<ExtArgs> | null
    where?: ClassSubjectWhereInput
    orderBy?: ClassSubjectOrderByWithRelationInput | ClassSubjectOrderByWithRelationInput[]
    cursor?: ClassSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassSubjectScalarFieldEnum | ClassSubjectScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model SubjectAssignment
   */

  export type AggregateSubjectAssignment = {
    _count: SubjectAssignmentCountAggregateOutputType | null
    _min: SubjectAssignmentMinAggregateOutputType | null
    _max: SubjectAssignmentMaxAggregateOutputType | null
  }

  export type SubjectAssignmentMinAggregateOutputType = {
    id: string | null
    subjectId: string | null
    staffProfileId: string | null
    academicYear: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubjectAssignmentMaxAggregateOutputType = {
    id: string | null
    subjectId: string | null
    staffProfileId: string | null
    academicYear: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubjectAssignmentCountAggregateOutputType = {
    id: number
    subjectId: number
    staffProfileId: number
    academicYear: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubjectAssignmentMinAggregateInputType = {
    id?: true
    subjectId?: true
    staffProfileId?: true
    academicYear?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubjectAssignmentMaxAggregateInputType = {
    id?: true
    subjectId?: true
    staffProfileId?: true
    academicYear?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubjectAssignmentCountAggregateInputType = {
    id?: true
    subjectId?: true
    staffProfileId?: true
    academicYear?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubjectAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubjectAssignment to aggregate.
     */
    where?: SubjectAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectAssignments to fetch.
     */
    orderBy?: SubjectAssignmentOrderByWithRelationInput | SubjectAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubjectAssignments
    **/
    _count?: true | SubjectAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectAssignmentMaxAggregateInputType
  }

  export type GetSubjectAssignmentAggregateType<T extends SubjectAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateSubjectAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubjectAssignment[P]>
      : GetScalarType<T[P], AggregateSubjectAssignment[P]>
  }




  export type SubjectAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectAssignmentWhereInput
    orderBy?: SubjectAssignmentOrderByWithAggregationInput | SubjectAssignmentOrderByWithAggregationInput[]
    by: SubjectAssignmentScalarFieldEnum[] | SubjectAssignmentScalarFieldEnum
    having?: SubjectAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectAssignmentCountAggregateInputType | true
    _min?: SubjectAssignmentMinAggregateInputType
    _max?: SubjectAssignmentMaxAggregateInputType
  }

  export type SubjectAssignmentGroupByOutputType = {
    id: string
    subjectId: string
    staffProfileId: string
    academicYear: string
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: SubjectAssignmentCountAggregateOutputType | null
    _min: SubjectAssignmentMinAggregateOutputType | null
    _max: SubjectAssignmentMaxAggregateOutputType | null
  }

  type GetSubjectAssignmentGroupByPayload<T extends SubjectAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type SubjectAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subjectId?: boolean
    staffProfileId?: boolean
    academicYear?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjectAssignment"]>

  export type SubjectAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subjectId?: boolean
    staffProfileId?: boolean
    academicYear?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjectAssignment"]>

  export type SubjectAssignmentSelectScalar = {
    id?: boolean
    subjectId?: boolean
    staffProfileId?: boolean
    academicYear?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubjectAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
  }
  export type SubjectAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    staffProfile?: boolean | StaffProfileDefaultArgs<ExtArgs>
  }

  export type $SubjectAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubjectAssignment"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      staffProfile: Prisma.$StaffProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subjectId: string
      staffProfileId: string
      academicYear: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subjectAssignment"]>
    composites: {}
  }

  type SubjectAssignmentGetPayload<S extends boolean | null | undefined | SubjectAssignmentDefaultArgs> = $Result.GetResult<Prisma.$SubjectAssignmentPayload, S>

  type SubjectAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubjectAssignmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubjectAssignmentCountAggregateInputType | true
    }

  export interface SubjectAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubjectAssignment'], meta: { name: 'SubjectAssignment' } }
    /**
     * Find zero or one SubjectAssignment that matches the filter.
     * @param {SubjectAssignmentFindUniqueArgs} args - Arguments to find a SubjectAssignment
     * @example
     * // Get one SubjectAssignment
     * const subjectAssignment = await prisma.subjectAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectAssignmentFindUniqueArgs>(args: SelectSubset<T, SubjectAssignmentFindUniqueArgs<ExtArgs>>): Prisma__SubjectAssignmentClient<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SubjectAssignment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubjectAssignmentFindUniqueOrThrowArgs} args - Arguments to find a SubjectAssignment
     * @example
     * // Get one SubjectAssignment
     * const subjectAssignment = await prisma.subjectAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectAssignmentClient<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SubjectAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAssignmentFindFirstArgs} args - Arguments to find a SubjectAssignment
     * @example
     * // Get one SubjectAssignment
     * const subjectAssignment = await prisma.subjectAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectAssignmentFindFirstArgs>(args?: SelectSubset<T, SubjectAssignmentFindFirstArgs<ExtArgs>>): Prisma__SubjectAssignmentClient<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SubjectAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAssignmentFindFirstOrThrowArgs} args - Arguments to find a SubjectAssignment
     * @example
     * // Get one SubjectAssignment
     * const subjectAssignment = await prisma.subjectAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectAssignmentClient<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SubjectAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubjectAssignments
     * const subjectAssignments = await prisma.subjectAssignment.findMany()
     * 
     * // Get first 10 SubjectAssignments
     * const subjectAssignments = await prisma.subjectAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectAssignmentWithIdOnly = await prisma.subjectAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectAssignmentFindManyArgs>(args?: SelectSubset<T, SubjectAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SubjectAssignment.
     * @param {SubjectAssignmentCreateArgs} args - Arguments to create a SubjectAssignment.
     * @example
     * // Create one SubjectAssignment
     * const SubjectAssignment = await prisma.subjectAssignment.create({
     *   data: {
     *     // ... data to create a SubjectAssignment
     *   }
     * })
     * 
     */
    create<T extends SubjectAssignmentCreateArgs>(args: SelectSubset<T, SubjectAssignmentCreateArgs<ExtArgs>>): Prisma__SubjectAssignmentClient<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SubjectAssignments.
     * @param {SubjectAssignmentCreateManyArgs} args - Arguments to create many SubjectAssignments.
     * @example
     * // Create many SubjectAssignments
     * const subjectAssignment = await prisma.subjectAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectAssignmentCreateManyArgs>(args?: SelectSubset<T, SubjectAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubjectAssignments and returns the data saved in the database.
     * @param {SubjectAssignmentCreateManyAndReturnArgs} args - Arguments to create many SubjectAssignments.
     * @example
     * // Create many SubjectAssignments
     * const subjectAssignment = await prisma.subjectAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubjectAssignments and only return the `id`
     * const subjectAssignmentWithIdOnly = await prisma.subjectAssignment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SubjectAssignment.
     * @param {SubjectAssignmentDeleteArgs} args - Arguments to delete one SubjectAssignment.
     * @example
     * // Delete one SubjectAssignment
     * const SubjectAssignment = await prisma.subjectAssignment.delete({
     *   where: {
     *     // ... filter to delete one SubjectAssignment
     *   }
     * })
     * 
     */
    delete<T extends SubjectAssignmentDeleteArgs>(args: SelectSubset<T, SubjectAssignmentDeleteArgs<ExtArgs>>): Prisma__SubjectAssignmentClient<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SubjectAssignment.
     * @param {SubjectAssignmentUpdateArgs} args - Arguments to update one SubjectAssignment.
     * @example
     * // Update one SubjectAssignment
     * const subjectAssignment = await prisma.subjectAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectAssignmentUpdateArgs>(args: SelectSubset<T, SubjectAssignmentUpdateArgs<ExtArgs>>): Prisma__SubjectAssignmentClient<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SubjectAssignments.
     * @param {SubjectAssignmentDeleteManyArgs} args - Arguments to filter SubjectAssignments to delete.
     * @example
     * // Delete a few SubjectAssignments
     * const { count } = await prisma.subjectAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectAssignmentDeleteManyArgs>(args?: SelectSubset<T, SubjectAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubjectAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubjectAssignments
     * const subjectAssignment = await prisma.subjectAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectAssignmentUpdateManyArgs>(args: SelectSubset<T, SubjectAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubjectAssignment.
     * @param {SubjectAssignmentUpsertArgs} args - Arguments to update or create a SubjectAssignment.
     * @example
     * // Update or create a SubjectAssignment
     * const subjectAssignment = await prisma.subjectAssignment.upsert({
     *   create: {
     *     // ... data to create a SubjectAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubjectAssignment we want to update
     *   }
     * })
     */
    upsert<T extends SubjectAssignmentUpsertArgs>(args: SelectSubset<T, SubjectAssignmentUpsertArgs<ExtArgs>>): Prisma__SubjectAssignmentClient<$Result.GetResult<Prisma.$SubjectAssignmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SubjectAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAssignmentCountArgs} args - Arguments to filter SubjectAssignments to count.
     * @example
     * // Count the number of SubjectAssignments
     * const count = await prisma.subjectAssignment.count({
     *   where: {
     *     // ... the filter for the SubjectAssignments we want to count
     *   }
     * })
    **/
    count<T extends SubjectAssignmentCountArgs>(
      args?: Subset<T, SubjectAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubjectAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAssignmentAggregateArgs>(args: Subset<T, SubjectAssignmentAggregateArgs>): Prisma.PrismaPromise<GetSubjectAssignmentAggregateType<T>>

    /**
     * Group by SubjectAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: SubjectAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubjectAssignment model
   */
  readonly fields: SubjectAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubjectAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    staffProfile<T extends StaffProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffProfileDefaultArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubjectAssignment model
   */ 
  interface SubjectAssignmentFieldRefs {
    readonly id: FieldRef<"SubjectAssignment", 'String'>
    readonly subjectId: FieldRef<"SubjectAssignment", 'String'>
    readonly staffProfileId: FieldRef<"SubjectAssignment", 'String'>
    readonly academicYear: FieldRef<"SubjectAssignment", 'String'>
    readonly metadata: FieldRef<"SubjectAssignment", 'Json'>
    readonly createdAt: FieldRef<"SubjectAssignment", 'DateTime'>
    readonly updatedAt: FieldRef<"SubjectAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubjectAssignment findUnique
   */
  export type SubjectAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SubjectAssignment to fetch.
     */
    where: SubjectAssignmentWhereUniqueInput
  }

  /**
   * SubjectAssignment findUniqueOrThrow
   */
  export type SubjectAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SubjectAssignment to fetch.
     */
    where: SubjectAssignmentWhereUniqueInput
  }

  /**
   * SubjectAssignment findFirst
   */
  export type SubjectAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SubjectAssignment to fetch.
     */
    where?: SubjectAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectAssignments to fetch.
     */
    orderBy?: SubjectAssignmentOrderByWithRelationInput | SubjectAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubjectAssignments.
     */
    cursor?: SubjectAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubjectAssignments.
     */
    distinct?: SubjectAssignmentScalarFieldEnum | SubjectAssignmentScalarFieldEnum[]
  }

  /**
   * SubjectAssignment findFirstOrThrow
   */
  export type SubjectAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SubjectAssignment to fetch.
     */
    where?: SubjectAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectAssignments to fetch.
     */
    orderBy?: SubjectAssignmentOrderByWithRelationInput | SubjectAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubjectAssignments.
     */
    cursor?: SubjectAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubjectAssignments.
     */
    distinct?: SubjectAssignmentScalarFieldEnum | SubjectAssignmentScalarFieldEnum[]
  }

  /**
   * SubjectAssignment findMany
   */
  export type SubjectAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SubjectAssignments to fetch.
     */
    where?: SubjectAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectAssignments to fetch.
     */
    orderBy?: SubjectAssignmentOrderByWithRelationInput | SubjectAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubjectAssignments.
     */
    cursor?: SubjectAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectAssignments.
     */
    skip?: number
    distinct?: SubjectAssignmentScalarFieldEnum | SubjectAssignmentScalarFieldEnum[]
  }

  /**
   * SubjectAssignment create
   */
  export type SubjectAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a SubjectAssignment.
     */
    data: XOR<SubjectAssignmentCreateInput, SubjectAssignmentUncheckedCreateInput>
  }

  /**
   * SubjectAssignment createMany
   */
  export type SubjectAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubjectAssignments.
     */
    data: SubjectAssignmentCreateManyInput | SubjectAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubjectAssignment createManyAndReturn
   */
  export type SubjectAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SubjectAssignments.
     */
    data: SubjectAssignmentCreateManyInput | SubjectAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubjectAssignment update
   */
  export type SubjectAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a SubjectAssignment.
     */
    data: XOR<SubjectAssignmentUpdateInput, SubjectAssignmentUncheckedUpdateInput>
    /**
     * Choose, which SubjectAssignment to update.
     */
    where: SubjectAssignmentWhereUniqueInput
  }

  /**
   * SubjectAssignment updateMany
   */
  export type SubjectAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubjectAssignments.
     */
    data: XOR<SubjectAssignmentUpdateManyMutationInput, SubjectAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which SubjectAssignments to update
     */
    where?: SubjectAssignmentWhereInput
  }

  /**
   * SubjectAssignment upsert
   */
  export type SubjectAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the SubjectAssignment to update in case it exists.
     */
    where: SubjectAssignmentWhereUniqueInput
    /**
     * In case the SubjectAssignment found by the `where` argument doesn't exist, create a new SubjectAssignment with this data.
     */
    create: XOR<SubjectAssignmentCreateInput, SubjectAssignmentUncheckedCreateInput>
    /**
     * In case the SubjectAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectAssignmentUpdateInput, SubjectAssignmentUncheckedUpdateInput>
  }

  /**
   * SubjectAssignment delete
   */
  export type SubjectAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
    /**
     * Filter which SubjectAssignment to delete.
     */
    where: SubjectAssignmentWhereUniqueInput
  }

  /**
   * SubjectAssignment deleteMany
   */
  export type SubjectAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubjectAssignments to delete
     */
    where?: SubjectAssignmentWhereInput
  }

  /**
   * SubjectAssignment without action
   */
  export type SubjectAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectAssignment
     */
    select?: SubjectAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model CommunicationGroup
   */

  export type AggregateCommunicationGroup = {
    _count: CommunicationGroupCountAggregateOutputType | null
    _min: CommunicationGroupMinAggregateOutputType | null
    _max: CommunicationGroupMaxAggregateOutputType | null
  }

  export type CommunicationGroupMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    name: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommunicationGroupMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    name: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommunicationGroupCountAggregateOutputType = {
    id: number
    schoolId: number
    name: number
    type: number
    filters: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommunicationGroupMinAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommunicationGroupMaxAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommunicationGroupCountAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    type?: true
    filters?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommunicationGroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunicationGroup to aggregate.
     */
    where?: CommunicationGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunicationGroups to fetch.
     */
    orderBy?: CommunicationGroupOrderByWithRelationInput | CommunicationGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunicationGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunicationGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunicationGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommunicationGroups
    **/
    _count?: true | CommunicationGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunicationGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunicationGroupMaxAggregateInputType
  }

  export type GetCommunicationGroupAggregateType<T extends CommunicationGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunicationGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunicationGroup[P]>
      : GetScalarType<T[P], AggregateCommunicationGroup[P]>
  }




  export type CommunicationGroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunicationGroupWhereInput
    orderBy?: CommunicationGroupOrderByWithAggregationInput | CommunicationGroupOrderByWithAggregationInput[]
    by: CommunicationGroupScalarFieldEnum[] | CommunicationGroupScalarFieldEnum
    having?: CommunicationGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunicationGroupCountAggregateInputType | true
    _min?: CommunicationGroupMinAggregateInputType
    _max?: CommunicationGroupMaxAggregateInputType
  }

  export type CommunicationGroupGroupByOutputType = {
    id: string
    schoolId: string
    name: string
    type: string
    filters: JsonValue | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CommunicationGroupCountAggregateOutputType | null
    _min: CommunicationGroupMinAggregateOutputType | null
    _max: CommunicationGroupMaxAggregateOutputType | null
  }

  type GetCommunicationGroupGroupByPayload<T extends CommunicationGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunicationGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunicationGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunicationGroupGroupByOutputType[P]>
            : GetScalarType<T[P], CommunicationGroupGroupByOutputType[P]>
        }
      >
    >


  export type CommunicationGroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    name?: boolean
    type?: boolean
    filters?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["communicationGroup"]>

  export type CommunicationGroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    name?: boolean
    type?: boolean
    filters?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["communicationGroup"]>

  export type CommunicationGroupSelectScalar = {
    id?: boolean
    schoolId?: boolean
    name?: boolean
    type?: boolean
    filters?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommunicationGroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }
  export type CommunicationGroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $CommunicationGroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommunicationGroup"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      name: string
      type: string
      filters: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["communicationGroup"]>
    composites: {}
  }

  type CommunicationGroupGetPayload<S extends boolean | null | undefined | CommunicationGroupDefaultArgs> = $Result.GetResult<Prisma.$CommunicationGroupPayload, S>

  type CommunicationGroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunicationGroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunicationGroupCountAggregateInputType | true
    }

  export interface CommunicationGroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommunicationGroup'], meta: { name: 'CommunicationGroup' } }
    /**
     * Find zero or one CommunicationGroup that matches the filter.
     * @param {CommunicationGroupFindUniqueArgs} args - Arguments to find a CommunicationGroup
     * @example
     * // Get one CommunicationGroup
     * const communicationGroup = await prisma.communicationGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunicationGroupFindUniqueArgs>(args: SelectSubset<T, CommunicationGroupFindUniqueArgs<ExtArgs>>): Prisma__CommunicationGroupClient<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommunicationGroup that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommunicationGroupFindUniqueOrThrowArgs} args - Arguments to find a CommunicationGroup
     * @example
     * // Get one CommunicationGroup
     * const communicationGroup = await prisma.communicationGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunicationGroupFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunicationGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunicationGroupClient<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommunicationGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationGroupFindFirstArgs} args - Arguments to find a CommunicationGroup
     * @example
     * // Get one CommunicationGroup
     * const communicationGroup = await prisma.communicationGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunicationGroupFindFirstArgs>(args?: SelectSubset<T, CommunicationGroupFindFirstArgs<ExtArgs>>): Prisma__CommunicationGroupClient<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommunicationGroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationGroupFindFirstOrThrowArgs} args - Arguments to find a CommunicationGroup
     * @example
     * // Get one CommunicationGroup
     * const communicationGroup = await prisma.communicationGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunicationGroupFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunicationGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunicationGroupClient<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommunicationGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationGroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommunicationGroups
     * const communicationGroups = await prisma.communicationGroup.findMany()
     * 
     * // Get first 10 CommunicationGroups
     * const communicationGroups = await prisma.communicationGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communicationGroupWithIdOnly = await prisma.communicationGroup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunicationGroupFindManyArgs>(args?: SelectSubset<T, CommunicationGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommunicationGroup.
     * @param {CommunicationGroupCreateArgs} args - Arguments to create a CommunicationGroup.
     * @example
     * // Create one CommunicationGroup
     * const CommunicationGroup = await prisma.communicationGroup.create({
     *   data: {
     *     // ... data to create a CommunicationGroup
     *   }
     * })
     * 
     */
    create<T extends CommunicationGroupCreateArgs>(args: SelectSubset<T, CommunicationGroupCreateArgs<ExtArgs>>): Prisma__CommunicationGroupClient<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommunicationGroups.
     * @param {CommunicationGroupCreateManyArgs} args - Arguments to create many CommunicationGroups.
     * @example
     * // Create many CommunicationGroups
     * const communicationGroup = await prisma.communicationGroup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunicationGroupCreateManyArgs>(args?: SelectSubset<T, CommunicationGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommunicationGroups and returns the data saved in the database.
     * @param {CommunicationGroupCreateManyAndReturnArgs} args - Arguments to create many CommunicationGroups.
     * @example
     * // Create many CommunicationGroups
     * const communicationGroup = await prisma.communicationGroup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommunicationGroups and only return the `id`
     * const communicationGroupWithIdOnly = await prisma.communicationGroup.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommunicationGroupCreateManyAndReturnArgs>(args?: SelectSubset<T, CommunicationGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CommunicationGroup.
     * @param {CommunicationGroupDeleteArgs} args - Arguments to delete one CommunicationGroup.
     * @example
     * // Delete one CommunicationGroup
     * const CommunicationGroup = await prisma.communicationGroup.delete({
     *   where: {
     *     // ... filter to delete one CommunicationGroup
     *   }
     * })
     * 
     */
    delete<T extends CommunicationGroupDeleteArgs>(args: SelectSubset<T, CommunicationGroupDeleteArgs<ExtArgs>>): Prisma__CommunicationGroupClient<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommunicationGroup.
     * @param {CommunicationGroupUpdateArgs} args - Arguments to update one CommunicationGroup.
     * @example
     * // Update one CommunicationGroup
     * const communicationGroup = await prisma.communicationGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunicationGroupUpdateArgs>(args: SelectSubset<T, CommunicationGroupUpdateArgs<ExtArgs>>): Prisma__CommunicationGroupClient<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommunicationGroups.
     * @param {CommunicationGroupDeleteManyArgs} args - Arguments to filter CommunicationGroups to delete.
     * @example
     * // Delete a few CommunicationGroups
     * const { count } = await prisma.communicationGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunicationGroupDeleteManyArgs>(args?: SelectSubset<T, CommunicationGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommunicationGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommunicationGroups
     * const communicationGroup = await prisma.communicationGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunicationGroupUpdateManyArgs>(args: SelectSubset<T, CommunicationGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommunicationGroup.
     * @param {CommunicationGroupUpsertArgs} args - Arguments to update or create a CommunicationGroup.
     * @example
     * // Update or create a CommunicationGroup
     * const communicationGroup = await prisma.communicationGroup.upsert({
     *   create: {
     *     // ... data to create a CommunicationGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommunicationGroup we want to update
     *   }
     * })
     */
    upsert<T extends CommunicationGroupUpsertArgs>(args: SelectSubset<T, CommunicationGroupUpsertArgs<ExtArgs>>): Prisma__CommunicationGroupClient<$Result.GetResult<Prisma.$CommunicationGroupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CommunicationGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationGroupCountArgs} args - Arguments to filter CommunicationGroups to count.
     * @example
     * // Count the number of CommunicationGroups
     * const count = await prisma.communicationGroup.count({
     *   where: {
     *     // ... the filter for the CommunicationGroups we want to count
     *   }
     * })
    **/
    count<T extends CommunicationGroupCountArgs>(
      args?: Subset<T, CommunicationGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunicationGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommunicationGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunicationGroupAggregateArgs>(args: Subset<T, CommunicationGroupAggregateArgs>): Prisma.PrismaPromise<GetCommunicationGroupAggregateType<T>>

    /**
     * Group by CommunicationGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunicationGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunicationGroupGroupByArgs['orderBy'] }
        : { orderBy?: CommunicationGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunicationGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunicationGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommunicationGroup model
   */
  readonly fields: CommunicationGroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommunicationGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunicationGroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommunicationGroup model
   */ 
  interface CommunicationGroupFieldRefs {
    readonly id: FieldRef<"CommunicationGroup", 'String'>
    readonly schoolId: FieldRef<"CommunicationGroup", 'String'>
    readonly name: FieldRef<"CommunicationGroup", 'String'>
    readonly type: FieldRef<"CommunicationGroup", 'String'>
    readonly filters: FieldRef<"CommunicationGroup", 'Json'>
    readonly metadata: FieldRef<"CommunicationGroup", 'Json'>
    readonly createdAt: FieldRef<"CommunicationGroup", 'DateTime'>
    readonly updatedAt: FieldRef<"CommunicationGroup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommunicationGroup findUnique
   */
  export type CommunicationGroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationGroup to fetch.
     */
    where: CommunicationGroupWhereUniqueInput
  }

  /**
   * CommunicationGroup findUniqueOrThrow
   */
  export type CommunicationGroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationGroup to fetch.
     */
    where: CommunicationGroupWhereUniqueInput
  }

  /**
   * CommunicationGroup findFirst
   */
  export type CommunicationGroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationGroup to fetch.
     */
    where?: CommunicationGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunicationGroups to fetch.
     */
    orderBy?: CommunicationGroupOrderByWithRelationInput | CommunicationGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunicationGroups.
     */
    cursor?: CommunicationGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunicationGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunicationGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunicationGroups.
     */
    distinct?: CommunicationGroupScalarFieldEnum | CommunicationGroupScalarFieldEnum[]
  }

  /**
   * CommunicationGroup findFirstOrThrow
   */
  export type CommunicationGroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationGroup to fetch.
     */
    where?: CommunicationGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunicationGroups to fetch.
     */
    orderBy?: CommunicationGroupOrderByWithRelationInput | CommunicationGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunicationGroups.
     */
    cursor?: CommunicationGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunicationGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunicationGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunicationGroups.
     */
    distinct?: CommunicationGroupScalarFieldEnum | CommunicationGroupScalarFieldEnum[]
  }

  /**
   * CommunicationGroup findMany
   */
  export type CommunicationGroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationGroups to fetch.
     */
    where?: CommunicationGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunicationGroups to fetch.
     */
    orderBy?: CommunicationGroupOrderByWithRelationInput | CommunicationGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommunicationGroups.
     */
    cursor?: CommunicationGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunicationGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunicationGroups.
     */
    skip?: number
    distinct?: CommunicationGroupScalarFieldEnum | CommunicationGroupScalarFieldEnum[]
  }

  /**
   * CommunicationGroup create
   */
  export type CommunicationGroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * The data needed to create a CommunicationGroup.
     */
    data: XOR<CommunicationGroupCreateInput, CommunicationGroupUncheckedCreateInput>
  }

  /**
   * CommunicationGroup createMany
   */
  export type CommunicationGroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommunicationGroups.
     */
    data: CommunicationGroupCreateManyInput | CommunicationGroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommunicationGroup createManyAndReturn
   */
  export type CommunicationGroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CommunicationGroups.
     */
    data: CommunicationGroupCreateManyInput | CommunicationGroupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommunicationGroup update
   */
  export type CommunicationGroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * The data needed to update a CommunicationGroup.
     */
    data: XOR<CommunicationGroupUpdateInput, CommunicationGroupUncheckedUpdateInput>
    /**
     * Choose, which CommunicationGroup to update.
     */
    where: CommunicationGroupWhereUniqueInput
  }

  /**
   * CommunicationGroup updateMany
   */
  export type CommunicationGroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommunicationGroups.
     */
    data: XOR<CommunicationGroupUpdateManyMutationInput, CommunicationGroupUncheckedUpdateManyInput>
    /**
     * Filter which CommunicationGroups to update
     */
    where?: CommunicationGroupWhereInput
  }

  /**
   * CommunicationGroup upsert
   */
  export type CommunicationGroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * The filter to search for the CommunicationGroup to update in case it exists.
     */
    where: CommunicationGroupWhereUniqueInput
    /**
     * In case the CommunicationGroup found by the `where` argument doesn't exist, create a new CommunicationGroup with this data.
     */
    create: XOR<CommunicationGroupCreateInput, CommunicationGroupUncheckedCreateInput>
    /**
     * In case the CommunicationGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunicationGroupUpdateInput, CommunicationGroupUncheckedUpdateInput>
  }

  /**
   * CommunicationGroup delete
   */
  export type CommunicationGroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
    /**
     * Filter which CommunicationGroup to delete.
     */
    where: CommunicationGroupWhereUniqueInput
  }

  /**
   * CommunicationGroup deleteMany
   */
  export type CommunicationGroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunicationGroups to delete
     */
    where?: CommunicationGroupWhereInput
  }

  /**
   * CommunicationGroup without action
   */
  export type CommunicationGroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationGroup
     */
    select?: CommunicationGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationGroupInclude<ExtArgs> | null
  }


  /**
   * Model SchoolRole
   */

  export type AggregateSchoolRole = {
    _count: SchoolRoleCountAggregateOutputType | null
    _min: SchoolRoleMinAggregateOutputType | null
    _max: SchoolRoleMaxAggregateOutputType | null
  }

  export type SchoolRoleMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    role: $Enums.Role | null
    assignedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolRoleMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    role: $Enums.Role | null
    assignedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolRoleCountAggregateOutputType = {
    id: number
    schoolId: number
    userId: number
    role: number
    permissions: number
    communicationPermissions: number
    assignedBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SchoolRoleMinAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    role?: true
    assignedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolRoleMaxAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    role?: true
    assignedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolRoleCountAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    role?: true
    permissions?: true
    communicationPermissions?: true
    assignedBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SchoolRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolRole to aggregate.
     */
    where?: SchoolRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolRoles to fetch.
     */
    orderBy?: SchoolRoleOrderByWithRelationInput | SchoolRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchoolRoles
    **/
    _count?: true | SchoolRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolRoleMaxAggregateInputType
  }

  export type GetSchoolRoleAggregateType<T extends SchoolRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchoolRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchoolRole[P]>
      : GetScalarType<T[P], AggregateSchoolRole[P]>
  }




  export type SchoolRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolRoleWhereInput
    orderBy?: SchoolRoleOrderByWithAggregationInput | SchoolRoleOrderByWithAggregationInput[]
    by: SchoolRoleScalarFieldEnum[] | SchoolRoleScalarFieldEnum
    having?: SchoolRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolRoleCountAggregateInputType | true
    _min?: SchoolRoleMinAggregateInputType
    _max?: SchoolRoleMaxAggregateInputType
  }

  export type SchoolRoleGroupByOutputType = {
    id: string
    schoolId: string
    userId: string
    role: $Enums.Role
    permissions: string[]
    communicationPermissions: string[]
    assignedBy: string
    createdAt: Date
    updatedAt: Date
    _count: SchoolRoleCountAggregateOutputType | null
    _min: SchoolRoleMinAggregateOutputType | null
    _max: SchoolRoleMaxAggregateOutputType | null
  }

  type GetSchoolRoleGroupByPayload<T extends SchoolRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolRoleGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolRoleGroupByOutputType[P]>
        }
      >
    >


  export type SchoolRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    role?: boolean
    permissions?: boolean
    communicationPermissions?: boolean
    assignedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolRole"]>

  export type SchoolRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    role?: boolean
    permissions?: boolean
    communicationPermissions?: boolean
    assignedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolRole"]>

  export type SchoolRoleSelectScalar = {
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    role?: boolean
    permissions?: boolean
    communicationPermissions?: boolean
    assignedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SchoolRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }
  export type SchoolRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $SchoolRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchoolRole"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      userId: string
      role: $Enums.Role
      permissions: string[]
      communicationPermissions: string[]
      assignedBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["schoolRole"]>
    composites: {}
  }

  type SchoolRoleGetPayload<S extends boolean | null | undefined | SchoolRoleDefaultArgs> = $Result.GetResult<Prisma.$SchoolRolePayload, S>

  type SchoolRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SchoolRoleCountAggregateInputType | true
    }

  export interface SchoolRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchoolRole'], meta: { name: 'SchoolRole' } }
    /**
     * Find zero or one SchoolRole that matches the filter.
     * @param {SchoolRoleFindUniqueArgs} args - Arguments to find a SchoolRole
     * @example
     * // Get one SchoolRole
     * const schoolRole = await prisma.schoolRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolRoleFindUniqueArgs>(args: SelectSubset<T, SchoolRoleFindUniqueArgs<ExtArgs>>): Prisma__SchoolRoleClient<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SchoolRole that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SchoolRoleFindUniqueOrThrowArgs} args - Arguments to find a SchoolRole
     * @example
     * // Get one SchoolRole
     * const schoolRole = await prisma.schoolRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolRoleClient<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SchoolRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolRoleFindFirstArgs} args - Arguments to find a SchoolRole
     * @example
     * // Get one SchoolRole
     * const schoolRole = await prisma.schoolRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolRoleFindFirstArgs>(args?: SelectSubset<T, SchoolRoleFindFirstArgs<ExtArgs>>): Prisma__SchoolRoleClient<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SchoolRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolRoleFindFirstOrThrowArgs} args - Arguments to find a SchoolRole
     * @example
     * // Get one SchoolRole
     * const schoolRole = await prisma.schoolRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolRoleClient<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SchoolRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchoolRoles
     * const schoolRoles = await prisma.schoolRole.findMany()
     * 
     * // Get first 10 SchoolRoles
     * const schoolRoles = await prisma.schoolRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolRoleWithIdOnly = await prisma.schoolRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchoolRoleFindManyArgs>(args?: SelectSubset<T, SchoolRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SchoolRole.
     * @param {SchoolRoleCreateArgs} args - Arguments to create a SchoolRole.
     * @example
     * // Create one SchoolRole
     * const SchoolRole = await prisma.schoolRole.create({
     *   data: {
     *     // ... data to create a SchoolRole
     *   }
     * })
     * 
     */
    create<T extends SchoolRoleCreateArgs>(args: SelectSubset<T, SchoolRoleCreateArgs<ExtArgs>>): Prisma__SchoolRoleClient<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SchoolRoles.
     * @param {SchoolRoleCreateManyArgs} args - Arguments to create many SchoolRoles.
     * @example
     * // Create many SchoolRoles
     * const schoolRole = await prisma.schoolRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolRoleCreateManyArgs>(args?: SelectSubset<T, SchoolRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SchoolRoles and returns the data saved in the database.
     * @param {SchoolRoleCreateManyAndReturnArgs} args - Arguments to create many SchoolRoles.
     * @example
     * // Create many SchoolRoles
     * const schoolRole = await prisma.schoolRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SchoolRoles and only return the `id`
     * const schoolRoleWithIdOnly = await prisma.schoolRole.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchoolRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, SchoolRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SchoolRole.
     * @param {SchoolRoleDeleteArgs} args - Arguments to delete one SchoolRole.
     * @example
     * // Delete one SchoolRole
     * const SchoolRole = await prisma.schoolRole.delete({
     *   where: {
     *     // ... filter to delete one SchoolRole
     *   }
     * })
     * 
     */
    delete<T extends SchoolRoleDeleteArgs>(args: SelectSubset<T, SchoolRoleDeleteArgs<ExtArgs>>): Prisma__SchoolRoleClient<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SchoolRole.
     * @param {SchoolRoleUpdateArgs} args - Arguments to update one SchoolRole.
     * @example
     * // Update one SchoolRole
     * const schoolRole = await prisma.schoolRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolRoleUpdateArgs>(args: SelectSubset<T, SchoolRoleUpdateArgs<ExtArgs>>): Prisma__SchoolRoleClient<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SchoolRoles.
     * @param {SchoolRoleDeleteManyArgs} args - Arguments to filter SchoolRoles to delete.
     * @example
     * // Delete a few SchoolRoles
     * const { count } = await prisma.schoolRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolRoleDeleteManyArgs>(args?: SelectSubset<T, SchoolRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchoolRoles
     * const schoolRole = await prisma.schoolRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolRoleUpdateManyArgs>(args: SelectSubset<T, SchoolRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SchoolRole.
     * @param {SchoolRoleUpsertArgs} args - Arguments to update or create a SchoolRole.
     * @example
     * // Update or create a SchoolRole
     * const schoolRole = await prisma.schoolRole.upsert({
     *   create: {
     *     // ... data to create a SchoolRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchoolRole we want to update
     *   }
     * })
     */
    upsert<T extends SchoolRoleUpsertArgs>(args: SelectSubset<T, SchoolRoleUpsertArgs<ExtArgs>>): Prisma__SchoolRoleClient<$Result.GetResult<Prisma.$SchoolRolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SchoolRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolRoleCountArgs} args - Arguments to filter SchoolRoles to count.
     * @example
     * // Count the number of SchoolRoles
     * const count = await prisma.schoolRole.count({
     *   where: {
     *     // ... the filter for the SchoolRoles we want to count
     *   }
     * })
    **/
    count<T extends SchoolRoleCountArgs>(
      args?: Subset<T, SchoolRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchoolRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolRoleAggregateArgs>(args: Subset<T, SchoolRoleAggregateArgs>): Prisma.PrismaPromise<GetSchoolRoleAggregateType<T>>

    /**
     * Group by SchoolRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolRoleGroupByArgs['orderBy'] }
        : { orderBy?: SchoolRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchoolRole model
   */
  readonly fields: SchoolRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchoolRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SchoolRole model
   */ 
  interface SchoolRoleFieldRefs {
    readonly id: FieldRef<"SchoolRole", 'String'>
    readonly schoolId: FieldRef<"SchoolRole", 'String'>
    readonly userId: FieldRef<"SchoolRole", 'String'>
    readonly role: FieldRef<"SchoolRole", 'Role'>
    readonly permissions: FieldRef<"SchoolRole", 'String[]'>
    readonly communicationPermissions: FieldRef<"SchoolRole", 'String[]'>
    readonly assignedBy: FieldRef<"SchoolRole", 'String'>
    readonly createdAt: FieldRef<"SchoolRole", 'DateTime'>
    readonly updatedAt: FieldRef<"SchoolRole", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SchoolRole findUnique
   */
  export type SchoolRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * Filter, which SchoolRole to fetch.
     */
    where: SchoolRoleWhereUniqueInput
  }

  /**
   * SchoolRole findUniqueOrThrow
   */
  export type SchoolRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * Filter, which SchoolRole to fetch.
     */
    where: SchoolRoleWhereUniqueInput
  }

  /**
   * SchoolRole findFirst
   */
  export type SchoolRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * Filter, which SchoolRole to fetch.
     */
    where?: SchoolRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolRoles to fetch.
     */
    orderBy?: SchoolRoleOrderByWithRelationInput | SchoolRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolRoles.
     */
    cursor?: SchoolRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolRoles.
     */
    distinct?: SchoolRoleScalarFieldEnum | SchoolRoleScalarFieldEnum[]
  }

  /**
   * SchoolRole findFirstOrThrow
   */
  export type SchoolRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * Filter, which SchoolRole to fetch.
     */
    where?: SchoolRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolRoles to fetch.
     */
    orderBy?: SchoolRoleOrderByWithRelationInput | SchoolRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolRoles.
     */
    cursor?: SchoolRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolRoles.
     */
    distinct?: SchoolRoleScalarFieldEnum | SchoolRoleScalarFieldEnum[]
  }

  /**
   * SchoolRole findMany
   */
  export type SchoolRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * Filter, which SchoolRoles to fetch.
     */
    where?: SchoolRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolRoles to fetch.
     */
    orderBy?: SchoolRoleOrderByWithRelationInput | SchoolRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchoolRoles.
     */
    cursor?: SchoolRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolRoles.
     */
    skip?: number
    distinct?: SchoolRoleScalarFieldEnum | SchoolRoleScalarFieldEnum[]
  }

  /**
   * SchoolRole create
   */
  export type SchoolRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a SchoolRole.
     */
    data: XOR<SchoolRoleCreateInput, SchoolRoleUncheckedCreateInput>
  }

  /**
   * SchoolRole createMany
   */
  export type SchoolRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchoolRoles.
     */
    data: SchoolRoleCreateManyInput | SchoolRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SchoolRole createManyAndReturn
   */
  export type SchoolRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SchoolRoles.
     */
    data: SchoolRoleCreateManyInput | SchoolRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SchoolRole update
   */
  export type SchoolRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a SchoolRole.
     */
    data: XOR<SchoolRoleUpdateInput, SchoolRoleUncheckedUpdateInput>
    /**
     * Choose, which SchoolRole to update.
     */
    where: SchoolRoleWhereUniqueInput
  }

  /**
   * SchoolRole updateMany
   */
  export type SchoolRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchoolRoles.
     */
    data: XOR<SchoolRoleUpdateManyMutationInput, SchoolRoleUncheckedUpdateManyInput>
    /**
     * Filter which SchoolRoles to update
     */
    where?: SchoolRoleWhereInput
  }

  /**
   * SchoolRole upsert
   */
  export type SchoolRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the SchoolRole to update in case it exists.
     */
    where: SchoolRoleWhereUniqueInput
    /**
     * In case the SchoolRole found by the `where` argument doesn't exist, create a new SchoolRole with this data.
     */
    create: XOR<SchoolRoleCreateInput, SchoolRoleUncheckedCreateInput>
    /**
     * In case the SchoolRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolRoleUpdateInput, SchoolRoleUncheckedUpdateInput>
  }

  /**
   * SchoolRole delete
   */
  export type SchoolRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
    /**
     * Filter which SchoolRole to delete.
     */
    where: SchoolRoleWhereUniqueInput
  }

  /**
   * SchoolRole deleteMany
   */
  export type SchoolRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolRoles to delete
     */
    where?: SchoolRoleWhereInput
  }

  /**
   * SchoolRole without action
   */
  export type SchoolRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolRole
     */
    select?: SchoolRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolRoleInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    name: string | null
    originalName: string | null
    mimeType: string | null
    size: number | null
    url: string | null
    type: $Enums.FileType | null
    category: $Enums.FileCategory | null
    accessLevel: $Enums.FileAccessLevel | null
    provider: $Enums.StorageProvider | null
    ownerId: string | null
    ownerType: $Enums.EntityType | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    originalName: string | null
    mimeType: string | null
    size: number | null
    url: string | null
    type: $Enums.FileType | null
    category: $Enums.FileCategory | null
    accessLevel: $Enums.FileAccessLevel | null
    provider: $Enums.StorageProvider | null
    ownerId: string | null
    ownerType: $Enums.EntityType | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    originalName: number
    mimeType: number
    size: number
    url: number
    type: number
    category: number
    accessLevel: number
    provider: number
    metadata: number
    ownerId: number
    ownerType: number
    accessibleTo: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    originalName?: true
    mimeType?: true
    size?: true
    url?: true
    type?: true
    category?: true
    accessLevel?: true
    provider?: true
    ownerId?: true
    ownerType?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    originalName?: true
    mimeType?: true
    size?: true
    url?: true
    type?: true
    category?: true
    accessLevel?: true
    provider?: true
    ownerId?: true
    ownerType?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    originalName?: true
    mimeType?: true
    size?: true
    url?: true
    type?: true
    category?: true
    accessLevel?: true
    provider?: true
    metadata?: true
    ownerId?: true
    ownerType?: true
    accessibleTo?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    name: string
    originalName: string
    mimeType: string
    size: number
    url: string
    type: $Enums.FileType
    category: $Enums.FileCategory
    accessLevel: $Enums.FileAccessLevel
    provider: $Enums.StorageProvider
    metadata: JsonValue | null
    ownerId: string
    ownerType: $Enums.EntityType
    accessibleTo: string[]
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    url?: boolean
    type?: boolean
    category?: boolean
    accessLevel?: boolean
    provider?: boolean
    metadata?: boolean
    ownerId?: boolean
    ownerType?: boolean
    accessibleTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    quota?: boolean | File$quotaArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    url?: boolean
    type?: boolean
    category?: boolean
    accessLevel?: boolean
    provider?: boolean
    metadata?: boolean
    ownerId?: boolean
    ownerType?: boolean
    accessibleTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    url?: boolean
    type?: boolean
    category?: boolean
    accessLevel?: boolean
    provider?: boolean
    metadata?: boolean
    ownerId?: boolean
    ownerType?: boolean
    accessibleTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quota?: boolean | File$quotaArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      quota: Prisma.$FileQuotaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      originalName: string
      mimeType: string
      size: number
      url: string
      type: $Enums.FileType
      category: $Enums.FileCategory
      accessLevel: $Enums.FileAccessLevel
      provider: $Enums.StorageProvider
      metadata: Prisma.JsonValue | null
      ownerId: string
      ownerType: $Enums.EntityType
      accessibleTo: string[]
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quota<T extends File$quotaArgs<ExtArgs> = {}>(args?: Subset<T, File$quotaArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */ 
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly name: FieldRef<"File", 'String'>
    readonly originalName: FieldRef<"File", 'String'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly url: FieldRef<"File", 'String'>
    readonly type: FieldRef<"File", 'FileType'>
    readonly category: FieldRef<"File", 'FileCategory'>
    readonly accessLevel: FieldRef<"File", 'FileAccessLevel'>
    readonly provider: FieldRef<"File", 'StorageProvider'>
    readonly metadata: FieldRef<"File", 'Json'>
    readonly ownerId: FieldRef<"File", 'String'>
    readonly ownerType: FieldRef<"File", 'EntityType'>
    readonly accessibleTo: FieldRef<"File", 'String[]'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
    readonly deletedAt: FieldRef<"File", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
  }

  /**
   * File.quota
   */
  export type File$quotaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    where?: FileQuotaWhereInput
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model FileQuota
   */

  export type AggregateFileQuota = {
    _count: FileQuotaCountAggregateOutputType | null
    _avg: FileQuotaAvgAggregateOutputType | null
    _sum: FileQuotaSumAggregateOutputType | null
    _min: FileQuotaMinAggregateOutputType | null
    _max: FileQuotaMaxAggregateOutputType | null
  }

  export type FileQuotaAvgAggregateOutputType = {
    totalSize: number | null
    usedSize: number | null
    maxSize: number | null
  }

  export type FileQuotaSumAggregateOutputType = {
    totalSize: number | null
    usedSize: number | null
    maxSize: number | null
  }

  export type FileQuotaMinAggregateOutputType = {
    id: string | null
    fileId: string | null
    totalSize: number | null
    usedSize: number | null
    maxSize: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileQuotaMaxAggregateOutputType = {
    id: string | null
    fileId: string | null
    totalSize: number | null
    usedSize: number | null
    maxSize: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileQuotaCountAggregateOutputType = {
    id: number
    fileId: number
    totalSize: number
    usedSize: number
    maxSize: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FileQuotaAvgAggregateInputType = {
    totalSize?: true
    usedSize?: true
    maxSize?: true
  }

  export type FileQuotaSumAggregateInputType = {
    totalSize?: true
    usedSize?: true
    maxSize?: true
  }

  export type FileQuotaMinAggregateInputType = {
    id?: true
    fileId?: true
    totalSize?: true
    usedSize?: true
    maxSize?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileQuotaMaxAggregateInputType = {
    id?: true
    fileId?: true
    totalSize?: true
    usedSize?: true
    maxSize?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileQuotaCountAggregateInputType = {
    id?: true
    fileId?: true
    totalSize?: true
    usedSize?: true
    maxSize?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FileQuotaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileQuota to aggregate.
     */
    where?: FileQuotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileQuotas to fetch.
     */
    orderBy?: FileQuotaOrderByWithRelationInput | FileQuotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileQuotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileQuotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileQuotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FileQuotas
    **/
    _count?: true | FileQuotaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileQuotaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileQuotaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileQuotaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileQuotaMaxAggregateInputType
  }

  export type GetFileQuotaAggregateType<T extends FileQuotaAggregateArgs> = {
        [P in keyof T & keyof AggregateFileQuota]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFileQuota[P]>
      : GetScalarType<T[P], AggregateFileQuota[P]>
  }




  export type FileQuotaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileQuotaWhereInput
    orderBy?: FileQuotaOrderByWithAggregationInput | FileQuotaOrderByWithAggregationInput[]
    by: FileQuotaScalarFieldEnum[] | FileQuotaScalarFieldEnum
    having?: FileQuotaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileQuotaCountAggregateInputType | true
    _avg?: FileQuotaAvgAggregateInputType
    _sum?: FileQuotaSumAggregateInputType
    _min?: FileQuotaMinAggregateInputType
    _max?: FileQuotaMaxAggregateInputType
  }

  export type FileQuotaGroupByOutputType = {
    id: string
    fileId: string
    totalSize: number
    usedSize: number
    maxSize: number
    createdAt: Date
    updatedAt: Date
    _count: FileQuotaCountAggregateOutputType | null
    _avg: FileQuotaAvgAggregateOutputType | null
    _sum: FileQuotaSumAggregateOutputType | null
    _min: FileQuotaMinAggregateOutputType | null
    _max: FileQuotaMaxAggregateOutputType | null
  }

  type GetFileQuotaGroupByPayload<T extends FileQuotaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileQuotaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileQuotaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileQuotaGroupByOutputType[P]>
            : GetScalarType<T[P], FileQuotaGroupByOutputType[P]>
        }
      >
    >


  export type FileQuotaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileId?: boolean
    totalSize?: boolean
    usedSize?: boolean
    maxSize?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    file?: boolean | FileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileQuota"]>

  export type FileQuotaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileId?: boolean
    totalSize?: boolean
    usedSize?: boolean
    maxSize?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    file?: boolean | FileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileQuota"]>

  export type FileQuotaSelectScalar = {
    id?: boolean
    fileId?: boolean
    totalSize?: boolean
    usedSize?: boolean
    maxSize?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FileQuotaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    file?: boolean | FileDefaultArgs<ExtArgs>
  }
  export type FileQuotaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    file?: boolean | FileDefaultArgs<ExtArgs>
  }

  export type $FileQuotaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FileQuota"
    objects: {
      file: Prisma.$FilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileId: string
      totalSize: number
      usedSize: number
      maxSize: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fileQuota"]>
    composites: {}
  }

  type FileQuotaGetPayload<S extends boolean | null | undefined | FileQuotaDefaultArgs> = $Result.GetResult<Prisma.$FileQuotaPayload, S>

  type FileQuotaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FileQuotaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FileQuotaCountAggregateInputType | true
    }

  export interface FileQuotaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileQuota'], meta: { name: 'FileQuota' } }
    /**
     * Find zero or one FileQuota that matches the filter.
     * @param {FileQuotaFindUniqueArgs} args - Arguments to find a FileQuota
     * @example
     * // Get one FileQuota
     * const fileQuota = await prisma.fileQuota.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileQuotaFindUniqueArgs>(args: SelectSubset<T, FileQuotaFindUniqueArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FileQuota that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FileQuotaFindUniqueOrThrowArgs} args - Arguments to find a FileQuota
     * @example
     * // Get one FileQuota
     * const fileQuota = await prisma.fileQuota.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileQuotaFindUniqueOrThrowArgs>(args: SelectSubset<T, FileQuotaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FileQuota that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileQuotaFindFirstArgs} args - Arguments to find a FileQuota
     * @example
     * // Get one FileQuota
     * const fileQuota = await prisma.fileQuota.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileQuotaFindFirstArgs>(args?: SelectSubset<T, FileQuotaFindFirstArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FileQuota that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileQuotaFindFirstOrThrowArgs} args - Arguments to find a FileQuota
     * @example
     * // Get one FileQuota
     * const fileQuota = await prisma.fileQuota.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileQuotaFindFirstOrThrowArgs>(args?: SelectSubset<T, FileQuotaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FileQuotas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileQuotaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FileQuotas
     * const fileQuotas = await prisma.fileQuota.findMany()
     * 
     * // Get first 10 FileQuotas
     * const fileQuotas = await prisma.fileQuota.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileQuotaWithIdOnly = await prisma.fileQuota.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileQuotaFindManyArgs>(args?: SelectSubset<T, FileQuotaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FileQuota.
     * @param {FileQuotaCreateArgs} args - Arguments to create a FileQuota.
     * @example
     * // Create one FileQuota
     * const FileQuota = await prisma.fileQuota.create({
     *   data: {
     *     // ... data to create a FileQuota
     *   }
     * })
     * 
     */
    create<T extends FileQuotaCreateArgs>(args: SelectSubset<T, FileQuotaCreateArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FileQuotas.
     * @param {FileQuotaCreateManyArgs} args - Arguments to create many FileQuotas.
     * @example
     * // Create many FileQuotas
     * const fileQuota = await prisma.fileQuota.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileQuotaCreateManyArgs>(args?: SelectSubset<T, FileQuotaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FileQuotas and returns the data saved in the database.
     * @param {FileQuotaCreateManyAndReturnArgs} args - Arguments to create many FileQuotas.
     * @example
     * // Create many FileQuotas
     * const fileQuota = await prisma.fileQuota.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FileQuotas and only return the `id`
     * const fileQuotaWithIdOnly = await prisma.fileQuota.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileQuotaCreateManyAndReturnArgs>(args?: SelectSubset<T, FileQuotaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FileQuota.
     * @param {FileQuotaDeleteArgs} args - Arguments to delete one FileQuota.
     * @example
     * // Delete one FileQuota
     * const FileQuota = await prisma.fileQuota.delete({
     *   where: {
     *     // ... filter to delete one FileQuota
     *   }
     * })
     * 
     */
    delete<T extends FileQuotaDeleteArgs>(args: SelectSubset<T, FileQuotaDeleteArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FileQuota.
     * @param {FileQuotaUpdateArgs} args - Arguments to update one FileQuota.
     * @example
     * // Update one FileQuota
     * const fileQuota = await prisma.fileQuota.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileQuotaUpdateArgs>(args: SelectSubset<T, FileQuotaUpdateArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FileQuotas.
     * @param {FileQuotaDeleteManyArgs} args - Arguments to filter FileQuotas to delete.
     * @example
     * // Delete a few FileQuotas
     * const { count } = await prisma.fileQuota.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileQuotaDeleteManyArgs>(args?: SelectSubset<T, FileQuotaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileQuotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileQuotaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FileQuotas
     * const fileQuota = await prisma.fileQuota.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileQuotaUpdateManyArgs>(args: SelectSubset<T, FileQuotaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FileQuota.
     * @param {FileQuotaUpsertArgs} args - Arguments to update or create a FileQuota.
     * @example
     * // Update or create a FileQuota
     * const fileQuota = await prisma.fileQuota.upsert({
     *   create: {
     *     // ... data to create a FileQuota
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FileQuota we want to update
     *   }
     * })
     */
    upsert<T extends FileQuotaUpsertArgs>(args: SelectSubset<T, FileQuotaUpsertArgs<ExtArgs>>): Prisma__FileQuotaClient<$Result.GetResult<Prisma.$FileQuotaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FileQuotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileQuotaCountArgs} args - Arguments to filter FileQuotas to count.
     * @example
     * // Count the number of FileQuotas
     * const count = await prisma.fileQuota.count({
     *   where: {
     *     // ... the filter for the FileQuotas we want to count
     *   }
     * })
    **/
    count<T extends FileQuotaCountArgs>(
      args?: Subset<T, FileQuotaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileQuotaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FileQuota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileQuotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileQuotaAggregateArgs>(args: Subset<T, FileQuotaAggregateArgs>): Prisma.PrismaPromise<GetFileQuotaAggregateType<T>>

    /**
     * Group by FileQuota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileQuotaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileQuotaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileQuotaGroupByArgs['orderBy'] }
        : { orderBy?: FileQuotaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileQuotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileQuotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FileQuota model
   */
  readonly fields: FileQuotaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FileQuota.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileQuotaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    file<T extends FileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FileDefaultArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FileQuota model
   */ 
  interface FileQuotaFieldRefs {
    readonly id: FieldRef<"FileQuota", 'String'>
    readonly fileId: FieldRef<"FileQuota", 'String'>
    readonly totalSize: FieldRef<"FileQuota", 'Int'>
    readonly usedSize: FieldRef<"FileQuota", 'Int'>
    readonly maxSize: FieldRef<"FileQuota", 'Int'>
    readonly createdAt: FieldRef<"FileQuota", 'DateTime'>
    readonly updatedAt: FieldRef<"FileQuota", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FileQuota findUnique
   */
  export type FileQuotaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * Filter, which FileQuota to fetch.
     */
    where: FileQuotaWhereUniqueInput
  }

  /**
   * FileQuota findUniqueOrThrow
   */
  export type FileQuotaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * Filter, which FileQuota to fetch.
     */
    where: FileQuotaWhereUniqueInput
  }

  /**
   * FileQuota findFirst
   */
  export type FileQuotaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * Filter, which FileQuota to fetch.
     */
    where?: FileQuotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileQuotas to fetch.
     */
    orderBy?: FileQuotaOrderByWithRelationInput | FileQuotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileQuotas.
     */
    cursor?: FileQuotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileQuotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileQuotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileQuotas.
     */
    distinct?: FileQuotaScalarFieldEnum | FileQuotaScalarFieldEnum[]
  }

  /**
   * FileQuota findFirstOrThrow
   */
  export type FileQuotaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * Filter, which FileQuota to fetch.
     */
    where?: FileQuotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileQuotas to fetch.
     */
    orderBy?: FileQuotaOrderByWithRelationInput | FileQuotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileQuotas.
     */
    cursor?: FileQuotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileQuotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileQuotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileQuotas.
     */
    distinct?: FileQuotaScalarFieldEnum | FileQuotaScalarFieldEnum[]
  }

  /**
   * FileQuota findMany
   */
  export type FileQuotaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * Filter, which FileQuotas to fetch.
     */
    where?: FileQuotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileQuotas to fetch.
     */
    orderBy?: FileQuotaOrderByWithRelationInput | FileQuotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FileQuotas.
     */
    cursor?: FileQuotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileQuotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileQuotas.
     */
    skip?: number
    distinct?: FileQuotaScalarFieldEnum | FileQuotaScalarFieldEnum[]
  }

  /**
   * FileQuota create
   */
  export type FileQuotaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * The data needed to create a FileQuota.
     */
    data: XOR<FileQuotaCreateInput, FileQuotaUncheckedCreateInput>
  }

  /**
   * FileQuota createMany
   */
  export type FileQuotaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FileQuotas.
     */
    data: FileQuotaCreateManyInput | FileQuotaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FileQuota createManyAndReturn
   */
  export type FileQuotaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FileQuotas.
     */
    data: FileQuotaCreateManyInput | FileQuotaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FileQuota update
   */
  export type FileQuotaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * The data needed to update a FileQuota.
     */
    data: XOR<FileQuotaUpdateInput, FileQuotaUncheckedUpdateInput>
    /**
     * Choose, which FileQuota to update.
     */
    where: FileQuotaWhereUniqueInput
  }

  /**
   * FileQuota updateMany
   */
  export type FileQuotaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FileQuotas.
     */
    data: XOR<FileQuotaUpdateManyMutationInput, FileQuotaUncheckedUpdateManyInput>
    /**
     * Filter which FileQuotas to update
     */
    where?: FileQuotaWhereInput
  }

  /**
   * FileQuota upsert
   */
  export type FileQuotaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * The filter to search for the FileQuota to update in case it exists.
     */
    where: FileQuotaWhereUniqueInput
    /**
     * In case the FileQuota found by the `where` argument doesn't exist, create a new FileQuota with this data.
     */
    create: XOR<FileQuotaCreateInput, FileQuotaUncheckedCreateInput>
    /**
     * In case the FileQuota was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileQuotaUpdateInput, FileQuotaUncheckedUpdateInput>
  }

  /**
   * FileQuota delete
   */
  export type FileQuotaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
    /**
     * Filter which FileQuota to delete.
     */
    where: FileQuotaWhereUniqueInput
  }

  /**
   * FileQuota deleteMany
   */
  export type FileQuotaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileQuotas to delete
     */
    where?: FileQuotaWhereInput
  }

  /**
   * FileQuota without action
   */
  export type FileQuotaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileQuota
     */
    select?: FileQuotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileQuotaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    phone: 'phone',
    roles: 'roles',
    permissions: 'permissions',
    status: 'status',
    kycStatus: 'kycStatus',
    kycVerifiedAt: 'kycVerifiedAt',
    kycDocumentIds: 'kycDocumentIds',
    employmentStatus: 'employmentStatus',
    employmentVerifiedAt: 'employmentVerifiedAt',
    employmentDocumentIds: 'employmentDocumentIds',
    socialAccessEnabled: 'socialAccessEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OTPScalarFieldEnum: {
    id: 'id',
    code: 'code',
    userId: 'userId',
    expiresAt: 'expiresAt',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type OTPScalarFieldEnum = (typeof OTPScalarFieldEnum)[keyof typeof OTPScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const KYCDocumentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    status: 'status',
    documentUrls: 'documentUrls',
    verifiedAt: 'verifiedAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KYCDocumentScalarFieldEnum = (typeof KYCDocumentScalarFieldEnum)[keyof typeof KYCDocumentScalarFieldEnum]


  export const VerificationHistoryScalarFieldEnum: {
    id: 'id',
    entityId: 'entityId',
    entityType: 'entityType',
    status: 'status',
    verifiedBy: 'verifiedBy',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationHistoryScalarFieldEnum = (typeof VerificationHistoryScalarFieldEnum)[keyof typeof VerificationHistoryScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    middleName: 'middleName',
    dateOfBirth: 'dateOfBirth',
    phoneNumber: 'phoneNumber',
    address: 'address',
    gender: 'gender',
    nationality: 'nationality',
    emergencyContact: 'emergencyContact',
    occupation: 'occupation',
    occupationType: 'occupationType',
    employer: 'employer',
    employerDetails: 'employerDetails',
    workAddress: 'workAddress',
    education: 'education',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    settings: 'settings',
    communicationPreferences: 'communicationPreferences',
    lastLoginAt: 'lastLoginAt',
    lastActivityAt: 'lastActivityAt',
    deviceInfo: 'deviceInfo'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const ProfessionalProfileScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    currentPosition: 'currentPosition',
    yearsOfExperience: 'yearsOfExperience',
    workHistory: 'workHistory',
    teachingExperience: 'teachingExperience',
    subjectsQualified: 'subjectsQualified',
    adminExperience: 'adminExperience',
    certifications: 'certifications',
    licenses: 'licenses',
    skills: 'skills',
    specializations: 'specializations',
    achievements: 'achievements',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessionalProfileScalarFieldEnum = (typeof ProfessionalProfileScalarFieldEnum)[keyof typeof ProfessionalProfileScalarFieldEnum]


  export const SchoolScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    registrationNumber: 'registrationNumber',
    license: 'license',
    contact: 'contact',
    address: 'address',
    facilities: 'facilities',
    capacity: 'capacity',
    curriculum: 'curriculum',
    languages: 'languages',
    operatingHours: 'operatingHours',
    termDates: 'termDates',
    verificationStatus: 'verificationStatus',
    verifiedAt: 'verifiedAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    settings: 'settings',
    communicationSettings: 'communicationSettings',
    createdBy: 'createdBy',
    ownershipDetails: 'ownershipDetails',
    systemApproval: 'systemApproval'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const StaffAssignmentScalarFieldEnum: {
    id: 'id',
    staffProfileId: 'staffProfileId',
    schoolId: 'schoolId',
    role: 'role',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffAssignmentScalarFieldEnum = (typeof StaffAssignmentScalarFieldEnum)[keyof typeof StaffAssignmentScalarFieldEnum]


  export const ParentStudentRelationScalarFieldEnum: {
    id: 'id',
    parentProfileId: 'parentProfileId',
    studentProfileId: 'studentProfileId',
    relationship: 'relationship',
    isPrimary: 'isPrimary',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParentStudentRelationScalarFieldEnum = (typeof ParentStudentRelationScalarFieldEnum)[keyof typeof ParentStudentRelationScalarFieldEnum]


  export const ClassSubjectScalarFieldEnum: {
    id: 'id',
    classId: 'classId',
    subjectId: 'subjectId',
    staffProfileId: 'staffProfileId',
    schoolId: 'schoolId',
    schedule: 'schedule',
    syllabus: 'syllabus',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear',
    term: 'term',
    maxStudents: 'maxStudents',
    currentEnrollment: 'currentEnrollment'
  };

  export type ClassSubjectScalarFieldEnum = (typeof ClassSubjectScalarFieldEnum)[keyof typeof ClassSubjectScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    grade: 'grade',
    section: 'section',
    academicYear: 'academicYear',
    capacity: 'capacity',
    schedule: 'schedule',
    schoolId: 'schoolId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    classMasterId: 'classMasterId',
    classMasterHistory: 'classMasterHistory'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const ClassStudentScalarFieldEnum: {
    id: 'id',
    classId: 'classId',
    studentProfileId: 'studentProfileId',
    enrollmentDate: 'enrollmentDate',
    status: 'status',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClassStudentScalarFieldEnum = (typeof ClassStudentScalarFieldEnum)[keyof typeof ClassStudentScalarFieldEnum]


  export const ReportCardScalarFieldEnum: {
    id: 'id',
    studentProfileId: 'studentProfileId',
    schoolId: 'schoolId',
    term: 'term',
    academicYear: 'academicYear',
    teacherComments: 'teacherComments',
    principalComments: 'principalComments',
    attendance: 'attendance',
    status: 'status',
    publishedAt: 'publishedAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReportCardScalarFieldEnum = (typeof ReportCardScalarFieldEnum)[keyof typeof ReportCardScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    id: 'id',
    studentProfileId: 'studentProfileId',
    reportCardId: 'reportCardId',
    subjectId: 'subjectId',
    teacherId: 'teacherId',
    grade: 'grade',
    comments: 'comments',
    assessmentType: 'assessmentType',
    assessmentDate: 'assessmentDate',
    status: 'status',
    staffProfileId: 'staffProfileId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    term: 'term',
    academicYear: 'academicYear',
    weightage: 'weightage'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const StudentProfileScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    admissionNumber: 'admissionNumber',
    enrollmentDate: 'enrollmentDate',
    currentGrade: 'currentGrade',
    previousSchools: 'previousSchools',
    learningProgress: 'learningProgress',
    achievements: 'achievements',
    extracurricular: 'extracurricular',
    specialNeeds: 'specialNeeds',
    medicalInfo: 'medicalInfo',
    dietaryRestrictions: 'dietaryRestrictions',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    currentGPA: 'currentGPA',
    academicStanding: 'academicStanding',
    attendanceRate: 'attendanceRate',
    lastAttendanceDate: 'lastAttendanceDate'
  };

  export type StudentProfileScalarFieldEnum = (typeof StudentProfileScalarFieldEnum)[keyof typeof StudentProfileScalarFieldEnum]


  export const ParentProfileScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    relationship: 'relationship',
    preferredLanguage: 'preferredLanguage',
    communicationPreferences: 'communicationPreferences',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParentProfileScalarFieldEnum = (typeof ParentProfileScalarFieldEnum)[keyof typeof ParentProfileScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    studentProfileId: 'studentProfileId',
    date: 'date',
    status: 'status',
    timeIn: 'timeIn',
    timeOut: 'timeOut',
    reason: 'reason',
    isExcused: 'isExcused',
    notes: 'notes',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    term: 'term',
    academicYear: 'academicYear',
    verifiedBy: 'verifiedBy',
    classMasterId: 'classMasterId',
    classId: 'classId',
    recordedBy: 'recordedBy',
    modifiedBy: 'modifiedBy',
    modifiedAt: 'modifiedAt',
    verificationNotes: 'verificationNotes'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const StaffProfileScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    employeeId: 'employeeId',
    position: 'position',
    department: 'department',
    employmentType: 'employmentType',
    startDate: 'startDate',
    endDate: 'endDate',
    schedule: 'schedule',
    responsibilities: 'responsibilities',
    teachingHours: 'teachingHours',
    specializations: 'specializations'
  };

  export type StaffProfileScalarFieldEnum = (typeof StaffProfileScalarFieldEnum)[keyof typeof StaffProfileScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    category: 'category',
    gradeLevel: 'gradeLevel',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    credits: 'credits',
    prerequisites: 'prerequisites',
    corequisites: 'corequisites',
    learningOutcomes: 'learningOutcomes',
    assessmentCriteria: 'assessmentCriteria'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const SubjectAssignmentScalarFieldEnum: {
    id: 'id',
    subjectId: 'subjectId',
    staffProfileId: 'staffProfileId',
    academicYear: 'academicYear',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubjectAssignmentScalarFieldEnum = (typeof SubjectAssignmentScalarFieldEnum)[keyof typeof SubjectAssignmentScalarFieldEnum]


  export const CommunicationGroupScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    name: 'name',
    type: 'type',
    filters: 'filters',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommunicationGroupScalarFieldEnum = (typeof CommunicationGroupScalarFieldEnum)[keyof typeof CommunicationGroupScalarFieldEnum]


  export const SchoolRoleScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    userId: 'userId',
    role: 'role',
    permissions: 'permissions',
    communicationPermissions: 'communicationPermissions',
    assignedBy: 'assignedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SchoolRoleScalarFieldEnum = (typeof SchoolRoleScalarFieldEnum)[keyof typeof SchoolRoleScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    originalName: 'originalName',
    mimeType: 'mimeType',
    size: 'size',
    url: 'url',
    type: 'type',
    category: 'category',
    accessLevel: 'accessLevel',
    provider: 'provider',
    metadata: 'metadata',
    ownerId: 'ownerId',
    ownerType: 'ownerType',
    accessibleTo: 'accessibleTo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const FileQuotaScalarFieldEnum: {
    id: 'id',
    fileId: 'fileId',
    totalSize: 'totalSize',
    usedSize: 'usedSize',
    maxSize: 'maxSize',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FileQuotaScalarFieldEnum = (typeof FileQuotaScalarFieldEnum)[keyof typeof FileQuotaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'VerificationStatus'
   */
  export type EnumVerificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VerificationStatus'>
    


  /**
   * Reference to a field of type 'VerificationStatus[]'
   */
  export type ListEnumVerificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VerificationStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'EmploymentEligibilityStatus'
   */
  export type EnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentEligibilityStatus'>
    


  /**
   * Reference to a field of type 'EmploymentEligibilityStatus[]'
   */
  export type ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentEligibilityStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'OTPStatus'
   */
  export type EnumOTPStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OTPStatus'>
    


  /**
   * Reference to a field of type 'OTPStatus[]'
   */
  export type ListEnumOTPStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OTPStatus[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'EntityType'
   */
  export type EnumEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntityType'>
    


  /**
   * Reference to a field of type 'EntityType[]'
   */
  export type ListEnumEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntityType[]'>
    


  /**
   * Reference to a field of type 'OccupationType'
   */
  export type EnumOccupationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OccupationType'>
    


  /**
   * Reference to a field of type 'OccupationType[]'
   */
  export type ListEnumOccupationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OccupationType[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ReportCardStatus'
   */
  export type EnumReportCardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportCardStatus'>
    


  /**
   * Reference to a field of type 'ReportCardStatus[]'
   */
  export type ListEnumReportCardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportCardStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'GradeStatus'
   */
  export type EnumGradeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradeStatus'>
    


  /**
   * Reference to a field of type 'GradeStatus[]'
   */
  export type ListEnumGradeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradeStatus[]'>
    


  /**
   * Reference to a field of type 'FileType'
   */
  export type EnumFileTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileType'>
    


  /**
   * Reference to a field of type 'FileType[]'
   */
  export type ListEnumFileTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileType[]'>
    


  /**
   * Reference to a field of type 'FileCategory'
   */
  export type EnumFileCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileCategory'>
    


  /**
   * Reference to a field of type 'FileCategory[]'
   */
  export type ListEnumFileCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileCategory[]'>
    


  /**
   * Reference to a field of type 'FileAccessLevel'
   */
  export type EnumFileAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileAccessLevel'>
    


  /**
   * Reference to a field of type 'FileAccessLevel[]'
   */
  export type ListEnumFileAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileAccessLevel[]'>
    


  /**
   * Reference to a field of type 'StorageProvider'
   */
  export type EnumStorageProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StorageProvider'>
    


  /**
   * Reference to a field of type 'StorageProvider[]'
   */
  export type ListEnumStorageProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StorageProvider[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    roles?: EnumRoleNullableListFilter<"User">
    permissions?: StringNullableListFilter<"User">
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    kycStatus?: EnumVerificationStatusNullableFilter<"User"> | $Enums.VerificationStatus | null
    kycVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    kycDocumentIds?: StringNullableListFilter<"User">
    employmentStatus?: EnumEmploymentEligibilityStatusFilter<"User"> | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    employmentDocumentIds?: StringNullableListFilter<"User">
    socialAccessEnabled?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    documents?: KYCDocumentListRelationFilter
    verifications?: VerificationHistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    phone?: SortOrderInput | SortOrder
    roles?: SortOrder
    permissions?: SortOrder
    status?: SortOrder
    kycStatus?: SortOrderInput | SortOrder
    kycVerifiedAt?: SortOrderInput | SortOrder
    kycDocumentIds?: SortOrder
    employmentStatus?: SortOrder
    employmentVerifiedAt?: SortOrderInput | SortOrder
    employmentDocumentIds?: SortOrder
    socialAccessEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    profile?: ProfileOrderByWithRelationInput
    documents?: KYCDocumentOrderByRelationAggregateInput
    verifications?: VerificationHistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    roles?: EnumRoleNullableListFilter<"User">
    permissions?: StringNullableListFilter<"User">
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    kycStatus?: EnumVerificationStatusNullableFilter<"User"> | $Enums.VerificationStatus | null
    kycVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    kycDocumentIds?: StringNullableListFilter<"User">
    employmentStatus?: EnumEmploymentEligibilityStatusFilter<"User"> | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    employmentDocumentIds?: StringNullableListFilter<"User">
    socialAccessEnabled?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    documents?: KYCDocumentListRelationFilter
    verifications?: VerificationHistoryListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    phone?: SortOrderInput | SortOrder
    roles?: SortOrder
    permissions?: SortOrder
    status?: SortOrder
    kycStatus?: SortOrderInput | SortOrder
    kycVerifiedAt?: SortOrderInput | SortOrder
    kycDocumentIds?: SortOrder
    employmentStatus?: SortOrder
    employmentVerifiedAt?: SortOrderInput | SortOrder
    employmentDocumentIds?: SortOrder
    socialAccessEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    roles?: EnumRoleNullableListFilter<"User">
    permissions?: StringNullableListFilter<"User">
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    kycStatus?: EnumVerificationStatusNullableWithAggregatesFilter<"User"> | $Enums.VerificationStatus | null
    kycVerifiedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    kycDocumentIds?: StringNullableListFilter<"User">
    employmentStatus?: EnumEmploymentEligibilityStatusWithAggregatesFilter<"User"> | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    employmentDocumentIds?: StringNullableListFilter<"User">
    socialAccessEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type OTPWhereInput = {
    AND?: OTPWhereInput | OTPWhereInput[]
    OR?: OTPWhereInput[]
    NOT?: OTPWhereInput | OTPWhereInput[]
    id?: StringFilter<"OTP"> | string
    code?: StringFilter<"OTP"> | string
    userId?: StringFilter<"OTP"> | string
    expiresAt?: DateTimeFilter<"OTP"> | Date | string
    status?: EnumOTPStatusFilter<"OTP"> | $Enums.OTPStatus
    createdAt?: DateTimeFilter<"OTP"> | Date | string
  }

  export type OTPOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type OTPWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OTPWhereInput | OTPWhereInput[]
    OR?: OTPWhereInput[]
    NOT?: OTPWhereInput | OTPWhereInput[]
    code?: StringFilter<"OTP"> | string
    userId?: StringFilter<"OTP"> | string
    expiresAt?: DateTimeFilter<"OTP"> | Date | string
    status?: EnumOTPStatusFilter<"OTP"> | $Enums.OTPStatus
    createdAt?: DateTimeFilter<"OTP"> | Date | string
  }, "id">

  export type OTPOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: OTPCountOrderByAggregateInput
    _max?: OTPMaxOrderByAggregateInput
    _min?: OTPMinOrderByAggregateInput
  }

  export type OTPScalarWhereWithAggregatesInput = {
    AND?: OTPScalarWhereWithAggregatesInput | OTPScalarWhereWithAggregatesInput[]
    OR?: OTPScalarWhereWithAggregatesInput[]
    NOT?: OTPScalarWhereWithAggregatesInput | OTPScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OTP"> | string
    code?: StringWithAggregatesFilter<"OTP"> | string
    userId?: StringWithAggregatesFilter<"OTP"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"OTP"> | Date | string
    status?: EnumOTPStatusWithAggregatesFilter<"OTP"> | $Enums.OTPStatus
    createdAt?: DateTimeWithAggregatesFilter<"OTP"> | Date | string
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
  }, "id" | "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: StringWithAggregatesFilter<"RefreshToken"> | string
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  }

  export type KYCDocumentWhereInput = {
    AND?: KYCDocumentWhereInput | KYCDocumentWhereInput[]
    OR?: KYCDocumentWhereInput[]
    NOT?: KYCDocumentWhereInput | KYCDocumentWhereInput[]
    id?: StringFilter<"KYCDocument"> | string
    userId?: StringFilter<"KYCDocument"> | string
    type?: EnumDocumentTypeFilter<"KYCDocument"> | $Enums.DocumentType
    status?: EnumVerificationStatusFilter<"KYCDocument"> | $Enums.VerificationStatus
    documentUrls?: StringNullableListFilter<"KYCDocument">
    verifiedAt?: DateTimeNullableFilter<"KYCDocument"> | Date | string | null
    metadata?: JsonFilter<"KYCDocument">
    createdAt?: DateTimeFilter<"KYCDocument"> | Date | string
    updatedAt?: DateTimeFilter<"KYCDocument"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type KYCDocumentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    documentUrls?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type KYCDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KYCDocumentWhereInput | KYCDocumentWhereInput[]
    OR?: KYCDocumentWhereInput[]
    NOT?: KYCDocumentWhereInput | KYCDocumentWhereInput[]
    userId?: StringFilter<"KYCDocument"> | string
    type?: EnumDocumentTypeFilter<"KYCDocument"> | $Enums.DocumentType
    status?: EnumVerificationStatusFilter<"KYCDocument"> | $Enums.VerificationStatus
    documentUrls?: StringNullableListFilter<"KYCDocument">
    verifiedAt?: DateTimeNullableFilter<"KYCDocument"> | Date | string | null
    metadata?: JsonFilter<"KYCDocument">
    createdAt?: DateTimeFilter<"KYCDocument"> | Date | string
    updatedAt?: DateTimeFilter<"KYCDocument"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type KYCDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    documentUrls?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KYCDocumentCountOrderByAggregateInput
    _max?: KYCDocumentMaxOrderByAggregateInput
    _min?: KYCDocumentMinOrderByAggregateInput
  }

  export type KYCDocumentScalarWhereWithAggregatesInput = {
    AND?: KYCDocumentScalarWhereWithAggregatesInput | KYCDocumentScalarWhereWithAggregatesInput[]
    OR?: KYCDocumentScalarWhereWithAggregatesInput[]
    NOT?: KYCDocumentScalarWhereWithAggregatesInput | KYCDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KYCDocument"> | string
    userId?: StringWithAggregatesFilter<"KYCDocument"> | string
    type?: EnumDocumentTypeWithAggregatesFilter<"KYCDocument"> | $Enums.DocumentType
    status?: EnumVerificationStatusWithAggregatesFilter<"KYCDocument"> | $Enums.VerificationStatus
    documentUrls?: StringNullableListFilter<"KYCDocument">
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"KYCDocument"> | Date | string | null
    metadata?: JsonWithAggregatesFilter<"KYCDocument">
    createdAt?: DateTimeWithAggregatesFilter<"KYCDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KYCDocument"> | Date | string
  }

  export type VerificationHistoryWhereInput = {
    AND?: VerificationHistoryWhereInput | VerificationHistoryWhereInput[]
    OR?: VerificationHistoryWhereInput[]
    NOT?: VerificationHistoryWhereInput | VerificationHistoryWhereInput[]
    id?: StringFilter<"VerificationHistory"> | string
    entityId?: StringFilter<"VerificationHistory"> | string
    entityType?: EnumEntityTypeFilter<"VerificationHistory"> | $Enums.EntityType
    status?: EnumVerificationStatusFilter<"VerificationHistory"> | $Enums.VerificationStatus
    verifiedBy?: StringNullableFilter<"VerificationHistory"> | string | null
    notes?: StringNullableFilter<"VerificationHistory"> | string | null
    createdAt?: DateTimeFilter<"VerificationHistory"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationHistory"> | Date | string
    verifier?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type VerificationHistoryOrderByWithRelationInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    verifier?: UserOrderByWithRelationInput
  }

  export type VerificationHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationHistoryWhereInput | VerificationHistoryWhereInput[]
    OR?: VerificationHistoryWhereInput[]
    NOT?: VerificationHistoryWhereInput | VerificationHistoryWhereInput[]
    entityId?: StringFilter<"VerificationHistory"> | string
    entityType?: EnumEntityTypeFilter<"VerificationHistory"> | $Enums.EntityType
    status?: EnumVerificationStatusFilter<"VerificationHistory"> | $Enums.VerificationStatus
    verifiedBy?: StringNullableFilter<"VerificationHistory"> | string | null
    notes?: StringNullableFilter<"VerificationHistory"> | string | null
    createdAt?: DateTimeFilter<"VerificationHistory"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationHistory"> | Date | string
    verifier?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type VerificationHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationHistoryCountOrderByAggregateInput
    _max?: VerificationHistoryMaxOrderByAggregateInput
    _min?: VerificationHistoryMinOrderByAggregateInput
  }

  export type VerificationHistoryScalarWhereWithAggregatesInput = {
    AND?: VerificationHistoryScalarWhereWithAggregatesInput | VerificationHistoryScalarWhereWithAggregatesInput[]
    OR?: VerificationHistoryScalarWhereWithAggregatesInput[]
    NOT?: VerificationHistoryScalarWhereWithAggregatesInput | VerificationHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VerificationHistory"> | string
    entityId?: StringWithAggregatesFilter<"VerificationHistory"> | string
    entityType?: EnumEntityTypeWithAggregatesFilter<"VerificationHistory"> | $Enums.EntityType
    status?: EnumVerificationStatusWithAggregatesFilter<"VerificationHistory"> | $Enums.VerificationStatus
    verifiedBy?: StringNullableWithAggregatesFilter<"VerificationHistory"> | string | null
    notes?: StringNullableWithAggregatesFilter<"VerificationHistory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"VerificationHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VerificationHistory"> | Date | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    userId?: StringFilter<"Profile"> | string
    firstName?: StringFilter<"Profile"> | string
    lastName?: StringFilter<"Profile"> | string
    middleName?: StringNullableFilter<"Profile"> | string | null
    dateOfBirth?: DateTimeFilter<"Profile"> | Date | string
    phoneNumber?: StringNullableFilter<"Profile"> | string | null
    address?: JsonNullableFilter<"Profile">
    gender?: StringNullableFilter<"Profile"> | string | null
    nationality?: StringNullableFilter<"Profile"> | string | null
    emergencyContact?: JsonNullableFilter<"Profile">
    occupation?: StringNullableFilter<"Profile"> | string | null
    occupationType?: EnumOccupationTypeNullableFilter<"Profile"> | $Enums.OccupationType | null
    employer?: StringNullableFilter<"Profile"> | string | null
    employerDetails?: JsonNullableFilter<"Profile">
    workAddress?: JsonNullableFilter<"Profile">
    education?: JsonNullableListFilter<"Profile">
    metadata?: JsonNullableFilter<"Profile">
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    settings?: JsonNullableFilter<"Profile">
    communicationPreferences?: JsonNullableFilter<"Profile">
    lastLoginAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    lastActivityAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    deviceInfo?: JsonNullableFilter<"Profile">
    user?: XOR<UserRelationFilter, UserWhereInput>
    professionalProfile?: XOR<ProfessionalProfileNullableRelationFilter, ProfessionalProfileWhereInput> | null
    studentProfile?: XOR<StudentProfileNullableRelationFilter, StudentProfileWhereInput> | null
    parentProfile?: XOR<ParentProfileNullableRelationFilter, ParentProfileWhereInput> | null
    staffProfile?: XOR<StaffProfileNullableRelationFilter, StaffProfileWhereInput> | null
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    occupationType?: SortOrderInput | SortOrder
    employer?: SortOrderInput | SortOrder
    employerDetails?: SortOrderInput | SortOrder
    workAddress?: SortOrderInput | SortOrder
    education?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    settings?: SortOrderInput | SortOrder
    communicationPreferences?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastActivityAt?: SortOrderInput | SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    professionalProfile?: ProfessionalProfileOrderByWithRelationInput
    studentProfile?: StudentProfileOrderByWithRelationInput
    parentProfile?: ParentProfileOrderByWithRelationInput
    staffProfile?: StaffProfileOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    firstName?: StringFilter<"Profile"> | string
    lastName?: StringFilter<"Profile"> | string
    middleName?: StringNullableFilter<"Profile"> | string | null
    dateOfBirth?: DateTimeFilter<"Profile"> | Date | string
    phoneNumber?: StringNullableFilter<"Profile"> | string | null
    address?: JsonNullableFilter<"Profile">
    gender?: StringNullableFilter<"Profile"> | string | null
    nationality?: StringNullableFilter<"Profile"> | string | null
    emergencyContact?: JsonNullableFilter<"Profile">
    occupation?: StringNullableFilter<"Profile"> | string | null
    occupationType?: EnumOccupationTypeNullableFilter<"Profile"> | $Enums.OccupationType | null
    employer?: StringNullableFilter<"Profile"> | string | null
    employerDetails?: JsonNullableFilter<"Profile">
    workAddress?: JsonNullableFilter<"Profile">
    education?: JsonNullableListFilter<"Profile">
    metadata?: JsonNullableFilter<"Profile">
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    settings?: JsonNullableFilter<"Profile">
    communicationPreferences?: JsonNullableFilter<"Profile">
    lastLoginAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    lastActivityAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    deviceInfo?: JsonNullableFilter<"Profile">
    user?: XOR<UserRelationFilter, UserWhereInput>
    professionalProfile?: XOR<ProfessionalProfileNullableRelationFilter, ProfessionalProfileWhereInput> | null
    studentProfile?: XOR<StudentProfileNullableRelationFilter, StudentProfileWhereInput> | null
    parentProfile?: XOR<ParentProfileNullableRelationFilter, ParentProfileWhereInput> | null
    staffProfile?: XOR<StaffProfileNullableRelationFilter, StaffProfileWhereInput> | null
  }, "id" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    occupationType?: SortOrderInput | SortOrder
    employer?: SortOrderInput | SortOrder
    employerDetails?: SortOrderInput | SortOrder
    workAddress?: SortOrderInput | SortOrder
    education?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    settings?: SortOrderInput | SortOrder
    communicationPreferences?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastActivityAt?: SortOrderInput | SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    userId?: StringWithAggregatesFilter<"Profile"> | string
    firstName?: StringWithAggregatesFilter<"Profile"> | string
    lastName?: StringWithAggregatesFilter<"Profile"> | string
    middleName?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    dateOfBirth?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    phoneNumber?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    address?: JsonNullableWithAggregatesFilter<"Profile">
    gender?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    nationality?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    emergencyContact?: JsonNullableWithAggregatesFilter<"Profile">
    occupation?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    occupationType?: EnumOccupationTypeNullableWithAggregatesFilter<"Profile"> | $Enums.OccupationType | null
    employer?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    employerDetails?: JsonNullableWithAggregatesFilter<"Profile">
    workAddress?: JsonNullableWithAggregatesFilter<"Profile">
    education?: JsonNullableListFilter<"Profile">
    metadata?: JsonNullableWithAggregatesFilter<"Profile">
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    settings?: JsonNullableWithAggregatesFilter<"Profile">
    communicationPreferences?: JsonNullableWithAggregatesFilter<"Profile">
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    lastActivityAt?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    deviceInfo?: JsonNullableWithAggregatesFilter<"Profile">
  }

  export type ProfessionalProfileWhereInput = {
    AND?: ProfessionalProfileWhereInput | ProfessionalProfileWhereInput[]
    OR?: ProfessionalProfileWhereInput[]
    NOT?: ProfessionalProfileWhereInput | ProfessionalProfileWhereInput[]
    id?: StringFilter<"ProfessionalProfile"> | string
    profileId?: StringFilter<"ProfessionalProfile"> | string
    currentPosition?: StringNullableFilter<"ProfessionalProfile"> | string | null
    yearsOfExperience?: IntNullableFilter<"ProfessionalProfile"> | number | null
    workHistory?: JsonNullableListFilter<"ProfessionalProfile">
    teachingExperience?: JsonNullableFilter<"ProfessionalProfile">
    subjectsQualified?: StringNullableListFilter<"ProfessionalProfile">
    adminExperience?: JsonNullableFilter<"ProfessionalProfile">
    certifications?: JsonNullableListFilter<"ProfessionalProfile">
    licenses?: JsonNullableListFilter<"ProfessionalProfile">
    skills?: StringNullableListFilter<"ProfessionalProfile">
    specializations?: StringNullableListFilter<"ProfessionalProfile">
    achievements?: JsonNullableListFilter<"ProfessionalProfile">
    metadata?: JsonNullableFilter<"ProfessionalProfile">
    createdAt?: DateTimeFilter<"ProfessionalProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalProfile"> | Date | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
  }

  export type ProfessionalProfileOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    currentPosition?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrderInput | SortOrder
    workHistory?: SortOrder
    teachingExperience?: SortOrderInput | SortOrder
    subjectsQualified?: SortOrder
    adminExperience?: SortOrderInput | SortOrder
    certifications?: SortOrder
    licenses?: SortOrder
    skills?: SortOrder
    specializations?: SortOrder
    achievements?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: ProfileOrderByWithRelationInput
  }

  export type ProfessionalProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    profileId?: string
    AND?: ProfessionalProfileWhereInput | ProfessionalProfileWhereInput[]
    OR?: ProfessionalProfileWhereInput[]
    NOT?: ProfessionalProfileWhereInput | ProfessionalProfileWhereInput[]
    currentPosition?: StringNullableFilter<"ProfessionalProfile"> | string | null
    yearsOfExperience?: IntNullableFilter<"ProfessionalProfile"> | number | null
    workHistory?: JsonNullableListFilter<"ProfessionalProfile">
    teachingExperience?: JsonNullableFilter<"ProfessionalProfile">
    subjectsQualified?: StringNullableListFilter<"ProfessionalProfile">
    adminExperience?: JsonNullableFilter<"ProfessionalProfile">
    certifications?: JsonNullableListFilter<"ProfessionalProfile">
    licenses?: JsonNullableListFilter<"ProfessionalProfile">
    skills?: StringNullableListFilter<"ProfessionalProfile">
    specializations?: StringNullableListFilter<"ProfessionalProfile">
    achievements?: JsonNullableListFilter<"ProfessionalProfile">
    metadata?: JsonNullableFilter<"ProfessionalProfile">
    createdAt?: DateTimeFilter<"ProfessionalProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalProfile"> | Date | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
  }, "id" | "profileId">

  export type ProfessionalProfileOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    currentPosition?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrderInput | SortOrder
    workHistory?: SortOrder
    teachingExperience?: SortOrderInput | SortOrder
    subjectsQualified?: SortOrder
    adminExperience?: SortOrderInput | SortOrder
    certifications?: SortOrder
    licenses?: SortOrder
    skills?: SortOrder
    specializations?: SortOrder
    achievements?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessionalProfileCountOrderByAggregateInput
    _avg?: ProfessionalProfileAvgOrderByAggregateInput
    _max?: ProfessionalProfileMaxOrderByAggregateInput
    _min?: ProfessionalProfileMinOrderByAggregateInput
    _sum?: ProfessionalProfileSumOrderByAggregateInput
  }

  export type ProfessionalProfileScalarWhereWithAggregatesInput = {
    AND?: ProfessionalProfileScalarWhereWithAggregatesInput | ProfessionalProfileScalarWhereWithAggregatesInput[]
    OR?: ProfessionalProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfessionalProfileScalarWhereWithAggregatesInput | ProfessionalProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionalProfile"> | string
    profileId?: StringWithAggregatesFilter<"ProfessionalProfile"> | string
    currentPosition?: StringNullableWithAggregatesFilter<"ProfessionalProfile"> | string | null
    yearsOfExperience?: IntNullableWithAggregatesFilter<"ProfessionalProfile"> | number | null
    workHistory?: JsonNullableListFilter<"ProfessionalProfile">
    teachingExperience?: JsonNullableWithAggregatesFilter<"ProfessionalProfile">
    subjectsQualified?: StringNullableListFilter<"ProfessionalProfile">
    adminExperience?: JsonNullableWithAggregatesFilter<"ProfessionalProfile">
    certifications?: JsonNullableListFilter<"ProfessionalProfile">
    licenses?: JsonNullableListFilter<"ProfessionalProfile">
    skills?: StringNullableListFilter<"ProfessionalProfile">
    specializations?: StringNullableListFilter<"ProfessionalProfile">
    achievements?: JsonNullableListFilter<"ProfessionalProfile">
    metadata?: JsonNullableWithAggregatesFilter<"ProfessionalProfile">
    createdAt?: DateTimeWithAggregatesFilter<"ProfessionalProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfessionalProfile"> | Date | string
  }

  export type SchoolWhereInput = {
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    id?: StringFilter<"School"> | string
    name?: StringFilter<"School"> | string
    type?: StringFilter<"School"> | string
    registrationNumber?: StringFilter<"School"> | string
    license?: JsonFilter<"School">
    contact?: JsonFilter<"School">
    address?: JsonFilter<"School">
    facilities?: StringNullableListFilter<"School">
    capacity?: IntFilter<"School"> | number
    curriculum?: StringNullableListFilter<"School">
    languages?: StringNullableListFilter<"School">
    operatingHours?: JsonFilter<"School">
    termDates?: JsonNullableListFilter<"School">
    verificationStatus?: EnumVerificationStatusFilter<"School"> | $Enums.VerificationStatus
    verifiedAt?: DateTimeNullableFilter<"School"> | Date | string | null
    metadata?: JsonNullableFilter<"School">
    createdAt?: DateTimeFilter<"School"> | Date | string
    updatedAt?: DateTimeFilter<"School"> | Date | string
    status?: StringFilter<"School"> | string
    settings?: JsonNullableFilter<"School">
    communicationSettings?: JsonNullableFilter<"School">
    createdBy?: StringFilter<"School"> | string
    ownershipDetails?: JsonFilter<"School">
    systemApproval?: JsonNullableFilter<"School">
    staffAssignments?: StaffAssignmentListRelationFilter
    reportCards?: ReportCardListRelationFilter
    classSubjects?: ClassSubjectListRelationFilter
    classes?: ClassListRelationFilter
    communicationGroups?: CommunicationGroupListRelationFilter
    schoolRoles?: SchoolRoleListRelationFilter
  }

  export type SchoolOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    registrationNumber?: SortOrder
    license?: SortOrder
    contact?: SortOrder
    address?: SortOrder
    facilities?: SortOrder
    capacity?: SortOrder
    curriculum?: SortOrder
    languages?: SortOrder
    operatingHours?: SortOrder
    termDates?: SortOrder
    verificationStatus?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    settings?: SortOrderInput | SortOrder
    communicationSettings?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    ownershipDetails?: SortOrder
    systemApproval?: SortOrderInput | SortOrder
    staffAssignments?: StaffAssignmentOrderByRelationAggregateInput
    reportCards?: ReportCardOrderByRelationAggregateInput
    classSubjects?: ClassSubjectOrderByRelationAggregateInput
    classes?: ClassOrderByRelationAggregateInput
    communicationGroups?: CommunicationGroupOrderByRelationAggregateInput
    schoolRoles?: SchoolRoleOrderByRelationAggregateInput
  }

  export type SchoolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    registrationNumber?: string
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    name?: StringFilter<"School"> | string
    type?: StringFilter<"School"> | string
    license?: JsonFilter<"School">
    contact?: JsonFilter<"School">
    address?: JsonFilter<"School">
    facilities?: StringNullableListFilter<"School">
    capacity?: IntFilter<"School"> | number
    curriculum?: StringNullableListFilter<"School">
    languages?: StringNullableListFilter<"School">
    operatingHours?: JsonFilter<"School">
    termDates?: JsonNullableListFilter<"School">
    verificationStatus?: EnumVerificationStatusFilter<"School"> | $Enums.VerificationStatus
    verifiedAt?: DateTimeNullableFilter<"School"> | Date | string | null
    metadata?: JsonNullableFilter<"School">
    createdAt?: DateTimeFilter<"School"> | Date | string
    updatedAt?: DateTimeFilter<"School"> | Date | string
    status?: StringFilter<"School"> | string
    settings?: JsonNullableFilter<"School">
    communicationSettings?: JsonNullableFilter<"School">
    createdBy?: StringFilter<"School"> | string
    ownershipDetails?: JsonFilter<"School">
    systemApproval?: JsonNullableFilter<"School">
    staffAssignments?: StaffAssignmentListRelationFilter
    reportCards?: ReportCardListRelationFilter
    classSubjects?: ClassSubjectListRelationFilter
    classes?: ClassListRelationFilter
    communicationGroups?: CommunicationGroupListRelationFilter
    schoolRoles?: SchoolRoleListRelationFilter
  }, "id" | "registrationNumber">

  export type SchoolOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    registrationNumber?: SortOrder
    license?: SortOrder
    contact?: SortOrder
    address?: SortOrder
    facilities?: SortOrder
    capacity?: SortOrder
    curriculum?: SortOrder
    languages?: SortOrder
    operatingHours?: SortOrder
    termDates?: SortOrder
    verificationStatus?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    settings?: SortOrderInput | SortOrder
    communicationSettings?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    ownershipDetails?: SortOrder
    systemApproval?: SortOrderInput | SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _avg?: SchoolAvgOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
    _sum?: SchoolSumOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    OR?: SchoolScalarWhereWithAggregatesInput[]
    NOT?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"School"> | string
    name?: StringWithAggregatesFilter<"School"> | string
    type?: StringWithAggregatesFilter<"School"> | string
    registrationNumber?: StringWithAggregatesFilter<"School"> | string
    license?: JsonWithAggregatesFilter<"School">
    contact?: JsonWithAggregatesFilter<"School">
    address?: JsonWithAggregatesFilter<"School">
    facilities?: StringNullableListFilter<"School">
    capacity?: IntWithAggregatesFilter<"School"> | number
    curriculum?: StringNullableListFilter<"School">
    languages?: StringNullableListFilter<"School">
    operatingHours?: JsonWithAggregatesFilter<"School">
    termDates?: JsonNullableListFilter<"School">
    verificationStatus?: EnumVerificationStatusWithAggregatesFilter<"School"> | $Enums.VerificationStatus
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"School"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"School">
    createdAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
    status?: StringWithAggregatesFilter<"School"> | string
    settings?: JsonNullableWithAggregatesFilter<"School">
    communicationSettings?: JsonNullableWithAggregatesFilter<"School">
    createdBy?: StringWithAggregatesFilter<"School"> | string
    ownershipDetails?: JsonWithAggregatesFilter<"School">
    systemApproval?: JsonNullableWithAggregatesFilter<"School">
  }

  export type StaffAssignmentWhereInput = {
    AND?: StaffAssignmentWhereInput | StaffAssignmentWhereInput[]
    OR?: StaffAssignmentWhereInput[]
    NOT?: StaffAssignmentWhereInput | StaffAssignmentWhereInput[]
    id?: StringFilter<"StaffAssignment"> | string
    staffProfileId?: StringFilter<"StaffAssignment"> | string
    schoolId?: StringFilter<"StaffAssignment"> | string
    role?: EnumRoleFilter<"StaffAssignment"> | $Enums.Role
    startDate?: DateTimeFilter<"StaffAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"StaffAssignment"> | Date | string | null
    isActive?: BoolFilter<"StaffAssignment"> | boolean
    metadata?: JsonNullableFilter<"StaffAssignment">
    createdAt?: DateTimeFilter<"StaffAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"StaffAssignment"> | Date | string
    staffProfile?: XOR<StaffProfileRelationFilter, StaffProfileWhereInput>
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }

  export type StaffAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staffProfile?: StaffProfileOrderByWithRelationInput
    school?: SchoolOrderByWithRelationInput
  }

  export type StaffAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    staffProfileId_schoolId_role?: StaffAssignmentStaffProfileIdSchoolIdRoleCompoundUniqueInput
    AND?: StaffAssignmentWhereInput | StaffAssignmentWhereInput[]
    OR?: StaffAssignmentWhereInput[]
    NOT?: StaffAssignmentWhereInput | StaffAssignmentWhereInput[]
    staffProfileId?: StringFilter<"StaffAssignment"> | string
    schoolId?: StringFilter<"StaffAssignment"> | string
    role?: EnumRoleFilter<"StaffAssignment"> | $Enums.Role
    startDate?: DateTimeFilter<"StaffAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"StaffAssignment"> | Date | string | null
    isActive?: BoolFilter<"StaffAssignment"> | boolean
    metadata?: JsonNullableFilter<"StaffAssignment">
    createdAt?: DateTimeFilter<"StaffAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"StaffAssignment"> | Date | string
    staffProfile?: XOR<StaffProfileRelationFilter, StaffProfileWhereInput>
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }, "id" | "staffProfileId_schoolId_role">

  export type StaffAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffAssignmentCountOrderByAggregateInput
    _max?: StaffAssignmentMaxOrderByAggregateInput
    _min?: StaffAssignmentMinOrderByAggregateInput
  }

  export type StaffAssignmentScalarWhereWithAggregatesInput = {
    AND?: StaffAssignmentScalarWhereWithAggregatesInput | StaffAssignmentScalarWhereWithAggregatesInput[]
    OR?: StaffAssignmentScalarWhereWithAggregatesInput[]
    NOT?: StaffAssignmentScalarWhereWithAggregatesInput | StaffAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StaffAssignment"> | string
    staffProfileId?: StringWithAggregatesFilter<"StaffAssignment"> | string
    schoolId?: StringWithAggregatesFilter<"StaffAssignment"> | string
    role?: EnumRoleWithAggregatesFilter<"StaffAssignment"> | $Enums.Role
    startDate?: DateTimeWithAggregatesFilter<"StaffAssignment"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"StaffAssignment"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"StaffAssignment"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"StaffAssignment">
    createdAt?: DateTimeWithAggregatesFilter<"StaffAssignment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StaffAssignment"> | Date | string
  }

  export type ParentStudentRelationWhereInput = {
    AND?: ParentStudentRelationWhereInput | ParentStudentRelationWhereInput[]
    OR?: ParentStudentRelationWhereInput[]
    NOT?: ParentStudentRelationWhereInput | ParentStudentRelationWhereInput[]
    id?: StringFilter<"ParentStudentRelation"> | string
    parentProfileId?: StringFilter<"ParentStudentRelation"> | string
    studentProfileId?: StringFilter<"ParentStudentRelation"> | string
    relationship?: StringFilter<"ParentStudentRelation"> | string
    isPrimary?: BoolFilter<"ParentStudentRelation"> | boolean
    metadata?: JsonNullableFilter<"ParentStudentRelation">
    createdAt?: DateTimeFilter<"ParentStudentRelation"> | Date | string
    updatedAt?: DateTimeFilter<"ParentStudentRelation"> | Date | string
    parentProfile?: XOR<ParentProfileRelationFilter, ParentProfileWhereInput>
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
  }

  export type ParentStudentRelationOrderByWithRelationInput = {
    id?: SortOrder
    parentProfileId?: SortOrder
    studentProfileId?: SortOrder
    relationship?: SortOrder
    isPrimary?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentProfile?: ParentProfileOrderByWithRelationInput
    studentProfile?: StudentProfileOrderByWithRelationInput
  }

  export type ParentStudentRelationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    parentProfileId_studentProfileId?: ParentStudentRelationParentProfileIdStudentProfileIdCompoundUniqueInput
    AND?: ParentStudentRelationWhereInput | ParentStudentRelationWhereInput[]
    OR?: ParentStudentRelationWhereInput[]
    NOT?: ParentStudentRelationWhereInput | ParentStudentRelationWhereInput[]
    parentProfileId?: StringFilter<"ParentStudentRelation"> | string
    studentProfileId?: StringFilter<"ParentStudentRelation"> | string
    relationship?: StringFilter<"ParentStudentRelation"> | string
    isPrimary?: BoolFilter<"ParentStudentRelation"> | boolean
    metadata?: JsonNullableFilter<"ParentStudentRelation">
    createdAt?: DateTimeFilter<"ParentStudentRelation"> | Date | string
    updatedAt?: DateTimeFilter<"ParentStudentRelation"> | Date | string
    parentProfile?: XOR<ParentProfileRelationFilter, ParentProfileWhereInput>
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
  }, "id" | "parentProfileId_studentProfileId">

  export type ParentStudentRelationOrderByWithAggregationInput = {
    id?: SortOrder
    parentProfileId?: SortOrder
    studentProfileId?: SortOrder
    relationship?: SortOrder
    isPrimary?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParentStudentRelationCountOrderByAggregateInput
    _max?: ParentStudentRelationMaxOrderByAggregateInput
    _min?: ParentStudentRelationMinOrderByAggregateInput
  }

  export type ParentStudentRelationScalarWhereWithAggregatesInput = {
    AND?: ParentStudentRelationScalarWhereWithAggregatesInput | ParentStudentRelationScalarWhereWithAggregatesInput[]
    OR?: ParentStudentRelationScalarWhereWithAggregatesInput[]
    NOT?: ParentStudentRelationScalarWhereWithAggregatesInput | ParentStudentRelationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ParentStudentRelation"> | string
    parentProfileId?: StringWithAggregatesFilter<"ParentStudentRelation"> | string
    studentProfileId?: StringWithAggregatesFilter<"ParentStudentRelation"> | string
    relationship?: StringWithAggregatesFilter<"ParentStudentRelation"> | string
    isPrimary?: BoolWithAggregatesFilter<"ParentStudentRelation"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"ParentStudentRelation">
    createdAt?: DateTimeWithAggregatesFilter<"ParentStudentRelation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ParentStudentRelation"> | Date | string
  }

  export type ClassSubjectWhereInput = {
    AND?: ClassSubjectWhereInput | ClassSubjectWhereInput[]
    OR?: ClassSubjectWhereInput[]
    NOT?: ClassSubjectWhereInput | ClassSubjectWhereInput[]
    id?: StringFilter<"ClassSubject"> | string
    classId?: StringFilter<"ClassSubject"> | string
    subjectId?: StringFilter<"ClassSubject"> | string
    staffProfileId?: StringFilter<"ClassSubject"> | string
    schoolId?: StringFilter<"ClassSubject"> | string
    schedule?: JsonFilter<"ClassSubject">
    syllabus?: JsonNullableFilter<"ClassSubject">
    metadata?: JsonNullableFilter<"ClassSubject">
    createdAt?: DateTimeFilter<"ClassSubject"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSubject"> | Date | string
    academicYear?: StringFilter<"ClassSubject"> | string
    term?: StringFilter<"ClassSubject"> | string
    maxStudents?: IntNullableFilter<"ClassSubject"> | number | null
    currentEnrollment?: IntFilter<"ClassSubject"> | number
    class?: XOR<ClassRelationFilter, ClassWhereInput>
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    staffProfile?: XOR<StaffProfileRelationFilter, StaffProfileWhereInput>
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }

  export type ClassSubjectOrderByWithRelationInput = {
    id?: SortOrder
    classId?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    schedule?: SortOrder
    syllabus?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    term?: SortOrder
    maxStudents?: SortOrderInput | SortOrder
    currentEnrollment?: SortOrder
    class?: ClassOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    staffProfile?: StaffProfileOrderByWithRelationInput
    school?: SchoolOrderByWithRelationInput
  }

  export type ClassSubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    classId_subjectId_academicYear?: ClassSubjectClassIdSubjectIdAcademicYearCompoundUniqueInput
    AND?: ClassSubjectWhereInput | ClassSubjectWhereInput[]
    OR?: ClassSubjectWhereInput[]
    NOT?: ClassSubjectWhereInput | ClassSubjectWhereInput[]
    classId?: StringFilter<"ClassSubject"> | string
    subjectId?: StringFilter<"ClassSubject"> | string
    staffProfileId?: StringFilter<"ClassSubject"> | string
    schoolId?: StringFilter<"ClassSubject"> | string
    schedule?: JsonFilter<"ClassSubject">
    syllabus?: JsonNullableFilter<"ClassSubject">
    metadata?: JsonNullableFilter<"ClassSubject">
    createdAt?: DateTimeFilter<"ClassSubject"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSubject"> | Date | string
    academicYear?: StringFilter<"ClassSubject"> | string
    term?: StringFilter<"ClassSubject"> | string
    maxStudents?: IntNullableFilter<"ClassSubject"> | number | null
    currentEnrollment?: IntFilter<"ClassSubject"> | number
    class?: XOR<ClassRelationFilter, ClassWhereInput>
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    staffProfile?: XOR<StaffProfileRelationFilter, StaffProfileWhereInput>
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }, "id" | "classId_subjectId_academicYear">

  export type ClassSubjectOrderByWithAggregationInput = {
    id?: SortOrder
    classId?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    schedule?: SortOrder
    syllabus?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    term?: SortOrder
    maxStudents?: SortOrderInput | SortOrder
    currentEnrollment?: SortOrder
    _count?: ClassSubjectCountOrderByAggregateInput
    _avg?: ClassSubjectAvgOrderByAggregateInput
    _max?: ClassSubjectMaxOrderByAggregateInput
    _min?: ClassSubjectMinOrderByAggregateInput
    _sum?: ClassSubjectSumOrderByAggregateInput
  }

  export type ClassSubjectScalarWhereWithAggregatesInput = {
    AND?: ClassSubjectScalarWhereWithAggregatesInput | ClassSubjectScalarWhereWithAggregatesInput[]
    OR?: ClassSubjectScalarWhereWithAggregatesInput[]
    NOT?: ClassSubjectScalarWhereWithAggregatesInput | ClassSubjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClassSubject"> | string
    classId?: StringWithAggregatesFilter<"ClassSubject"> | string
    subjectId?: StringWithAggregatesFilter<"ClassSubject"> | string
    staffProfileId?: StringWithAggregatesFilter<"ClassSubject"> | string
    schoolId?: StringWithAggregatesFilter<"ClassSubject"> | string
    schedule?: JsonWithAggregatesFilter<"ClassSubject">
    syllabus?: JsonNullableWithAggregatesFilter<"ClassSubject">
    metadata?: JsonNullableWithAggregatesFilter<"ClassSubject">
    createdAt?: DateTimeWithAggregatesFilter<"ClassSubject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClassSubject"> | Date | string
    academicYear?: StringWithAggregatesFilter<"ClassSubject"> | string
    term?: StringWithAggregatesFilter<"ClassSubject"> | string
    maxStudents?: IntNullableWithAggregatesFilter<"ClassSubject"> | number | null
    currentEnrollment?: IntWithAggregatesFilter<"ClassSubject"> | number
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    grade?: StringFilter<"Class"> | string
    section?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringFilter<"Class"> | string
    capacity?: IntFilter<"Class"> | number
    schedule?: JsonFilter<"Class">
    schoolId?: StringFilter<"Class"> | string
    metadata?: JsonNullableFilter<"Class">
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updatedAt?: DateTimeFilter<"Class"> | Date | string
    classMasterId?: StringNullableFilter<"Class"> | string | null
    classMasterHistory?: JsonNullableListFilter<"Class">
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    classSubjects?: ClassSubjectListRelationFilter
    students?: ClassStudentListRelationFilter
    attendance?: AttendanceListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    section?: SortOrderInput | SortOrder
    academicYear?: SortOrder
    capacity?: SortOrder
    schedule?: SortOrder
    schoolId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    classMasterId?: SortOrderInput | SortOrder
    classMasterHistory?: SortOrder
    school?: SchoolOrderByWithRelationInput
    classSubjects?: ClassSubjectOrderByRelationAggregateInput
    students?: ClassStudentOrderByRelationAggregateInput
    attendance?: AttendanceOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    schoolId_name_academicYear?: ClassSchoolIdNameAcademicYearCompoundUniqueInput
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    name?: StringFilter<"Class"> | string
    grade?: StringFilter<"Class"> | string
    section?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringFilter<"Class"> | string
    capacity?: IntFilter<"Class"> | number
    schedule?: JsonFilter<"Class">
    schoolId?: StringFilter<"Class"> | string
    metadata?: JsonNullableFilter<"Class">
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updatedAt?: DateTimeFilter<"Class"> | Date | string
    classMasterId?: StringNullableFilter<"Class"> | string | null
    classMasterHistory?: JsonNullableListFilter<"Class">
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    classSubjects?: ClassSubjectListRelationFilter
    students?: ClassStudentListRelationFilter
    attendance?: AttendanceListRelationFilter
  }, "id" | "schoolId_name_academicYear">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    section?: SortOrderInput | SortOrder
    academicYear?: SortOrder
    capacity?: SortOrder
    schedule?: SortOrder
    schoolId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    classMasterId?: SortOrderInput | SortOrder
    classMasterHistory?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Class"> | string
    name?: StringWithAggregatesFilter<"Class"> | string
    grade?: StringWithAggregatesFilter<"Class"> | string
    section?: StringNullableWithAggregatesFilter<"Class"> | string | null
    academicYear?: StringWithAggregatesFilter<"Class"> | string
    capacity?: IntWithAggregatesFilter<"Class"> | number
    schedule?: JsonWithAggregatesFilter<"Class">
    schoolId?: StringWithAggregatesFilter<"Class"> | string
    metadata?: JsonNullableWithAggregatesFilter<"Class">
    createdAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
    classMasterId?: StringNullableWithAggregatesFilter<"Class"> | string | null
    classMasterHistory?: JsonNullableListFilter<"Class">
  }

  export type ClassStudentWhereInput = {
    AND?: ClassStudentWhereInput | ClassStudentWhereInput[]
    OR?: ClassStudentWhereInput[]
    NOT?: ClassStudentWhereInput | ClassStudentWhereInput[]
    id?: StringFilter<"ClassStudent"> | string
    classId?: StringFilter<"ClassStudent"> | string
    studentProfileId?: StringFilter<"ClassStudent"> | string
    enrollmentDate?: DateTimeFilter<"ClassStudent"> | Date | string
    status?: StringFilter<"ClassStudent"> | string
    metadata?: JsonNullableFilter<"ClassStudent">
    createdAt?: DateTimeFilter<"ClassStudent"> | Date | string
    updatedAt?: DateTimeFilter<"ClassStudent"> | Date | string
    class?: XOR<ClassRelationFilter, ClassWhereInput>
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
  }

  export type ClassStudentOrderByWithRelationInput = {
    id?: SortOrder
    classId?: SortOrder
    studentProfileId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    class?: ClassOrderByWithRelationInput
    studentProfile?: StudentProfileOrderByWithRelationInput
  }

  export type ClassStudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    classId_studentProfileId?: ClassStudentClassIdStudentProfileIdCompoundUniqueInput
    AND?: ClassStudentWhereInput | ClassStudentWhereInput[]
    OR?: ClassStudentWhereInput[]
    NOT?: ClassStudentWhereInput | ClassStudentWhereInput[]
    classId?: StringFilter<"ClassStudent"> | string
    studentProfileId?: StringFilter<"ClassStudent"> | string
    enrollmentDate?: DateTimeFilter<"ClassStudent"> | Date | string
    status?: StringFilter<"ClassStudent"> | string
    metadata?: JsonNullableFilter<"ClassStudent">
    createdAt?: DateTimeFilter<"ClassStudent"> | Date | string
    updatedAt?: DateTimeFilter<"ClassStudent"> | Date | string
    class?: XOR<ClassRelationFilter, ClassWhereInput>
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
  }, "id" | "classId_studentProfileId">

  export type ClassStudentOrderByWithAggregationInput = {
    id?: SortOrder
    classId?: SortOrder
    studentProfileId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClassStudentCountOrderByAggregateInput
    _max?: ClassStudentMaxOrderByAggregateInput
    _min?: ClassStudentMinOrderByAggregateInput
  }

  export type ClassStudentScalarWhereWithAggregatesInput = {
    AND?: ClassStudentScalarWhereWithAggregatesInput | ClassStudentScalarWhereWithAggregatesInput[]
    OR?: ClassStudentScalarWhereWithAggregatesInput[]
    NOT?: ClassStudentScalarWhereWithAggregatesInput | ClassStudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClassStudent"> | string
    classId?: StringWithAggregatesFilter<"ClassStudent"> | string
    studentProfileId?: StringWithAggregatesFilter<"ClassStudent"> | string
    enrollmentDate?: DateTimeWithAggregatesFilter<"ClassStudent"> | Date | string
    status?: StringWithAggregatesFilter<"ClassStudent"> | string
    metadata?: JsonNullableWithAggregatesFilter<"ClassStudent">
    createdAt?: DateTimeWithAggregatesFilter<"ClassStudent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClassStudent"> | Date | string
  }

  export type ReportCardWhereInput = {
    AND?: ReportCardWhereInput | ReportCardWhereInput[]
    OR?: ReportCardWhereInput[]
    NOT?: ReportCardWhereInput | ReportCardWhereInput[]
    id?: StringFilter<"ReportCard"> | string
    studentProfileId?: StringFilter<"ReportCard"> | string
    schoolId?: StringFilter<"ReportCard"> | string
    term?: StringFilter<"ReportCard"> | string
    academicYear?: StringFilter<"ReportCard"> | string
    teacherComments?: StringNullableFilter<"ReportCard"> | string | null
    principalComments?: StringNullableFilter<"ReportCard"> | string | null
    attendance?: JsonNullableFilter<"ReportCard">
    status?: EnumReportCardStatusFilter<"ReportCard"> | $Enums.ReportCardStatus
    publishedAt?: DateTimeNullableFilter<"ReportCard"> | Date | string | null
    metadata?: JsonNullableFilter<"ReportCard">
    createdAt?: DateTimeFilter<"ReportCard"> | Date | string
    updatedAt?: DateTimeFilter<"ReportCard"> | Date | string
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    grades?: GradeListRelationFilter
  }

  export type ReportCardOrderByWithRelationInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    schoolId?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    teacherComments?: SortOrderInput | SortOrder
    principalComments?: SortOrderInput | SortOrder
    attendance?: SortOrderInput | SortOrder
    status?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    studentProfile?: StudentProfileOrderByWithRelationInput
    school?: SchoolOrderByWithRelationInput
    grades?: GradeOrderByRelationAggregateInput
  }

  export type ReportCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportCardWhereInput | ReportCardWhereInput[]
    OR?: ReportCardWhereInput[]
    NOT?: ReportCardWhereInput | ReportCardWhereInput[]
    studentProfileId?: StringFilter<"ReportCard"> | string
    schoolId?: StringFilter<"ReportCard"> | string
    term?: StringFilter<"ReportCard"> | string
    academicYear?: StringFilter<"ReportCard"> | string
    teacherComments?: StringNullableFilter<"ReportCard"> | string | null
    principalComments?: StringNullableFilter<"ReportCard"> | string | null
    attendance?: JsonNullableFilter<"ReportCard">
    status?: EnumReportCardStatusFilter<"ReportCard"> | $Enums.ReportCardStatus
    publishedAt?: DateTimeNullableFilter<"ReportCard"> | Date | string | null
    metadata?: JsonNullableFilter<"ReportCard">
    createdAt?: DateTimeFilter<"ReportCard"> | Date | string
    updatedAt?: DateTimeFilter<"ReportCard"> | Date | string
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    grades?: GradeListRelationFilter
  }, "id">

  export type ReportCardOrderByWithAggregationInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    schoolId?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    teacherComments?: SortOrderInput | SortOrder
    principalComments?: SortOrderInput | SortOrder
    attendance?: SortOrderInput | SortOrder
    status?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReportCardCountOrderByAggregateInput
    _max?: ReportCardMaxOrderByAggregateInput
    _min?: ReportCardMinOrderByAggregateInput
  }

  export type ReportCardScalarWhereWithAggregatesInput = {
    AND?: ReportCardScalarWhereWithAggregatesInput | ReportCardScalarWhereWithAggregatesInput[]
    OR?: ReportCardScalarWhereWithAggregatesInput[]
    NOT?: ReportCardScalarWhereWithAggregatesInput | ReportCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportCard"> | string
    studentProfileId?: StringWithAggregatesFilter<"ReportCard"> | string
    schoolId?: StringWithAggregatesFilter<"ReportCard"> | string
    term?: StringWithAggregatesFilter<"ReportCard"> | string
    academicYear?: StringWithAggregatesFilter<"ReportCard"> | string
    teacherComments?: StringNullableWithAggregatesFilter<"ReportCard"> | string | null
    principalComments?: StringNullableWithAggregatesFilter<"ReportCard"> | string | null
    attendance?: JsonNullableWithAggregatesFilter<"ReportCard">
    status?: EnumReportCardStatusWithAggregatesFilter<"ReportCard"> | $Enums.ReportCardStatus
    publishedAt?: DateTimeNullableWithAggregatesFilter<"ReportCard"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"ReportCard">
    createdAt?: DateTimeWithAggregatesFilter<"ReportCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReportCard"> | Date | string
  }

  export type GradeWhereInput = {
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    id?: StringFilter<"Grade"> | string
    studentProfileId?: StringFilter<"Grade"> | string
    reportCardId?: StringFilter<"Grade"> | string
    subjectId?: StringFilter<"Grade"> | string
    teacherId?: StringFilter<"Grade"> | string
    grade?: FloatFilter<"Grade"> | number
    comments?: StringNullableFilter<"Grade"> | string | null
    assessmentType?: StringFilter<"Grade"> | string
    assessmentDate?: DateTimeFilter<"Grade"> | Date | string
    status?: EnumGradeStatusFilter<"Grade"> | $Enums.GradeStatus
    staffProfileId?: StringFilter<"Grade"> | string
    metadata?: JsonNullableFilter<"Grade">
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
    term?: StringFilter<"Grade"> | string
    academicYear?: StringFilter<"Grade"> | string
    weightage?: FloatNullableFilter<"Grade"> | number | null
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
    reportCard?: XOR<ReportCardRelationFilter, ReportCardWhereInput>
    staffProfile?: XOR<StaffProfileRelationFilter, StaffProfileWhereInput>
  }

  export type GradeOrderByWithRelationInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    reportCardId?: SortOrder
    subjectId?: SortOrder
    teacherId?: SortOrder
    grade?: SortOrder
    comments?: SortOrderInput | SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    status?: SortOrder
    staffProfileId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    weightage?: SortOrderInput | SortOrder
    studentProfile?: StudentProfileOrderByWithRelationInput
    reportCard?: ReportCardOrderByWithRelationInput
    staffProfile?: StaffProfileOrderByWithRelationInput
  }

  export type GradeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    studentProfileId?: StringFilter<"Grade"> | string
    reportCardId?: StringFilter<"Grade"> | string
    subjectId?: StringFilter<"Grade"> | string
    teacherId?: StringFilter<"Grade"> | string
    grade?: FloatFilter<"Grade"> | number
    comments?: StringNullableFilter<"Grade"> | string | null
    assessmentType?: StringFilter<"Grade"> | string
    assessmentDate?: DateTimeFilter<"Grade"> | Date | string
    status?: EnumGradeStatusFilter<"Grade"> | $Enums.GradeStatus
    staffProfileId?: StringFilter<"Grade"> | string
    metadata?: JsonNullableFilter<"Grade">
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
    term?: StringFilter<"Grade"> | string
    academicYear?: StringFilter<"Grade"> | string
    weightage?: FloatNullableFilter<"Grade"> | number | null
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
    reportCard?: XOR<ReportCardRelationFilter, ReportCardWhereInput>
    staffProfile?: XOR<StaffProfileRelationFilter, StaffProfileWhereInput>
  }, "id">

  export type GradeOrderByWithAggregationInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    reportCardId?: SortOrder
    subjectId?: SortOrder
    teacherId?: SortOrder
    grade?: SortOrder
    comments?: SortOrderInput | SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    status?: SortOrder
    staffProfileId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    weightage?: SortOrderInput | SortOrder
    _count?: GradeCountOrderByAggregateInput
    _avg?: GradeAvgOrderByAggregateInput
    _max?: GradeMaxOrderByAggregateInput
    _min?: GradeMinOrderByAggregateInput
    _sum?: GradeSumOrderByAggregateInput
  }

  export type GradeScalarWhereWithAggregatesInput = {
    AND?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    OR?: GradeScalarWhereWithAggregatesInput[]
    NOT?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Grade"> | string
    studentProfileId?: StringWithAggregatesFilter<"Grade"> | string
    reportCardId?: StringWithAggregatesFilter<"Grade"> | string
    subjectId?: StringWithAggregatesFilter<"Grade"> | string
    teacherId?: StringWithAggregatesFilter<"Grade"> | string
    grade?: FloatWithAggregatesFilter<"Grade"> | number
    comments?: StringNullableWithAggregatesFilter<"Grade"> | string | null
    assessmentType?: StringWithAggregatesFilter<"Grade"> | string
    assessmentDate?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
    status?: EnumGradeStatusWithAggregatesFilter<"Grade"> | $Enums.GradeStatus
    staffProfileId?: StringWithAggregatesFilter<"Grade"> | string
    metadata?: JsonNullableWithAggregatesFilter<"Grade">
    createdAt?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
    term?: StringWithAggregatesFilter<"Grade"> | string
    academicYear?: StringWithAggregatesFilter<"Grade"> | string
    weightage?: FloatNullableWithAggregatesFilter<"Grade"> | number | null
  }

  export type StudentProfileWhereInput = {
    AND?: StudentProfileWhereInput | StudentProfileWhereInput[]
    OR?: StudentProfileWhereInput[]
    NOT?: StudentProfileWhereInput | StudentProfileWhereInput[]
    id?: StringFilter<"StudentProfile"> | string
    profileId?: StringFilter<"StudentProfile"> | string
    admissionNumber?: StringFilter<"StudentProfile"> | string
    enrollmentDate?: DateTimeFilter<"StudentProfile"> | Date | string
    currentGrade?: StringNullableFilter<"StudentProfile"> | string | null
    previousSchools?: JsonNullableListFilter<"StudentProfile">
    learningProgress?: JsonNullableListFilter<"StudentProfile">
    achievements?: JsonNullableListFilter<"StudentProfile">
    extracurricular?: JsonNullableListFilter<"StudentProfile">
    specialNeeds?: JsonNullableFilter<"StudentProfile">
    medicalInfo?: JsonNullableFilter<"StudentProfile">
    dietaryRestrictions?: StringNullableListFilter<"StudentProfile">
    metadata?: JsonNullableFilter<"StudentProfile">
    createdAt?: DateTimeFilter<"StudentProfile"> | Date | string
    updatedAt?: DateTimeFilter<"StudentProfile"> | Date | string
    currentGPA?: FloatNullableFilter<"StudentProfile"> | number | null
    academicStanding?: StringNullableFilter<"StudentProfile"> | string | null
    attendanceRate?: FloatNullableFilter<"StudentProfile"> | number | null
    lastAttendanceDate?: DateTimeNullableFilter<"StudentProfile"> | Date | string | null
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    guardians?: ParentStudentRelationListRelationFilter
    classes?: ClassStudentListRelationFilter
    attendanceRecords?: AttendanceListRelationFilter
    reportCards?: ReportCardListRelationFilter
    grades?: GradeListRelationFilter
  }

  export type StudentProfileOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    admissionNumber?: SortOrder
    enrollmentDate?: SortOrder
    currentGrade?: SortOrderInput | SortOrder
    previousSchools?: SortOrder
    learningProgress?: SortOrder
    achievements?: SortOrder
    extracurricular?: SortOrder
    specialNeeds?: SortOrderInput | SortOrder
    medicalInfo?: SortOrderInput | SortOrder
    dietaryRestrictions?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGPA?: SortOrderInput | SortOrder
    academicStanding?: SortOrderInput | SortOrder
    attendanceRate?: SortOrderInput | SortOrder
    lastAttendanceDate?: SortOrderInput | SortOrder
    profile?: ProfileOrderByWithRelationInput
    guardians?: ParentStudentRelationOrderByRelationAggregateInput
    classes?: ClassStudentOrderByRelationAggregateInput
    attendanceRecords?: AttendanceOrderByRelationAggregateInput
    reportCards?: ReportCardOrderByRelationAggregateInput
    grades?: GradeOrderByRelationAggregateInput
  }

  export type StudentProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    profileId?: string
    admissionNumber?: string
    AND?: StudentProfileWhereInput | StudentProfileWhereInput[]
    OR?: StudentProfileWhereInput[]
    NOT?: StudentProfileWhereInput | StudentProfileWhereInput[]
    enrollmentDate?: DateTimeFilter<"StudentProfile"> | Date | string
    currentGrade?: StringNullableFilter<"StudentProfile"> | string | null
    previousSchools?: JsonNullableListFilter<"StudentProfile">
    learningProgress?: JsonNullableListFilter<"StudentProfile">
    achievements?: JsonNullableListFilter<"StudentProfile">
    extracurricular?: JsonNullableListFilter<"StudentProfile">
    specialNeeds?: JsonNullableFilter<"StudentProfile">
    medicalInfo?: JsonNullableFilter<"StudentProfile">
    dietaryRestrictions?: StringNullableListFilter<"StudentProfile">
    metadata?: JsonNullableFilter<"StudentProfile">
    createdAt?: DateTimeFilter<"StudentProfile"> | Date | string
    updatedAt?: DateTimeFilter<"StudentProfile"> | Date | string
    currentGPA?: FloatNullableFilter<"StudentProfile"> | number | null
    academicStanding?: StringNullableFilter<"StudentProfile"> | string | null
    attendanceRate?: FloatNullableFilter<"StudentProfile"> | number | null
    lastAttendanceDate?: DateTimeNullableFilter<"StudentProfile"> | Date | string | null
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    guardians?: ParentStudentRelationListRelationFilter
    classes?: ClassStudentListRelationFilter
    attendanceRecords?: AttendanceListRelationFilter
    reportCards?: ReportCardListRelationFilter
    grades?: GradeListRelationFilter
  }, "id" | "profileId" | "admissionNumber">

  export type StudentProfileOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    admissionNumber?: SortOrder
    enrollmentDate?: SortOrder
    currentGrade?: SortOrderInput | SortOrder
    previousSchools?: SortOrder
    learningProgress?: SortOrder
    achievements?: SortOrder
    extracurricular?: SortOrder
    specialNeeds?: SortOrderInput | SortOrder
    medicalInfo?: SortOrderInput | SortOrder
    dietaryRestrictions?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGPA?: SortOrderInput | SortOrder
    academicStanding?: SortOrderInput | SortOrder
    attendanceRate?: SortOrderInput | SortOrder
    lastAttendanceDate?: SortOrderInput | SortOrder
    _count?: StudentProfileCountOrderByAggregateInput
    _avg?: StudentProfileAvgOrderByAggregateInput
    _max?: StudentProfileMaxOrderByAggregateInput
    _min?: StudentProfileMinOrderByAggregateInput
    _sum?: StudentProfileSumOrderByAggregateInput
  }

  export type StudentProfileScalarWhereWithAggregatesInput = {
    AND?: StudentProfileScalarWhereWithAggregatesInput | StudentProfileScalarWhereWithAggregatesInput[]
    OR?: StudentProfileScalarWhereWithAggregatesInput[]
    NOT?: StudentProfileScalarWhereWithAggregatesInput | StudentProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudentProfile"> | string
    profileId?: StringWithAggregatesFilter<"StudentProfile"> | string
    admissionNumber?: StringWithAggregatesFilter<"StudentProfile"> | string
    enrollmentDate?: DateTimeWithAggregatesFilter<"StudentProfile"> | Date | string
    currentGrade?: StringNullableWithAggregatesFilter<"StudentProfile"> | string | null
    previousSchools?: JsonNullableListFilter<"StudentProfile">
    learningProgress?: JsonNullableListFilter<"StudentProfile">
    achievements?: JsonNullableListFilter<"StudentProfile">
    extracurricular?: JsonNullableListFilter<"StudentProfile">
    specialNeeds?: JsonNullableWithAggregatesFilter<"StudentProfile">
    medicalInfo?: JsonNullableWithAggregatesFilter<"StudentProfile">
    dietaryRestrictions?: StringNullableListFilter<"StudentProfile">
    metadata?: JsonNullableWithAggregatesFilter<"StudentProfile">
    createdAt?: DateTimeWithAggregatesFilter<"StudentProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StudentProfile"> | Date | string
    currentGPA?: FloatNullableWithAggregatesFilter<"StudentProfile"> | number | null
    academicStanding?: StringNullableWithAggregatesFilter<"StudentProfile"> | string | null
    attendanceRate?: FloatNullableWithAggregatesFilter<"StudentProfile"> | number | null
    lastAttendanceDate?: DateTimeNullableWithAggregatesFilter<"StudentProfile"> | Date | string | null
  }

  export type ParentProfileWhereInput = {
    AND?: ParentProfileWhereInput | ParentProfileWhereInput[]
    OR?: ParentProfileWhereInput[]
    NOT?: ParentProfileWhereInput | ParentProfileWhereInput[]
    id?: StringFilter<"ParentProfile"> | string
    profileId?: StringFilter<"ParentProfile"> | string
    relationship?: StringFilter<"ParentProfile"> | string
    preferredLanguage?: StringNullableFilter<"ParentProfile"> | string | null
    communicationPreferences?: JsonNullableFilter<"ParentProfile">
    metadata?: JsonNullableFilter<"ParentProfile">
    createdAt?: DateTimeFilter<"ParentProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ParentProfile"> | Date | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    children?: ParentStudentRelationListRelationFilter
  }

  export type ParentProfileOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    relationship?: SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    communicationPreferences?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    children?: ParentStudentRelationOrderByRelationAggregateInput
  }

  export type ParentProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    profileId?: string
    AND?: ParentProfileWhereInput | ParentProfileWhereInput[]
    OR?: ParentProfileWhereInput[]
    NOT?: ParentProfileWhereInput | ParentProfileWhereInput[]
    relationship?: StringFilter<"ParentProfile"> | string
    preferredLanguage?: StringNullableFilter<"ParentProfile"> | string | null
    communicationPreferences?: JsonNullableFilter<"ParentProfile">
    metadata?: JsonNullableFilter<"ParentProfile">
    createdAt?: DateTimeFilter<"ParentProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ParentProfile"> | Date | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    children?: ParentStudentRelationListRelationFilter
  }, "id" | "profileId">

  export type ParentProfileOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    relationship?: SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    communicationPreferences?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParentProfileCountOrderByAggregateInput
    _max?: ParentProfileMaxOrderByAggregateInput
    _min?: ParentProfileMinOrderByAggregateInput
  }

  export type ParentProfileScalarWhereWithAggregatesInput = {
    AND?: ParentProfileScalarWhereWithAggregatesInput | ParentProfileScalarWhereWithAggregatesInput[]
    OR?: ParentProfileScalarWhereWithAggregatesInput[]
    NOT?: ParentProfileScalarWhereWithAggregatesInput | ParentProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ParentProfile"> | string
    profileId?: StringWithAggregatesFilter<"ParentProfile"> | string
    relationship?: StringWithAggregatesFilter<"ParentProfile"> | string
    preferredLanguage?: StringNullableWithAggregatesFilter<"ParentProfile"> | string | null
    communicationPreferences?: JsonNullableWithAggregatesFilter<"ParentProfile">
    metadata?: JsonNullableWithAggregatesFilter<"ParentProfile">
    createdAt?: DateTimeWithAggregatesFilter<"ParentProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ParentProfile"> | Date | string
  }

  export type AttendanceWhereInput = {
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    id?: StringFilter<"Attendance"> | string
    studentProfileId?: StringFilter<"Attendance"> | string
    date?: DateTimeFilter<"Attendance"> | Date | string
    status?: StringFilter<"Attendance"> | string
    timeIn?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    timeOut?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    reason?: StringNullableFilter<"Attendance"> | string | null
    isExcused?: BoolFilter<"Attendance"> | boolean
    notes?: StringNullableFilter<"Attendance"> | string | null
    metadata?: JsonNullableFilter<"Attendance">
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    updatedAt?: DateTimeFilter<"Attendance"> | Date | string
    term?: StringFilter<"Attendance"> | string
    academicYear?: StringFilter<"Attendance"> | string
    verifiedBy?: StringNullableFilter<"Attendance"> | string | null
    classMasterId?: StringFilter<"Attendance"> | string
    classId?: StringFilter<"Attendance"> | string
    recordedBy?: StringFilter<"Attendance"> | string
    modifiedBy?: StringNullableFilter<"Attendance"> | string | null
    modifiedAt?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    verificationNotes?: StringNullableFilter<"Attendance"> | string | null
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }

  export type AttendanceOrderByWithRelationInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    timeIn?: SortOrderInput | SortOrder
    timeOut?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    isExcused?: SortOrder
    notes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    classMasterId?: SortOrder
    classId?: SortOrder
    recordedBy?: SortOrder
    modifiedBy?: SortOrderInput | SortOrder
    modifiedAt?: SortOrderInput | SortOrder
    verificationNotes?: SortOrderInput | SortOrder
    studentProfile?: StudentProfileOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type AttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentProfileId_date?: AttendanceStudentProfileIdDateCompoundUniqueInput
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    studentProfileId?: StringFilter<"Attendance"> | string
    date?: DateTimeFilter<"Attendance"> | Date | string
    status?: StringFilter<"Attendance"> | string
    timeIn?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    timeOut?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    reason?: StringNullableFilter<"Attendance"> | string | null
    isExcused?: BoolFilter<"Attendance"> | boolean
    notes?: StringNullableFilter<"Attendance"> | string | null
    metadata?: JsonNullableFilter<"Attendance">
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    updatedAt?: DateTimeFilter<"Attendance"> | Date | string
    term?: StringFilter<"Attendance"> | string
    academicYear?: StringFilter<"Attendance"> | string
    verifiedBy?: StringNullableFilter<"Attendance"> | string | null
    classMasterId?: StringFilter<"Attendance"> | string
    classId?: StringFilter<"Attendance"> | string
    recordedBy?: StringFilter<"Attendance"> | string
    modifiedBy?: StringNullableFilter<"Attendance"> | string | null
    modifiedAt?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    verificationNotes?: StringNullableFilter<"Attendance"> | string | null
    studentProfile?: XOR<StudentProfileRelationFilter, StudentProfileWhereInput>
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }, "id" | "studentProfileId_date">

  export type AttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    timeIn?: SortOrderInput | SortOrder
    timeOut?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    isExcused?: SortOrder
    notes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    classMasterId?: SortOrder
    classId?: SortOrder
    recordedBy?: SortOrder
    modifiedBy?: SortOrderInput | SortOrder
    modifiedAt?: SortOrderInput | SortOrder
    verificationNotes?: SortOrderInput | SortOrder
    _count?: AttendanceCountOrderByAggregateInput
    _max?: AttendanceMaxOrderByAggregateInput
    _min?: AttendanceMinOrderByAggregateInput
  }

  export type AttendanceScalarWhereWithAggregatesInput = {
    AND?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    OR?: AttendanceScalarWhereWithAggregatesInput[]
    NOT?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attendance"> | string
    studentProfileId?: StringWithAggregatesFilter<"Attendance"> | string
    date?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    status?: StringWithAggregatesFilter<"Attendance"> | string
    timeIn?: DateTimeNullableWithAggregatesFilter<"Attendance"> | Date | string | null
    timeOut?: DateTimeNullableWithAggregatesFilter<"Attendance"> | Date | string | null
    reason?: StringNullableWithAggregatesFilter<"Attendance"> | string | null
    isExcused?: BoolWithAggregatesFilter<"Attendance"> | boolean
    notes?: StringNullableWithAggregatesFilter<"Attendance"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Attendance">
    createdAt?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    term?: StringWithAggregatesFilter<"Attendance"> | string
    academicYear?: StringWithAggregatesFilter<"Attendance"> | string
    verifiedBy?: StringNullableWithAggregatesFilter<"Attendance"> | string | null
    classMasterId?: StringWithAggregatesFilter<"Attendance"> | string
    classId?: StringWithAggregatesFilter<"Attendance"> | string
    recordedBy?: StringWithAggregatesFilter<"Attendance"> | string
    modifiedBy?: StringNullableWithAggregatesFilter<"Attendance"> | string | null
    modifiedAt?: DateTimeNullableWithAggregatesFilter<"Attendance"> | Date | string | null
    verificationNotes?: StringNullableWithAggregatesFilter<"Attendance"> | string | null
  }

  export type StaffProfileWhereInput = {
    AND?: StaffProfileWhereInput | StaffProfileWhereInput[]
    OR?: StaffProfileWhereInput[]
    NOT?: StaffProfileWhereInput | StaffProfileWhereInput[]
    id?: StringFilter<"StaffProfile"> | string
    profileId?: StringFilter<"StaffProfile"> | string
    employeeId?: StringFilter<"StaffProfile"> | string
    position?: StringFilter<"StaffProfile"> | string
    department?: StringFilter<"StaffProfile"> | string
    employmentType?: StringFilter<"StaffProfile"> | string
    startDate?: DateTimeFilter<"StaffProfile"> | Date | string
    endDate?: DateTimeNullableFilter<"StaffProfile"> | Date | string | null
    schedule?: JsonNullableFilter<"StaffProfile">
    responsibilities?: StringNullableListFilter<"StaffProfile">
    teachingHours?: IntNullableFilter<"StaffProfile"> | number | null
    specializations?: StringNullableListFilter<"StaffProfile">
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    assignments?: StaffAssignmentListRelationFilter
    subjects?: SubjectAssignmentListRelationFilter
    grades?: GradeListRelationFilter
    classSubjects?: ClassSubjectListRelationFilter
  }

  export type StaffProfileOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    employeeId?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employmentType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    schedule?: SortOrderInput | SortOrder
    responsibilities?: SortOrder
    teachingHours?: SortOrderInput | SortOrder
    specializations?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    assignments?: StaffAssignmentOrderByRelationAggregateInput
    subjects?: SubjectAssignmentOrderByRelationAggregateInput
    grades?: GradeOrderByRelationAggregateInput
    classSubjects?: ClassSubjectOrderByRelationAggregateInput
  }

  export type StaffProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    profileId?: string
    employeeId?: string
    AND?: StaffProfileWhereInput | StaffProfileWhereInput[]
    OR?: StaffProfileWhereInput[]
    NOT?: StaffProfileWhereInput | StaffProfileWhereInput[]
    position?: StringFilter<"StaffProfile"> | string
    department?: StringFilter<"StaffProfile"> | string
    employmentType?: StringFilter<"StaffProfile"> | string
    startDate?: DateTimeFilter<"StaffProfile"> | Date | string
    endDate?: DateTimeNullableFilter<"StaffProfile"> | Date | string | null
    schedule?: JsonNullableFilter<"StaffProfile">
    responsibilities?: StringNullableListFilter<"StaffProfile">
    teachingHours?: IntNullableFilter<"StaffProfile"> | number | null
    specializations?: StringNullableListFilter<"StaffProfile">
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    assignments?: StaffAssignmentListRelationFilter
    subjects?: SubjectAssignmentListRelationFilter
    grades?: GradeListRelationFilter
    classSubjects?: ClassSubjectListRelationFilter
  }, "id" | "profileId" | "employeeId">

  export type StaffProfileOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    employeeId?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employmentType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    schedule?: SortOrderInput | SortOrder
    responsibilities?: SortOrder
    teachingHours?: SortOrderInput | SortOrder
    specializations?: SortOrder
    _count?: StaffProfileCountOrderByAggregateInput
    _avg?: StaffProfileAvgOrderByAggregateInput
    _max?: StaffProfileMaxOrderByAggregateInput
    _min?: StaffProfileMinOrderByAggregateInput
    _sum?: StaffProfileSumOrderByAggregateInput
  }

  export type StaffProfileScalarWhereWithAggregatesInput = {
    AND?: StaffProfileScalarWhereWithAggregatesInput | StaffProfileScalarWhereWithAggregatesInput[]
    OR?: StaffProfileScalarWhereWithAggregatesInput[]
    NOT?: StaffProfileScalarWhereWithAggregatesInput | StaffProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StaffProfile"> | string
    profileId?: StringWithAggregatesFilter<"StaffProfile"> | string
    employeeId?: StringWithAggregatesFilter<"StaffProfile"> | string
    position?: StringWithAggregatesFilter<"StaffProfile"> | string
    department?: StringWithAggregatesFilter<"StaffProfile"> | string
    employmentType?: StringWithAggregatesFilter<"StaffProfile"> | string
    startDate?: DateTimeWithAggregatesFilter<"StaffProfile"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"StaffProfile"> | Date | string | null
    schedule?: JsonNullableWithAggregatesFilter<"StaffProfile">
    responsibilities?: StringNullableListFilter<"StaffProfile">
    teachingHours?: IntNullableWithAggregatesFilter<"StaffProfile"> | number | null
    specializations?: StringNullableListFilter<"StaffProfile">
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: StringFilter<"Subject"> | string
    code?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    description?: StringNullableFilter<"Subject"> | string | null
    category?: StringFilter<"Subject"> | string
    gradeLevel?: StringNullableListFilter<"Subject">
    metadata?: JsonNullableFilter<"Subject">
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
    credits?: FloatNullableFilter<"Subject"> | number | null
    prerequisites?: StringNullableListFilter<"Subject">
    corequisites?: StringNullableListFilter<"Subject">
    learningOutcomes?: StringNullableListFilter<"Subject">
    assessmentCriteria?: JsonNullableFilter<"Subject">
    assignments?: SubjectAssignmentListRelationFilter
    classSubjects?: ClassSubjectListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    gradeLevel?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    credits?: SortOrderInput | SortOrder
    prerequisites?: SortOrder
    corequisites?: SortOrder
    learningOutcomes?: SortOrder
    assessmentCriteria?: SortOrderInput | SortOrder
    assignments?: SubjectAssignmentOrderByRelationAggregateInput
    classSubjects?: ClassSubjectOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    description?: StringNullableFilter<"Subject"> | string | null
    category?: StringFilter<"Subject"> | string
    gradeLevel?: StringNullableListFilter<"Subject">
    metadata?: JsonNullableFilter<"Subject">
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
    credits?: FloatNullableFilter<"Subject"> | number | null
    prerequisites?: StringNullableListFilter<"Subject">
    corequisites?: StringNullableListFilter<"Subject">
    learningOutcomes?: StringNullableListFilter<"Subject">
    assessmentCriteria?: JsonNullableFilter<"Subject">
    assignments?: SubjectAssignmentListRelationFilter
    classSubjects?: ClassSubjectListRelationFilter
  }, "id" | "code">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    gradeLevel?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    credits?: SortOrderInput | SortOrder
    prerequisites?: SortOrder
    corequisites?: SortOrder
    learningOutcomes?: SortOrder
    assessmentCriteria?: SortOrderInput | SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subject"> | string
    code?: StringWithAggregatesFilter<"Subject"> | string
    name?: StringWithAggregatesFilter<"Subject"> | string
    description?: StringNullableWithAggregatesFilter<"Subject"> | string | null
    category?: StringWithAggregatesFilter<"Subject"> | string
    gradeLevel?: StringNullableListFilter<"Subject">
    metadata?: JsonNullableWithAggregatesFilter<"Subject">
    createdAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
    credits?: FloatNullableWithAggregatesFilter<"Subject"> | number | null
    prerequisites?: StringNullableListFilter<"Subject">
    corequisites?: StringNullableListFilter<"Subject">
    learningOutcomes?: StringNullableListFilter<"Subject">
    assessmentCriteria?: JsonNullableWithAggregatesFilter<"Subject">
  }

  export type SubjectAssignmentWhereInput = {
    AND?: SubjectAssignmentWhereInput | SubjectAssignmentWhereInput[]
    OR?: SubjectAssignmentWhereInput[]
    NOT?: SubjectAssignmentWhereInput | SubjectAssignmentWhereInput[]
    id?: StringFilter<"SubjectAssignment"> | string
    subjectId?: StringFilter<"SubjectAssignment"> | string
    staffProfileId?: StringFilter<"SubjectAssignment"> | string
    academicYear?: StringFilter<"SubjectAssignment"> | string
    metadata?: JsonNullableFilter<"SubjectAssignment">
    createdAt?: DateTimeFilter<"SubjectAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SubjectAssignment"> | Date | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    staffProfile?: XOR<StaffProfileRelationFilter, StaffProfileWhereInput>
  }

  export type SubjectAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    academicYear?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    staffProfile?: StaffProfileOrderByWithRelationInput
  }

  export type SubjectAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    subjectId_staffProfileId_academicYear?: SubjectAssignmentSubjectIdStaffProfileIdAcademicYearCompoundUniqueInput
    AND?: SubjectAssignmentWhereInput | SubjectAssignmentWhereInput[]
    OR?: SubjectAssignmentWhereInput[]
    NOT?: SubjectAssignmentWhereInput | SubjectAssignmentWhereInput[]
    subjectId?: StringFilter<"SubjectAssignment"> | string
    staffProfileId?: StringFilter<"SubjectAssignment"> | string
    academicYear?: StringFilter<"SubjectAssignment"> | string
    metadata?: JsonNullableFilter<"SubjectAssignment">
    createdAt?: DateTimeFilter<"SubjectAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SubjectAssignment"> | Date | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    staffProfile?: XOR<StaffProfileRelationFilter, StaffProfileWhereInput>
  }, "id" | "subjectId_staffProfileId_academicYear">

  export type SubjectAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    academicYear?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubjectAssignmentCountOrderByAggregateInput
    _max?: SubjectAssignmentMaxOrderByAggregateInput
    _min?: SubjectAssignmentMinOrderByAggregateInput
  }

  export type SubjectAssignmentScalarWhereWithAggregatesInput = {
    AND?: SubjectAssignmentScalarWhereWithAggregatesInput | SubjectAssignmentScalarWhereWithAggregatesInput[]
    OR?: SubjectAssignmentScalarWhereWithAggregatesInput[]
    NOT?: SubjectAssignmentScalarWhereWithAggregatesInput | SubjectAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubjectAssignment"> | string
    subjectId?: StringWithAggregatesFilter<"SubjectAssignment"> | string
    staffProfileId?: StringWithAggregatesFilter<"SubjectAssignment"> | string
    academicYear?: StringWithAggregatesFilter<"SubjectAssignment"> | string
    metadata?: JsonNullableWithAggregatesFilter<"SubjectAssignment">
    createdAt?: DateTimeWithAggregatesFilter<"SubjectAssignment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SubjectAssignment"> | Date | string
  }

  export type CommunicationGroupWhereInput = {
    AND?: CommunicationGroupWhereInput | CommunicationGroupWhereInput[]
    OR?: CommunicationGroupWhereInput[]
    NOT?: CommunicationGroupWhereInput | CommunicationGroupWhereInput[]
    id?: StringFilter<"CommunicationGroup"> | string
    schoolId?: StringFilter<"CommunicationGroup"> | string
    name?: StringFilter<"CommunicationGroup"> | string
    type?: StringFilter<"CommunicationGroup"> | string
    filters?: JsonNullableFilter<"CommunicationGroup">
    metadata?: JsonNullableFilter<"CommunicationGroup">
    createdAt?: DateTimeFilter<"CommunicationGroup"> | Date | string
    updatedAt?: DateTimeFilter<"CommunicationGroup"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }

  export type CommunicationGroupOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    filters?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
  }

  export type CommunicationGroupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommunicationGroupWhereInput | CommunicationGroupWhereInput[]
    OR?: CommunicationGroupWhereInput[]
    NOT?: CommunicationGroupWhereInput | CommunicationGroupWhereInput[]
    schoolId?: StringFilter<"CommunicationGroup"> | string
    name?: StringFilter<"CommunicationGroup"> | string
    type?: StringFilter<"CommunicationGroup"> | string
    filters?: JsonNullableFilter<"CommunicationGroup">
    metadata?: JsonNullableFilter<"CommunicationGroup">
    createdAt?: DateTimeFilter<"CommunicationGroup"> | Date | string
    updatedAt?: DateTimeFilter<"CommunicationGroup"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }, "id">

  export type CommunicationGroupOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    filters?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommunicationGroupCountOrderByAggregateInput
    _max?: CommunicationGroupMaxOrderByAggregateInput
    _min?: CommunicationGroupMinOrderByAggregateInput
  }

  export type CommunicationGroupScalarWhereWithAggregatesInput = {
    AND?: CommunicationGroupScalarWhereWithAggregatesInput | CommunicationGroupScalarWhereWithAggregatesInput[]
    OR?: CommunicationGroupScalarWhereWithAggregatesInput[]
    NOT?: CommunicationGroupScalarWhereWithAggregatesInput | CommunicationGroupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CommunicationGroup"> | string
    schoolId?: StringWithAggregatesFilter<"CommunicationGroup"> | string
    name?: StringWithAggregatesFilter<"CommunicationGroup"> | string
    type?: StringWithAggregatesFilter<"CommunicationGroup"> | string
    filters?: JsonNullableWithAggregatesFilter<"CommunicationGroup">
    metadata?: JsonNullableWithAggregatesFilter<"CommunicationGroup">
    createdAt?: DateTimeWithAggregatesFilter<"CommunicationGroup"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CommunicationGroup"> | Date | string
  }

  export type SchoolRoleWhereInput = {
    AND?: SchoolRoleWhereInput | SchoolRoleWhereInput[]
    OR?: SchoolRoleWhereInput[]
    NOT?: SchoolRoleWhereInput | SchoolRoleWhereInput[]
    id?: StringFilter<"SchoolRole"> | string
    schoolId?: StringFilter<"SchoolRole"> | string
    userId?: StringFilter<"SchoolRole"> | string
    role?: EnumRoleFilter<"SchoolRole"> | $Enums.Role
    permissions?: StringNullableListFilter<"SchoolRole">
    communicationPermissions?: StringNullableListFilter<"SchoolRole">
    assignedBy?: StringFilter<"SchoolRole"> | string
    createdAt?: DateTimeFilter<"SchoolRole"> | Date | string
    updatedAt?: DateTimeFilter<"SchoolRole"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }

  export type SchoolRoleOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    communicationPermissions?: SortOrder
    assignedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
  }

  export type SchoolRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    schoolId_userId_role?: SchoolRoleSchoolIdUserIdRoleCompoundUniqueInput
    AND?: SchoolRoleWhereInput | SchoolRoleWhereInput[]
    OR?: SchoolRoleWhereInput[]
    NOT?: SchoolRoleWhereInput | SchoolRoleWhereInput[]
    schoolId?: StringFilter<"SchoolRole"> | string
    userId?: StringFilter<"SchoolRole"> | string
    role?: EnumRoleFilter<"SchoolRole"> | $Enums.Role
    permissions?: StringNullableListFilter<"SchoolRole">
    communicationPermissions?: StringNullableListFilter<"SchoolRole">
    assignedBy?: StringFilter<"SchoolRole"> | string
    createdAt?: DateTimeFilter<"SchoolRole"> | Date | string
    updatedAt?: DateTimeFilter<"SchoolRole"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }, "id" | "schoolId_userId_role">

  export type SchoolRoleOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    communicationPermissions?: SortOrder
    assignedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SchoolRoleCountOrderByAggregateInput
    _max?: SchoolRoleMaxOrderByAggregateInput
    _min?: SchoolRoleMinOrderByAggregateInput
  }

  export type SchoolRoleScalarWhereWithAggregatesInput = {
    AND?: SchoolRoleScalarWhereWithAggregatesInput | SchoolRoleScalarWhereWithAggregatesInput[]
    OR?: SchoolRoleScalarWhereWithAggregatesInput[]
    NOT?: SchoolRoleScalarWhereWithAggregatesInput | SchoolRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SchoolRole"> | string
    schoolId?: StringWithAggregatesFilter<"SchoolRole"> | string
    userId?: StringWithAggregatesFilter<"SchoolRole"> | string
    role?: EnumRoleWithAggregatesFilter<"SchoolRole"> | $Enums.Role
    permissions?: StringNullableListFilter<"SchoolRole">
    communicationPermissions?: StringNullableListFilter<"SchoolRole">
    assignedBy?: StringWithAggregatesFilter<"SchoolRole"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SchoolRole"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SchoolRole"> | Date | string
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    mimeType?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    url?: StringFilter<"File"> | string
    type?: EnumFileTypeFilter<"File"> | $Enums.FileType
    category?: EnumFileCategoryFilter<"File"> | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelFilter<"File"> | $Enums.FileAccessLevel
    provider?: EnumStorageProviderFilter<"File"> | $Enums.StorageProvider
    metadata?: JsonNullableFilter<"File">
    ownerId?: StringFilter<"File"> | string
    ownerType?: EnumEntityTypeFilter<"File"> | $Enums.EntityType
    accessibleTo?: StringNullableListFilter<"File">
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    deletedAt?: DateTimeNullableFilter<"File"> | Date | string | null
    quota?: XOR<FileQuotaNullableRelationFilter, FileQuotaWhereInput> | null
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    url?: SortOrder
    type?: SortOrder
    category?: SortOrder
    accessLevel?: SortOrder
    provider?: SortOrder
    metadata?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    ownerType?: SortOrder
    accessibleTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    quota?: FileQuotaOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    name?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    mimeType?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    url?: StringFilter<"File"> | string
    type?: EnumFileTypeFilter<"File"> | $Enums.FileType
    category?: EnumFileCategoryFilter<"File"> | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelFilter<"File"> | $Enums.FileAccessLevel
    provider?: EnumStorageProviderFilter<"File"> | $Enums.StorageProvider
    metadata?: JsonNullableFilter<"File">
    ownerId?: StringFilter<"File"> | string
    ownerType?: EnumEntityTypeFilter<"File"> | $Enums.EntityType
    accessibleTo?: StringNullableListFilter<"File">
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    deletedAt?: DateTimeNullableFilter<"File"> | Date | string | null
    quota?: XOR<FileQuotaNullableRelationFilter, FileQuotaWhereInput> | null
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    url?: SortOrder
    type?: SortOrder
    category?: SortOrder
    accessLevel?: SortOrder
    provider?: SortOrder
    metadata?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    ownerType?: SortOrder
    accessibleTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    name?: StringWithAggregatesFilter<"File"> | string
    originalName?: StringWithAggregatesFilter<"File"> | string
    mimeType?: StringWithAggregatesFilter<"File"> | string
    size?: IntWithAggregatesFilter<"File"> | number
    url?: StringWithAggregatesFilter<"File"> | string
    type?: EnumFileTypeWithAggregatesFilter<"File"> | $Enums.FileType
    category?: EnumFileCategoryWithAggregatesFilter<"File"> | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelWithAggregatesFilter<"File"> | $Enums.FileAccessLevel
    provider?: EnumStorageProviderWithAggregatesFilter<"File"> | $Enums.StorageProvider
    metadata?: JsonNullableWithAggregatesFilter<"File">
    ownerId?: StringWithAggregatesFilter<"File"> | string
    ownerType?: EnumEntityTypeWithAggregatesFilter<"File"> | $Enums.EntityType
    accessibleTo?: StringNullableListFilter<"File">
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"File"> | Date | string | null
  }

  export type FileQuotaWhereInput = {
    AND?: FileQuotaWhereInput | FileQuotaWhereInput[]
    OR?: FileQuotaWhereInput[]
    NOT?: FileQuotaWhereInput | FileQuotaWhereInput[]
    id?: StringFilter<"FileQuota"> | string
    fileId?: StringFilter<"FileQuota"> | string
    totalSize?: IntFilter<"FileQuota"> | number
    usedSize?: IntFilter<"FileQuota"> | number
    maxSize?: IntFilter<"FileQuota"> | number
    createdAt?: DateTimeFilter<"FileQuota"> | Date | string
    updatedAt?: DateTimeFilter<"FileQuota"> | Date | string
    file?: XOR<FileRelationFilter, FileWhereInput>
  }

  export type FileQuotaOrderByWithRelationInput = {
    id?: SortOrder
    fileId?: SortOrder
    totalSize?: SortOrder
    usedSize?: SortOrder
    maxSize?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    file?: FileOrderByWithRelationInput
  }

  export type FileQuotaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    fileId?: string
    AND?: FileQuotaWhereInput | FileQuotaWhereInput[]
    OR?: FileQuotaWhereInput[]
    NOT?: FileQuotaWhereInput | FileQuotaWhereInput[]
    totalSize?: IntFilter<"FileQuota"> | number
    usedSize?: IntFilter<"FileQuota"> | number
    maxSize?: IntFilter<"FileQuota"> | number
    createdAt?: DateTimeFilter<"FileQuota"> | Date | string
    updatedAt?: DateTimeFilter<"FileQuota"> | Date | string
    file?: XOR<FileRelationFilter, FileWhereInput>
  }, "id" | "fileId">

  export type FileQuotaOrderByWithAggregationInput = {
    id?: SortOrder
    fileId?: SortOrder
    totalSize?: SortOrder
    usedSize?: SortOrder
    maxSize?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FileQuotaCountOrderByAggregateInput
    _avg?: FileQuotaAvgOrderByAggregateInput
    _max?: FileQuotaMaxOrderByAggregateInput
    _min?: FileQuotaMinOrderByAggregateInput
    _sum?: FileQuotaSumOrderByAggregateInput
  }

  export type FileQuotaScalarWhereWithAggregatesInput = {
    AND?: FileQuotaScalarWhereWithAggregatesInput | FileQuotaScalarWhereWithAggregatesInput[]
    OR?: FileQuotaScalarWhereWithAggregatesInput[]
    NOT?: FileQuotaScalarWhereWithAggregatesInput | FileQuotaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FileQuota"> | string
    fileId?: StringWithAggregatesFilter<"FileQuota"> | string
    totalSize?: IntWithAggregatesFilter<"FileQuota"> | number
    usedSize?: IntWithAggregatesFilter<"FileQuota"> | number
    maxSize?: IntWithAggregatesFilter<"FileQuota"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FileQuota"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FileQuota"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    documents?: KYCDocumentCreateNestedManyWithoutUserInput
    verifications?: VerificationHistoryCreateNestedManyWithoutVerifierInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    documents?: KYCDocumentUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationHistoryUncheckedCreateNestedManyWithoutVerifierInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    documents?: KYCDocumentUpdateManyWithoutUserNestedInput
    verifications?: VerificationHistoryUpdateManyWithoutVerifierNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    documents?: KYCDocumentUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationHistoryUncheckedUpdateManyWithoutVerifierNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OTPCreateInput = {
    id?: string
    code: string
    userId: string
    expiresAt: Date | string
    status: $Enums.OTPStatus
    createdAt?: Date | string
  }

  export type OTPUncheckedCreateInput = {
    id?: string
    code: string
    userId: string
    expiresAt: Date | string
    status: $Enums.OTPStatus
    createdAt?: Date | string
  }

  export type OTPUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOTPStatusFieldUpdateOperationsInput | $Enums.OTPStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOTPStatusFieldUpdateOperationsInput | $Enums.OTPStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPCreateManyInput = {
    id?: string
    code: string
    userId: string
    expiresAt: Date | string
    status: $Enums.OTPStatus
    createdAt?: Date | string
  }

  export type OTPUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOTPStatusFieldUpdateOperationsInput | $Enums.OTPStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOTPStatusFieldUpdateOperationsInput | $Enums.OTPStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KYCDocumentCreateInput = {
    id?: string
    type: $Enums.DocumentType
    status: $Enums.VerificationStatus
    documentUrls?: KYCDocumentCreatedocumentUrlsInput | string[]
    verifiedAt?: Date | string | null
    metadata: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
  }

  export type KYCDocumentUncheckedCreateInput = {
    id?: string
    userId: string
    type: $Enums.DocumentType
    status: $Enums.VerificationStatus
    documentUrls?: KYCDocumentCreatedocumentUrlsInput | string[]
    verifiedAt?: Date | string | null
    metadata: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KYCDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    documentUrls?: KYCDocumentUpdatedocumentUrlsInput | string[]
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type KYCDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    documentUrls?: KYCDocumentUpdatedocumentUrlsInput | string[]
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KYCDocumentCreateManyInput = {
    id?: string
    userId: string
    type: $Enums.DocumentType
    status: $Enums.VerificationStatus
    documentUrls?: KYCDocumentCreatedocumentUrlsInput | string[]
    verifiedAt?: Date | string | null
    metadata: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KYCDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    documentUrls?: KYCDocumentUpdatedocumentUrlsInput | string[]
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KYCDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    documentUrls?: KYCDocumentUpdatedocumentUrlsInput | string[]
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationHistoryCreateInput = {
    id?: string
    entityId: string
    entityType: $Enums.EntityType
    status: $Enums.VerificationStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    verifier?: UserCreateNestedOneWithoutVerificationsInput
  }

  export type VerificationHistoryUncheckedCreateInput = {
    id?: string
    entityId: string
    entityType: $Enums.EntityType
    status: $Enums.VerificationStatus
    verifiedBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifier?: UserUpdateOneWithoutVerificationsNestedInput
  }

  export type VerificationHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationHistoryCreateManyInput = {
    id?: string
    entityId: string
    entityType: $Enums.EntityType
    status: $Enums.VerificationStatus
    verifiedBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProfileInput
    professionalProfile?: ProfessionalProfileCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileUncheckedCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileUncheckedCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    professionalProfile?: ProfessionalProfileUpdateOneWithoutProfileNestedInput
    studentProfile?: StudentProfileUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedUpdateOneWithoutProfileNestedInput
    studentProfile?: StudentProfileUncheckedUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUncheckedUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProfessionalProfileCreateInput = {
    id?: string
    currentPosition?: string | null
    yearsOfExperience?: number | null
    workHistory?: ProfessionalProfileCreateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileCreatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileCreatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileCreatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileCreateskillsInput | string[]
    specializations?: ProfessionalProfileCreatespecializationsInput | string[]
    achievements?: ProfessionalProfileCreateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutProfessionalProfileInput
  }

  export type ProfessionalProfileUncheckedCreateInput = {
    id?: string
    profileId: string
    currentPosition?: string | null
    yearsOfExperience?: number | null
    workHistory?: ProfessionalProfileCreateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileCreatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileCreatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileCreatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileCreateskillsInput | string[]
    specializations?: ProfessionalProfileCreatespecializationsInput | string[]
    achievements?: ProfessionalProfileCreateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    workHistory?: ProfessionalProfileUpdateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileUpdatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileUpdatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileUpdatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileUpdateskillsInput | string[]
    specializations?: ProfessionalProfileUpdatespecializationsInput | string[]
    achievements?: ProfessionalProfileUpdateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutProfessionalProfileNestedInput
  }

  export type ProfessionalProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    workHistory?: ProfessionalProfileUpdateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileUpdatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileUpdatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileUpdatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileUpdateskillsInput | string[]
    specializations?: ProfessionalProfileUpdatespecializationsInput | string[]
    achievements?: ProfessionalProfileUpdateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalProfileCreateManyInput = {
    id?: string
    profileId: string
    currentPosition?: string | null
    yearsOfExperience?: number | null
    workHistory?: ProfessionalProfileCreateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileCreatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileCreatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileCreatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileCreateskillsInput | string[]
    specializations?: ProfessionalProfileCreatespecializationsInput | string[]
    achievements?: ProfessionalProfileCreateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    workHistory?: ProfessionalProfileUpdateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileUpdatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileUpdatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileUpdatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileUpdateskillsInput | string[]
    specializations?: ProfessionalProfileUpdatespecializationsInput | string[]
    achievements?: ProfessionalProfileUpdateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    workHistory?: ProfessionalProfileUpdateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileUpdatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileUpdatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileUpdatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileUpdateskillsInput | string[]
    specializations?: ProfessionalProfileUpdatespecializationsInput | string[]
    achievements?: ProfessionalProfileUpdateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolCreateInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupUncheckedCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUncheckedUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateManyInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SchoolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SchoolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StaffAssignmentCreateInput = {
    id?: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    staffProfile: StaffProfileCreateNestedOneWithoutAssignmentsInput
    school: SchoolCreateNestedOneWithoutStaffAssignmentsInput
  }

  export type StaffAssignmentUncheckedCreateInput = {
    id?: string
    staffProfileId: string
    schoolId: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staffProfile?: StaffProfileUpdateOneRequiredWithoutAssignmentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStaffAssignmentsNestedInput
  }

  export type StaffAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffAssignmentCreateManyInput = {
    id?: string
    staffProfileId: string
    schoolId: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentRelationCreateInput = {
    id?: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parentProfile: ParentProfileCreateNestedOneWithoutChildrenInput
    studentProfile: StudentProfileCreateNestedOneWithoutGuardiansInput
  }

  export type ParentStudentRelationUncheckedCreateInput = {
    id?: string
    parentProfileId: string
    studentProfileId: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentRelationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentProfile?: ParentProfileUpdateOneRequiredWithoutChildrenNestedInput
    studentProfile?: StudentProfileUpdateOneRequiredWithoutGuardiansNestedInput
  }

  export type ParentStudentRelationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentProfileId?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentRelationCreateManyInput = {
    id?: string
    parentProfileId: string
    studentProfileId: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentRelationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentRelationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentProfileId?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassSubjectCreateInput = {
    id?: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
    class: ClassCreateNestedOneWithoutClassSubjectsInput
    subject: SubjectCreateNestedOneWithoutClassSubjectsInput
    staffProfile: StaffProfileCreateNestedOneWithoutClassSubjectsInput
    school: SchoolCreateNestedOneWithoutClassSubjectsInput
  }

  export type ClassSubjectUncheckedCreateInput = {
    id?: string
    classId: string
    subjectId: string
    staffProfileId: string
    schoolId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type ClassSubjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
    class?: ClassUpdateOneRequiredWithoutClassSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutClassSubjectsNestedInput
    staffProfile?: StaffProfileUpdateOneRequiredWithoutClassSubjectsNestedInput
    school?: SchoolUpdateOneRequiredWithoutClassSubjectsNestedInput
  }

  export type ClassSubjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassSubjectCreateManyInput = {
    id?: string
    classId: string
    subjectId: string
    staffProfileId: string
    schoolId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type ClassSubjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassSubjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassCreateInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    school: SchoolCreateNestedOneWithoutClassesInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutClassInput
    students?: ClassStudentCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    schoolId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutClassInput
    students?: ClassStudentUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutClassNestedInput
    students?: ClassStudentUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    schoolId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutClassNestedInput
    students?: ClassStudentUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    schoolId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    schoolId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
  }

  export type ClassStudentCreateInput = {
    id?: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutStudentsInput
    studentProfile: StudentProfileCreateNestedOneWithoutClassesInput
  }

  export type ClassStudentUncheckedCreateInput = {
    id?: string
    classId: string
    studentProfileId: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassStudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    studentProfile?: StudentProfileUpdateOneRequiredWithoutClassesNestedInput
  }

  export type ClassStudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentCreateManyInput = {
    id?: string
    classId: string
    studentProfileId: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassStudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCardCreateInput = {
    id?: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    studentProfile: StudentProfileCreateNestedOneWithoutReportCardsInput
    school: SchoolCreateNestedOneWithoutReportCardsInput
    grades?: GradeCreateNestedManyWithoutReportCardInput
  }

  export type ReportCardUncheckedCreateInput = {
    id?: string
    studentProfileId: string
    schoolId: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    grades?: GradeUncheckedCreateNestedManyWithoutReportCardInput
  }

  export type ReportCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentProfile?: StudentProfileUpdateOneRequiredWithoutReportCardsNestedInput
    school?: SchoolUpdateOneRequiredWithoutReportCardsNestedInput
    grades?: GradeUpdateManyWithoutReportCardNestedInput
  }

  export type ReportCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: GradeUncheckedUpdateManyWithoutReportCardNestedInput
  }

  export type ReportCardCreateManyInput = {
    id?: string
    studentProfileId: string
    schoolId: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeCreateInput = {
    id?: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
    studentProfile: StudentProfileCreateNestedOneWithoutGradesInput
    reportCard: ReportCardCreateNestedOneWithoutGradesInput
    staffProfile: StaffProfileCreateNestedOneWithoutGradesInput
  }

  export type GradeUncheckedCreateInput = {
    id?: string
    studentProfileId: string
    reportCardId: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    staffProfileId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
  }

  export type GradeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
    studentProfile?: StudentProfileUpdateOneRequiredWithoutGradesNestedInput
    reportCard?: ReportCardUpdateOneRequiredWithoutGradesNestedInput
    staffProfile?: StaffProfileUpdateOneRequiredWithoutGradesNestedInput
  }

  export type GradeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    reportCardId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    staffProfileId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type GradeCreateManyInput = {
    id?: string
    studentProfileId: string
    reportCardId: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    staffProfileId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
  }

  export type GradeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type GradeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    reportCardId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    staffProfileId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type StudentProfileCreateInput = {
    id?: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    profile: ProfileCreateNestedOneWithoutStudentProfileInput
    guardians?: ParentStudentRelationCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardCreateNestedManyWithoutStudentProfileInput
    grades?: GradeCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileUncheckedCreateInput = {
    id?: string
    profileId: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    guardians?: ParentStudentRelationUncheckedCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceUncheckedCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutStudentProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneRequiredWithoutStudentProfileNestedInput
    guardians?: ParentStudentRelationUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guardians?: ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUncheckedUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileCreateManyInput = {
    id?: string
    profileId: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
  }

  export type StudentProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ParentProfileCreateInput = {
    id?: string
    relationship: string
    preferredLanguage?: string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutParentProfileInput
    children?: ParentStudentRelationCreateNestedManyWithoutParentProfileInput
  }

  export type ParentProfileUncheckedCreateInput = {
    id?: string
    profileId: string
    relationship: string
    preferredLanguage?: string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ParentStudentRelationUncheckedCreateNestedManyWithoutParentProfileInput
  }

  export type ParentProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutParentProfileNestedInput
    children?: ParentStudentRelationUpdateManyWithoutParentProfileNestedInput
  }

  export type ParentProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ParentStudentRelationUncheckedUpdateManyWithoutParentProfileNestedInput
  }

  export type ParentProfileCreateManyInput = {
    id?: string
    profileId: string
    relationship: string
    preferredLanguage?: string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceCreateInput = {
    id?: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
    studentProfile: StudentProfileCreateNestedOneWithoutAttendanceRecordsInput
    class: ClassCreateNestedOneWithoutAttendanceInput
  }

  export type AttendanceUncheckedCreateInput = {
    id?: string
    studentProfileId: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    classId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
  }

  export type AttendanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentProfile?: StudentProfileUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceCreateManyInput = {
    id?: string
    studentProfileId: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    classId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
  }

  export type AttendanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffProfileCreateInput = {
    id?: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    profile: ProfileCreateNestedOneWithoutStaffProfileInput
    assignments?: StaffAssignmentCreateNestedManyWithoutStaffProfileInput
    subjects?: SubjectAssignmentCreateNestedManyWithoutStaffProfileInput
    grades?: GradeCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileUncheckedCreateInput = {
    id?: string
    profileId: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    subjects?: SubjectAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    profile?: ProfileUpdateOneRequiredWithoutStaffProfileNestedInput
    assignments?: StaffAssignmentUpdateManyWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutStaffProfileNestedInput
  }

  export type StaffProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutStaffProfileNestedInput
  }

  export type StaffProfileCreateManyInput = {
    id?: string
    profileId: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
  }

  export type StaffProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
  }

  export type StaffProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
  }

  export type SubjectCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    gradeLevel?: SubjectCreategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    credits?: number | null
    prerequisites?: SubjectCreateprerequisitesInput | string[]
    corequisites?: SubjectCreatecorequisitesInput | string[]
    learningOutcomes?: SubjectCreatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    assignments?: SubjectAssignmentCreateNestedManyWithoutSubjectInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    gradeLevel?: SubjectCreategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    credits?: number | null
    prerequisites?: SubjectCreateprerequisitesInput | string[]
    corequisites?: SubjectCreatecorequisitesInput | string[]
    learningOutcomes?: SubjectCreatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    assignments?: SubjectAssignmentUncheckedCreateNestedManyWithoutSubjectInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    gradeLevel?: SubjectUpdategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: NullableFloatFieldUpdateOperationsInput | number | null
    prerequisites?: SubjectUpdateprerequisitesInput | string[]
    corequisites?: SubjectUpdatecorequisitesInput | string[]
    learningOutcomes?: SubjectUpdatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    assignments?: SubjectAssignmentUpdateManyWithoutSubjectNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    gradeLevel?: SubjectUpdategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: NullableFloatFieldUpdateOperationsInput | number | null
    prerequisites?: SubjectUpdateprerequisitesInput | string[]
    corequisites?: SubjectUpdatecorequisitesInput | string[]
    learningOutcomes?: SubjectUpdatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    assignments?: SubjectAssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    gradeLevel?: SubjectCreategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    credits?: number | null
    prerequisites?: SubjectCreateprerequisitesInput | string[]
    corequisites?: SubjectCreatecorequisitesInput | string[]
    learningOutcomes?: SubjectCreatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SubjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    gradeLevel?: SubjectUpdategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: NullableFloatFieldUpdateOperationsInput | number | null
    prerequisites?: SubjectUpdateprerequisitesInput | string[]
    corequisites?: SubjectUpdatecorequisitesInput | string[]
    learningOutcomes?: SubjectUpdatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    gradeLevel?: SubjectUpdategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: NullableFloatFieldUpdateOperationsInput | number | null
    prerequisites?: SubjectUpdateprerequisitesInput | string[]
    corequisites?: SubjectUpdatecorequisitesInput | string[]
    learningOutcomes?: SubjectUpdatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SubjectAssignmentCreateInput = {
    id?: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    staffProfile: StaffProfileCreateNestedOneWithoutSubjectsInput
  }

  export type SubjectAssignmentUncheckedCreateInput = {
    id?: string
    subjectId: string
    staffProfileId: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    staffProfile?: StaffProfileUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type SubjectAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectAssignmentCreateManyInput = {
    id?: string
    subjectId: string
    staffProfileId: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunicationGroupCreateInput = {
    id?: string
    name: string
    type: string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutCommunicationGroupsInput
  }

  export type CommunicationGroupUncheckedCreateInput = {
    id?: string
    schoolId: string
    name: string
    type: string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommunicationGroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutCommunicationGroupsNestedInput
  }

  export type CommunicationGroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunicationGroupCreateManyInput = {
    id?: string
    schoolId: string
    name: string
    type: string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommunicationGroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunicationGroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolRoleCreateInput = {
    id?: string
    userId: string
    role: $Enums.Role
    permissions?: SchoolRoleCreatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleCreatecommunicationPermissionsInput | string[]
    assignedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutSchoolRolesInput
  }

  export type SchoolRoleUncheckedCreateInput = {
    id?: string
    schoolId: string
    userId: string
    role: $Enums.Role
    permissions?: SchoolRoleCreatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleCreatecommunicationPermissionsInput | string[]
    assignedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolRoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    permissions?: SchoolRoleUpdatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleUpdatecommunicationPermissionsInput | string[]
    assignedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutSchoolRolesNestedInput
  }

  export type SchoolRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    permissions?: SchoolRoleUpdatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleUpdatecommunicationPermissionsInput | string[]
    assignedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolRoleCreateManyInput = {
    id?: string
    schoolId: string
    userId: string
    role: $Enums.Role
    permissions?: SchoolRoleCreatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleCreatecommunicationPermissionsInput | string[]
    assignedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolRoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    permissions?: SchoolRoleUpdatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleUpdatecommunicationPermissionsInput | string[]
    assignedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    permissions?: SchoolRoleUpdatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleUpdatecommunicationPermissionsInput | string[]
    assignedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateInput = {
    id?: string
    name: string
    originalName: string
    mimeType: string
    size: number
    url: string
    type: $Enums.FileType
    category: $Enums.FileCategory
    accessLevel?: $Enums.FileAccessLevel
    provider: $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId: string
    ownerType: $Enums.EntityType
    accessibleTo?: FileCreateaccessibleToInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    quota?: FileQuotaCreateNestedOneWithoutFileInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    name: string
    originalName: string
    mimeType: string
    size: number
    url: string
    type: $Enums.FileType
    category: $Enums.FileCategory
    accessLevel?: $Enums.FileAccessLevel
    provider: $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId: string
    ownerType: $Enums.EntityType
    accessibleTo?: FileCreateaccessibleToInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    quota?: FileQuotaUncheckedCreateNestedOneWithoutFileInput
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelFieldUpdateOperationsInput | $Enums.FileAccessLevel
    provider?: EnumStorageProviderFieldUpdateOperationsInput | $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId?: StringFieldUpdateOperationsInput | string
    ownerType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    accessibleTo?: FileUpdateaccessibleToInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quota?: FileQuotaUpdateOneWithoutFileNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelFieldUpdateOperationsInput | $Enums.FileAccessLevel
    provider?: EnumStorageProviderFieldUpdateOperationsInput | $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId?: StringFieldUpdateOperationsInput | string
    ownerType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    accessibleTo?: FileUpdateaccessibleToInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quota?: FileQuotaUncheckedUpdateOneWithoutFileNestedInput
  }

  export type FileCreateManyInput = {
    id?: string
    name: string
    originalName: string
    mimeType: string
    size: number
    url: string
    type: $Enums.FileType
    category: $Enums.FileCategory
    accessLevel?: $Enums.FileAccessLevel
    provider: $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId: string
    ownerType: $Enums.EntityType
    accessibleTo?: FileCreateaccessibleToInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelFieldUpdateOperationsInput | $Enums.FileAccessLevel
    provider?: EnumStorageProviderFieldUpdateOperationsInput | $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId?: StringFieldUpdateOperationsInput | string
    ownerType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    accessibleTo?: FileUpdateaccessibleToInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelFieldUpdateOperationsInput | $Enums.FileAccessLevel
    provider?: EnumStorageProviderFieldUpdateOperationsInput | $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId?: StringFieldUpdateOperationsInput | string
    ownerType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    accessibleTo?: FileUpdateaccessibleToInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileQuotaCreateInput = {
    id?: string
    totalSize: number
    usedSize: number
    maxSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
    file: FileCreateNestedOneWithoutQuotaInput
  }

  export type FileQuotaUncheckedCreateInput = {
    id?: string
    fileId: string
    totalSize: number
    usedSize: number
    maxSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileQuotaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: IntFieldUpdateOperationsInput | number
    usedSize?: IntFieldUpdateOperationsInput | number
    maxSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: FileUpdateOneRequiredWithoutQuotaNestedInput
  }

  export type FileQuotaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
    totalSize?: IntFieldUpdateOperationsInput | number
    usedSize?: IntFieldUpdateOperationsInput | number
    maxSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileQuotaCreateManyInput = {
    id?: string
    fileId: string
    totalSize: number
    usedSize: number
    maxSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileQuotaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: IntFieldUpdateOperationsInput | number
    usedSize?: IntFieldUpdateOperationsInput | number
    maxSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileQuotaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
    totalSize?: IntFieldUpdateOperationsInput | number
    usedSize?: IntFieldUpdateOperationsInput | number
    maxSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type EnumVerificationStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumVerificationStatusNullableFilter<$PrismaModel> | $Enums.VerificationStatus | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumEmploymentEligibilityStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentEligibilityStatus | EnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentEligibilityStatus[] | ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentEligibilityStatus[] | ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentEligibilityStatusFilter<$PrismaModel> | $Enums.EmploymentEligibilityStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProfileNullableRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type KYCDocumentListRelationFilter = {
    every?: KYCDocumentWhereInput
    some?: KYCDocumentWhereInput
    none?: KYCDocumentWhereInput
  }

  export type VerificationHistoryListRelationFilter = {
    every?: VerificationHistoryWhereInput
    some?: VerificationHistoryWhereInput
    none?: VerificationHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type KYCDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VerificationHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    roles?: SortOrder
    permissions?: SortOrder
    status?: SortOrder
    kycStatus?: SortOrder
    kycVerifiedAt?: SortOrder
    kycDocumentIds?: SortOrder
    employmentStatus?: SortOrder
    employmentVerifiedAt?: SortOrder
    employmentDocumentIds?: SortOrder
    socialAccessEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    kycStatus?: SortOrder
    kycVerifiedAt?: SortOrder
    employmentStatus?: SortOrder
    employmentVerifiedAt?: SortOrder
    socialAccessEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    kycStatus?: SortOrder
    kycVerifiedAt?: SortOrder
    employmentStatus?: SortOrder
    employmentVerifiedAt?: SortOrder
    socialAccessEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type EnumVerificationStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumVerificationStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.VerificationStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumVerificationStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumVerificationStatusNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumEmploymentEligibilityStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentEligibilityStatus | EnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentEligibilityStatus[] | ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentEligibilityStatus[] | ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentEligibilityStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentEligibilityStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentEligibilityStatusFilter<$PrismaModel>
    _max?: NestedEnumEmploymentEligibilityStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumOTPStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OTPStatus | EnumOTPStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OTPStatus[] | ListEnumOTPStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OTPStatus[] | ListEnumOTPStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOTPStatusFilter<$PrismaModel> | $Enums.OTPStatus
  }

  export type OTPCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type OTPMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type OTPMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumOTPStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OTPStatus | EnumOTPStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OTPStatus[] | ListEnumOTPStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OTPStatus[] | ListEnumOTPStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOTPStatusWithAggregatesFilter<$PrismaModel> | $Enums.OTPStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOTPStatusFilter<$PrismaModel>
    _max?: NestedEnumOTPStatusFilter<$PrismaModel>
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type EnumVerificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusFilter<$PrismaModel> | $Enums.VerificationStatus
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type KYCDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    documentUrls?: SortOrder
    verifiedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KYCDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KYCDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type EnumVerificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.VerificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVerificationStatusFilter<$PrismaModel>
    _max?: NestedEnumVerificationStatusFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntityTypeFilter<$PrismaModel> | $Enums.EntityType
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type VerificationHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.EntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumEntityTypeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumOccupationTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OccupationType | EnumOccupationTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OccupationType[] | ListEnumOccupationTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OccupationType[] | ListEnumOccupationTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOccupationTypeNullableFilter<$PrismaModel> | $Enums.OccupationType | null
  }
  export type JsonNullableListFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ProfessionalProfileNullableRelationFilter = {
    is?: ProfessionalProfileWhereInput | null
    isNot?: ProfessionalProfileWhereInput | null
  }

  export type StudentProfileNullableRelationFilter = {
    is?: StudentProfileWhereInput | null
    isNot?: StudentProfileWhereInput | null
  }

  export type ParentProfileNullableRelationFilter = {
    is?: ParentProfileWhereInput | null
    isNot?: ParentProfileWhereInput | null
  }

  export type StaffProfileNullableRelationFilter = {
    is?: StaffProfileWhereInput | null
    isNot?: StaffProfileWhereInput | null
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    dateOfBirth?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    gender?: SortOrder
    nationality?: SortOrder
    emergencyContact?: SortOrder
    occupation?: SortOrder
    occupationType?: SortOrder
    employer?: SortOrder
    employerDetails?: SortOrder
    workAddress?: SortOrder
    education?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    settings?: SortOrder
    communicationPreferences?: SortOrder
    lastLoginAt?: SortOrder
    lastActivityAt?: SortOrder
    deviceInfo?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    dateOfBirth?: SortOrder
    phoneNumber?: SortOrder
    gender?: SortOrder
    nationality?: SortOrder
    occupation?: SortOrder
    occupationType?: SortOrder
    employer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    lastActivityAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    dateOfBirth?: SortOrder
    phoneNumber?: SortOrder
    gender?: SortOrder
    nationality?: SortOrder
    occupation?: SortOrder
    occupationType?: SortOrder
    employer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    lastActivityAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumOccupationTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OccupationType | EnumOccupationTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OccupationType[] | ListEnumOccupationTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OccupationType[] | ListEnumOccupationTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOccupationTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.OccupationType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOccupationTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumOccupationTypeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type ProfessionalProfileCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    currentPosition?: SortOrder
    yearsOfExperience?: SortOrder
    workHistory?: SortOrder
    teachingExperience?: SortOrder
    subjectsQualified?: SortOrder
    adminExperience?: SortOrder
    certifications?: SortOrder
    licenses?: SortOrder
    skills?: SortOrder
    specializations?: SortOrder
    achievements?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalProfileAvgOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
  }

  export type ProfessionalProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    currentPosition?: SortOrder
    yearsOfExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalProfileMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    currentPosition?: SortOrder
    yearsOfExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalProfileSumOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StaffAssignmentListRelationFilter = {
    every?: StaffAssignmentWhereInput
    some?: StaffAssignmentWhereInput
    none?: StaffAssignmentWhereInput
  }

  export type ReportCardListRelationFilter = {
    every?: ReportCardWhereInput
    some?: ReportCardWhereInput
    none?: ReportCardWhereInput
  }

  export type ClassSubjectListRelationFilter = {
    every?: ClassSubjectWhereInput
    some?: ClassSubjectWhereInput
    none?: ClassSubjectWhereInput
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type CommunicationGroupListRelationFilter = {
    every?: CommunicationGroupWhereInput
    some?: CommunicationGroupWhereInput
    none?: CommunicationGroupWhereInput
  }

  export type SchoolRoleListRelationFilter = {
    every?: SchoolRoleWhereInput
    some?: SchoolRoleWhereInput
    none?: SchoolRoleWhereInput
  }

  export type StaffAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommunicationGroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    registrationNumber?: SortOrder
    license?: SortOrder
    contact?: SortOrder
    address?: SortOrder
    facilities?: SortOrder
    capacity?: SortOrder
    curriculum?: SortOrder
    languages?: SortOrder
    operatingHours?: SortOrder
    termDates?: SortOrder
    verificationStatus?: SortOrder
    verifiedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    settings?: SortOrder
    communicationSettings?: SortOrder
    createdBy?: SortOrder
    ownershipDetails?: SortOrder
    systemApproval?: SortOrder
  }

  export type SchoolAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    registrationNumber?: SortOrder
    capacity?: SortOrder
    verificationStatus?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    registrationNumber?: SortOrder
    capacity?: SortOrder
    verificationStatus?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
  }

  export type SchoolSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StaffProfileRelationFilter = {
    is?: StaffProfileWhereInput
    isNot?: StaffProfileWhereInput
  }

  export type SchoolRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type StaffAssignmentStaffProfileIdSchoolIdRoleCompoundUniqueInput = {
    staffProfileId: string
    schoolId: string
    role: $Enums.Role
  }

  export type StaffAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type ParentProfileRelationFilter = {
    is?: ParentProfileWhereInput
    isNot?: ParentProfileWhereInput
  }

  export type StudentProfileRelationFilter = {
    is?: StudentProfileWhereInput
    isNot?: StudentProfileWhereInput
  }

  export type ParentStudentRelationParentProfileIdStudentProfileIdCompoundUniqueInput = {
    parentProfileId: string
    studentProfileId: string
  }

  export type ParentStudentRelationCountOrderByAggregateInput = {
    id?: SortOrder
    parentProfileId?: SortOrder
    studentProfileId?: SortOrder
    relationship?: SortOrder
    isPrimary?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentStudentRelationMaxOrderByAggregateInput = {
    id?: SortOrder
    parentProfileId?: SortOrder
    studentProfileId?: SortOrder
    relationship?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentStudentRelationMinOrderByAggregateInput = {
    id?: SortOrder
    parentProfileId?: SortOrder
    studentProfileId?: SortOrder
    relationship?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type SubjectRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type ClassSubjectClassIdSubjectIdAcademicYearCompoundUniqueInput = {
    classId: string
    subjectId: string
    academicYear: string
  }

  export type ClassSubjectCountOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    schedule?: SortOrder
    syllabus?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    term?: SortOrder
    maxStudents?: SortOrder
    currentEnrollment?: SortOrder
  }

  export type ClassSubjectAvgOrderByAggregateInput = {
    maxStudents?: SortOrder
    currentEnrollment?: SortOrder
  }

  export type ClassSubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    term?: SortOrder
    maxStudents?: SortOrder
    currentEnrollment?: SortOrder
  }

  export type ClassSubjectMinOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    term?: SortOrder
    maxStudents?: SortOrder
    currentEnrollment?: SortOrder
  }

  export type ClassSubjectSumOrderByAggregateInput = {
    maxStudents?: SortOrder
    currentEnrollment?: SortOrder
  }

  export type ClassStudentListRelationFilter = {
    every?: ClassStudentWhereInput
    some?: ClassStudentWhereInput
    none?: ClassStudentWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: AttendanceWhereInput
    some?: AttendanceWhereInput
    none?: AttendanceWhereInput
  }

  export type ClassStudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassSchoolIdNameAcademicYearCompoundUniqueInput = {
    schoolId: string
    name: string
    academicYear: string
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    section?: SortOrder
    academicYear?: SortOrder
    capacity?: SortOrder
    schedule?: SortOrder
    schoolId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    classMasterId?: SortOrder
    classMasterHistory?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    section?: SortOrder
    academicYear?: SortOrder
    capacity?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    classMasterId?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    section?: SortOrder
    academicYear?: SortOrder
    capacity?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    classMasterId?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type ClassStudentClassIdStudentProfileIdCompoundUniqueInput = {
    classId: string
    studentProfileId: string
  }

  export type ClassStudentCountOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    studentProfileId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassStudentMaxOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    studentProfileId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassStudentMinOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    studentProfileId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumReportCardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportCardStatus | EnumReportCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportCardStatus[] | ListEnumReportCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportCardStatus[] | ListEnumReportCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReportCardStatusFilter<$PrismaModel> | $Enums.ReportCardStatus
  }

  export type GradeListRelationFilter = {
    every?: GradeWhereInput
    some?: GradeWhereInput
    none?: GradeWhereInput
  }

  export type GradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportCardCountOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    schoolId?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    teacherComments?: SortOrder
    principalComments?: SortOrder
    attendance?: SortOrder
    status?: SortOrder
    publishedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportCardMaxOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    schoolId?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    teacherComments?: SortOrder
    principalComments?: SortOrder
    status?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportCardMinOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    schoolId?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    teacherComments?: SortOrder
    principalComments?: SortOrder
    status?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumReportCardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportCardStatus | EnumReportCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportCardStatus[] | ListEnumReportCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportCardStatus[] | ListEnumReportCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReportCardStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReportCardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportCardStatusFilter<$PrismaModel>
    _max?: NestedEnumReportCardStatusFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumGradeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeStatus | EnumGradeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GradeStatus[] | ListEnumGradeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradeStatus[] | ListEnumGradeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGradeStatusFilter<$PrismaModel> | $Enums.GradeStatus
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ReportCardRelationFilter = {
    is?: ReportCardWhereInput
    isNot?: ReportCardWhereInput
  }

  export type GradeCountOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    reportCardId?: SortOrder
    subjectId?: SortOrder
    teacherId?: SortOrder
    grade?: SortOrder
    comments?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    status?: SortOrder
    staffProfileId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    weightage?: SortOrder
  }

  export type GradeAvgOrderByAggregateInput = {
    grade?: SortOrder
    weightage?: SortOrder
  }

  export type GradeMaxOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    reportCardId?: SortOrder
    subjectId?: SortOrder
    teacherId?: SortOrder
    grade?: SortOrder
    comments?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    status?: SortOrder
    staffProfileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    weightage?: SortOrder
  }

  export type GradeMinOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    reportCardId?: SortOrder
    subjectId?: SortOrder
    teacherId?: SortOrder
    grade?: SortOrder
    comments?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    status?: SortOrder
    staffProfileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    weightage?: SortOrder
  }

  export type GradeSumOrderByAggregateInput = {
    grade?: SortOrder
    weightage?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumGradeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeStatus | EnumGradeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GradeStatus[] | ListEnumGradeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradeStatus[] | ListEnumGradeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGradeStatusWithAggregatesFilter<$PrismaModel> | $Enums.GradeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGradeStatusFilter<$PrismaModel>
    _max?: NestedEnumGradeStatusFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ParentStudentRelationListRelationFilter = {
    every?: ParentStudentRelationWhereInput
    some?: ParentStudentRelationWhereInput
    none?: ParentStudentRelationWhereInput
  }

  export type ParentStudentRelationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentProfileCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    admissionNumber?: SortOrder
    enrollmentDate?: SortOrder
    currentGrade?: SortOrder
    previousSchools?: SortOrder
    learningProgress?: SortOrder
    achievements?: SortOrder
    extracurricular?: SortOrder
    specialNeeds?: SortOrder
    medicalInfo?: SortOrder
    dietaryRestrictions?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGPA?: SortOrder
    academicStanding?: SortOrder
    attendanceRate?: SortOrder
    lastAttendanceDate?: SortOrder
  }

  export type StudentProfileAvgOrderByAggregateInput = {
    currentGPA?: SortOrder
    attendanceRate?: SortOrder
  }

  export type StudentProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    admissionNumber?: SortOrder
    enrollmentDate?: SortOrder
    currentGrade?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGPA?: SortOrder
    academicStanding?: SortOrder
    attendanceRate?: SortOrder
    lastAttendanceDate?: SortOrder
  }

  export type StudentProfileMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    admissionNumber?: SortOrder
    enrollmentDate?: SortOrder
    currentGrade?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGPA?: SortOrder
    academicStanding?: SortOrder
    attendanceRate?: SortOrder
    lastAttendanceDate?: SortOrder
  }

  export type StudentProfileSumOrderByAggregateInput = {
    currentGPA?: SortOrder
    attendanceRate?: SortOrder
  }

  export type ParentProfileCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    relationship?: SortOrder
    preferredLanguage?: SortOrder
    communicationPreferences?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    relationship?: SortOrder
    preferredLanguage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentProfileMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    relationship?: SortOrder
    preferredLanguage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceStudentProfileIdDateCompoundUniqueInput = {
    studentProfileId: string
    date: Date | string
  }

  export type AttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    timeIn?: SortOrder
    timeOut?: SortOrder
    reason?: SortOrder
    isExcused?: SortOrder
    notes?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    verifiedBy?: SortOrder
    classMasterId?: SortOrder
    classId?: SortOrder
    recordedBy?: SortOrder
    modifiedBy?: SortOrder
    modifiedAt?: SortOrder
    verificationNotes?: SortOrder
  }

  export type AttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    timeIn?: SortOrder
    timeOut?: SortOrder
    reason?: SortOrder
    isExcused?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    verifiedBy?: SortOrder
    classMasterId?: SortOrder
    classId?: SortOrder
    recordedBy?: SortOrder
    modifiedBy?: SortOrder
    modifiedAt?: SortOrder
    verificationNotes?: SortOrder
  }

  export type AttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    studentProfileId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    timeIn?: SortOrder
    timeOut?: SortOrder
    reason?: SortOrder
    isExcused?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    verifiedBy?: SortOrder
    classMasterId?: SortOrder
    classId?: SortOrder
    recordedBy?: SortOrder
    modifiedBy?: SortOrder
    modifiedAt?: SortOrder
    verificationNotes?: SortOrder
  }

  export type SubjectAssignmentListRelationFilter = {
    every?: SubjectAssignmentWhereInput
    some?: SubjectAssignmentWhereInput
    none?: SubjectAssignmentWhereInput
  }

  export type SubjectAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffProfileCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    employeeId?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employmentType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    schedule?: SortOrder
    responsibilities?: SortOrder
    teachingHours?: SortOrder
    specializations?: SortOrder
  }

  export type StaffProfileAvgOrderByAggregateInput = {
    teachingHours?: SortOrder
  }

  export type StaffProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    employeeId?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employmentType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    teachingHours?: SortOrder
  }

  export type StaffProfileMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    employeeId?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employmentType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    teachingHours?: SortOrder
  }

  export type StaffProfileSumOrderByAggregateInput = {
    teachingHours?: SortOrder
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    gradeLevel?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    credits?: SortOrder
    prerequisites?: SortOrder
    corequisites?: SortOrder
    learningOutcomes?: SortOrder
    assessmentCriteria?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    credits?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    credits?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    credits?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    credits?: SortOrder
  }

  export type SubjectAssignmentSubjectIdStaffProfileIdAcademicYearCompoundUniqueInput = {
    subjectId: string
    staffProfileId: string
    academicYear: string
  }

  export type SubjectAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    academicYear?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    academicYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    staffProfileId?: SortOrder
    academicYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommunicationGroupCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    filters?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommunicationGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommunicationGroupMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolRoleSchoolIdUserIdRoleCompoundUniqueInput = {
    schoolId: string
    userId: string
    role: $Enums.Role
  }

  export type SchoolRoleCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    communicationPermissions?: SortOrder
    assignedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    assignedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolRoleMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    assignedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumFileTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FileType | EnumFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FileType[] | ListEnumFileTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileType[] | ListEnumFileTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFileTypeFilter<$PrismaModel> | $Enums.FileType
  }

  export type EnumFileCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.FileCategory | EnumFileCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFileCategoryFilter<$PrismaModel> | $Enums.FileCategory
  }

  export type EnumFileAccessLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.FileAccessLevel | EnumFileAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.FileAccessLevel[] | ListEnumFileAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileAccessLevel[] | ListEnumFileAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumFileAccessLevelFilter<$PrismaModel> | $Enums.FileAccessLevel
  }

  export type EnumStorageProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageProvider | EnumStorageProviderFieldRefInput<$PrismaModel>
    in?: $Enums.StorageProvider[] | ListEnumStorageProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorageProvider[] | ListEnumStorageProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumStorageProviderFilter<$PrismaModel> | $Enums.StorageProvider
  }

  export type FileQuotaNullableRelationFilter = {
    is?: FileQuotaWhereInput | null
    isNot?: FileQuotaWhereInput | null
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    url?: SortOrder
    type?: SortOrder
    category?: SortOrder
    accessLevel?: SortOrder
    provider?: SortOrder
    metadata?: SortOrder
    ownerId?: SortOrder
    ownerType?: SortOrder
    accessibleTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    url?: SortOrder
    type?: SortOrder
    category?: SortOrder
    accessLevel?: SortOrder
    provider?: SortOrder
    ownerId?: SortOrder
    ownerType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    url?: SortOrder
    type?: SortOrder
    category?: SortOrder
    accessLevel?: SortOrder
    provider?: SortOrder
    ownerId?: SortOrder
    ownerType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type EnumFileTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileType | EnumFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FileType[] | ListEnumFileTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileType[] | ListEnumFileTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFileTypeWithAggregatesFilter<$PrismaModel> | $Enums.FileType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileTypeFilter<$PrismaModel>
    _max?: NestedEnumFileTypeFilter<$PrismaModel>
  }

  export type EnumFileCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileCategory | EnumFileCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFileCategoryWithAggregatesFilter<$PrismaModel> | $Enums.FileCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileCategoryFilter<$PrismaModel>
    _max?: NestedEnumFileCategoryFilter<$PrismaModel>
  }

  export type EnumFileAccessLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileAccessLevel | EnumFileAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.FileAccessLevel[] | ListEnumFileAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileAccessLevel[] | ListEnumFileAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumFileAccessLevelWithAggregatesFilter<$PrismaModel> | $Enums.FileAccessLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileAccessLevelFilter<$PrismaModel>
    _max?: NestedEnumFileAccessLevelFilter<$PrismaModel>
  }

  export type EnumStorageProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageProvider | EnumStorageProviderFieldRefInput<$PrismaModel>
    in?: $Enums.StorageProvider[] | ListEnumStorageProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorageProvider[] | ListEnumStorageProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumStorageProviderWithAggregatesFilter<$PrismaModel> | $Enums.StorageProvider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStorageProviderFilter<$PrismaModel>
    _max?: NestedEnumStorageProviderFilter<$PrismaModel>
  }

  export type FileRelationFilter = {
    is?: FileWhereInput
    isNot?: FileWhereInput
  }

  export type FileQuotaCountOrderByAggregateInput = {
    id?: SortOrder
    fileId?: SortOrder
    totalSize?: SortOrder
    usedSize?: SortOrder
    maxSize?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileQuotaAvgOrderByAggregateInput = {
    totalSize?: SortOrder
    usedSize?: SortOrder
    maxSize?: SortOrder
  }

  export type FileQuotaMaxOrderByAggregateInput = {
    id?: SortOrder
    fileId?: SortOrder
    totalSize?: SortOrder
    usedSize?: SortOrder
    maxSize?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileQuotaMinOrderByAggregateInput = {
    id?: SortOrder
    fileId?: SortOrder
    totalSize?: SortOrder
    usedSize?: SortOrder
    maxSize?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileQuotaSumOrderByAggregateInput = {
    totalSize?: SortOrder
    usedSize?: SortOrder
    maxSize?: SortOrder
  }

  export type UserCreaterolesInput = {
    set: $Enums.Role[]
  }

  export type UserCreatepermissionsInput = {
    set: string[]
  }

  export type UserCreatekycDocumentIdsInput = {
    set: string[]
  }

  export type UserCreateemploymentDocumentIdsInput = {
    set: string[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type KYCDocumentCreateNestedManyWithoutUserInput = {
    create?: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput> | KYCDocumentCreateWithoutUserInput[] | KYCDocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KYCDocumentCreateOrConnectWithoutUserInput | KYCDocumentCreateOrConnectWithoutUserInput[]
    createMany?: KYCDocumentCreateManyUserInputEnvelope
    connect?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
  }

  export type VerificationHistoryCreateNestedManyWithoutVerifierInput = {
    create?: XOR<VerificationHistoryCreateWithoutVerifierInput, VerificationHistoryUncheckedCreateWithoutVerifierInput> | VerificationHistoryCreateWithoutVerifierInput[] | VerificationHistoryUncheckedCreateWithoutVerifierInput[]
    connectOrCreate?: VerificationHistoryCreateOrConnectWithoutVerifierInput | VerificationHistoryCreateOrConnectWithoutVerifierInput[]
    createMany?: VerificationHistoryCreateManyVerifierInputEnvelope
    connect?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type KYCDocumentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput> | KYCDocumentCreateWithoutUserInput[] | KYCDocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KYCDocumentCreateOrConnectWithoutUserInput | KYCDocumentCreateOrConnectWithoutUserInput[]
    createMany?: KYCDocumentCreateManyUserInputEnvelope
    connect?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
  }

  export type VerificationHistoryUncheckedCreateNestedManyWithoutVerifierInput = {
    create?: XOR<VerificationHistoryCreateWithoutVerifierInput, VerificationHistoryUncheckedCreateWithoutVerifierInput> | VerificationHistoryCreateWithoutVerifierInput[] | VerificationHistoryUncheckedCreateWithoutVerifierInput[]
    connectOrCreate?: VerificationHistoryCreateOrConnectWithoutVerifierInput | VerificationHistoryCreateOrConnectWithoutVerifierInput[]
    createMany?: VerificationHistoryCreateManyVerifierInputEnvelope
    connect?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdaterolesInput = {
    set?: $Enums.Role[]
    push?: $Enums.Role | $Enums.Role[]
  }

  export type UserUpdatepermissionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type NullableEnumVerificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.VerificationStatus | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdatekycDocumentIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumEmploymentEligibilityStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmploymentEligibilityStatus
  }

  export type UserUpdateemploymentDocumentIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type KYCDocumentUpdateManyWithoutUserNestedInput = {
    create?: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput> | KYCDocumentCreateWithoutUserInput[] | KYCDocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KYCDocumentCreateOrConnectWithoutUserInput | KYCDocumentCreateOrConnectWithoutUserInput[]
    upsert?: KYCDocumentUpsertWithWhereUniqueWithoutUserInput | KYCDocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: KYCDocumentCreateManyUserInputEnvelope
    set?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
    disconnect?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
    delete?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
    connect?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
    update?: KYCDocumentUpdateWithWhereUniqueWithoutUserInput | KYCDocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: KYCDocumentUpdateManyWithWhereWithoutUserInput | KYCDocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: KYCDocumentScalarWhereInput | KYCDocumentScalarWhereInput[]
  }

  export type VerificationHistoryUpdateManyWithoutVerifierNestedInput = {
    create?: XOR<VerificationHistoryCreateWithoutVerifierInput, VerificationHistoryUncheckedCreateWithoutVerifierInput> | VerificationHistoryCreateWithoutVerifierInput[] | VerificationHistoryUncheckedCreateWithoutVerifierInput[]
    connectOrCreate?: VerificationHistoryCreateOrConnectWithoutVerifierInput | VerificationHistoryCreateOrConnectWithoutVerifierInput[]
    upsert?: VerificationHistoryUpsertWithWhereUniqueWithoutVerifierInput | VerificationHistoryUpsertWithWhereUniqueWithoutVerifierInput[]
    createMany?: VerificationHistoryCreateManyVerifierInputEnvelope
    set?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
    disconnect?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
    delete?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
    connect?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
    update?: VerificationHistoryUpdateWithWhereUniqueWithoutVerifierInput | VerificationHistoryUpdateWithWhereUniqueWithoutVerifierInput[]
    updateMany?: VerificationHistoryUpdateManyWithWhereWithoutVerifierInput | VerificationHistoryUpdateManyWithWhereWithoutVerifierInput[]
    deleteMany?: VerificationHistoryScalarWhereInput | VerificationHistoryScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type KYCDocumentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput> | KYCDocumentCreateWithoutUserInput[] | KYCDocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KYCDocumentCreateOrConnectWithoutUserInput | KYCDocumentCreateOrConnectWithoutUserInput[]
    upsert?: KYCDocumentUpsertWithWhereUniqueWithoutUserInput | KYCDocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: KYCDocumentCreateManyUserInputEnvelope
    set?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
    disconnect?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
    delete?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
    connect?: KYCDocumentWhereUniqueInput | KYCDocumentWhereUniqueInput[]
    update?: KYCDocumentUpdateWithWhereUniqueWithoutUserInput | KYCDocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: KYCDocumentUpdateManyWithWhereWithoutUserInput | KYCDocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: KYCDocumentScalarWhereInput | KYCDocumentScalarWhereInput[]
  }

  export type VerificationHistoryUncheckedUpdateManyWithoutVerifierNestedInput = {
    create?: XOR<VerificationHistoryCreateWithoutVerifierInput, VerificationHistoryUncheckedCreateWithoutVerifierInput> | VerificationHistoryCreateWithoutVerifierInput[] | VerificationHistoryUncheckedCreateWithoutVerifierInput[]
    connectOrCreate?: VerificationHistoryCreateOrConnectWithoutVerifierInput | VerificationHistoryCreateOrConnectWithoutVerifierInput[]
    upsert?: VerificationHistoryUpsertWithWhereUniqueWithoutVerifierInput | VerificationHistoryUpsertWithWhereUniqueWithoutVerifierInput[]
    createMany?: VerificationHistoryCreateManyVerifierInputEnvelope
    set?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
    disconnect?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
    delete?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
    connect?: VerificationHistoryWhereUniqueInput | VerificationHistoryWhereUniqueInput[]
    update?: VerificationHistoryUpdateWithWhereUniqueWithoutVerifierInput | VerificationHistoryUpdateWithWhereUniqueWithoutVerifierInput[]
    updateMany?: VerificationHistoryUpdateManyWithWhereWithoutVerifierInput | VerificationHistoryUpdateManyWithWhereWithoutVerifierInput[]
    deleteMany?: VerificationHistoryScalarWhereInput | VerificationHistoryScalarWhereInput[]
  }

  export type EnumOTPStatusFieldUpdateOperationsInput = {
    set?: $Enums.OTPStatus
  }

  export type KYCDocumentCreatedocumentUrlsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type EnumVerificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.VerificationStatus
  }

  export type KYCDocumentUpdatedocumentUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserCreateNestedOneWithoutVerificationsInput = {
    create?: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumEntityTypeFieldUpdateOperationsInput = {
    set?: $Enums.EntityType
  }

  export type UserUpdateOneWithoutVerificationsNestedInput = {
    create?: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationsInput
    upsert?: UserUpsertWithoutVerificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVerificationsInput, UserUpdateWithoutVerificationsInput>, UserUncheckedUpdateWithoutVerificationsInput>
  }

  export type ProfileCreateeducationInput = {
    set: InputJsonValue[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type ProfessionalProfileCreateNestedOneWithoutProfileInput = {
    create?: XOR<ProfessionalProfileCreateWithoutProfileInput, ProfessionalProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ProfessionalProfileCreateOrConnectWithoutProfileInput
    connect?: ProfessionalProfileWhereUniqueInput
  }

  export type StudentProfileCreateNestedOneWithoutProfileInput = {
    create?: XOR<StudentProfileCreateWithoutProfileInput, StudentProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutProfileInput
    connect?: StudentProfileWhereUniqueInput
  }

  export type ParentProfileCreateNestedOneWithoutProfileInput = {
    create?: XOR<ParentProfileCreateWithoutProfileInput, ParentProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ParentProfileCreateOrConnectWithoutProfileInput
    connect?: ParentProfileWhereUniqueInput
  }

  export type StaffProfileCreateNestedOneWithoutProfileInput = {
    create?: XOR<StaffProfileCreateWithoutProfileInput, StaffProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutProfileInput
    connect?: StaffProfileWhereUniqueInput
  }

  export type ProfessionalProfileUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<ProfessionalProfileCreateWithoutProfileInput, ProfessionalProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ProfessionalProfileCreateOrConnectWithoutProfileInput
    connect?: ProfessionalProfileWhereUniqueInput
  }

  export type StudentProfileUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<StudentProfileCreateWithoutProfileInput, StudentProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutProfileInput
    connect?: StudentProfileWhereUniqueInput
  }

  export type ParentProfileUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<ParentProfileCreateWithoutProfileInput, ParentProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ParentProfileCreateOrConnectWithoutProfileInput
    connect?: ParentProfileWhereUniqueInput
  }

  export type StaffProfileUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<StaffProfileCreateWithoutProfileInput, StaffProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutProfileInput
    connect?: StaffProfileWhereUniqueInput
  }

  export type NullableEnumOccupationTypeFieldUpdateOperationsInput = {
    set?: $Enums.OccupationType | null
  }

  export type ProfileUpdateeducationInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type ProfessionalProfileUpdateOneWithoutProfileNestedInput = {
    create?: XOR<ProfessionalProfileCreateWithoutProfileInput, ProfessionalProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ProfessionalProfileCreateOrConnectWithoutProfileInput
    upsert?: ProfessionalProfileUpsertWithoutProfileInput
    disconnect?: ProfessionalProfileWhereInput | boolean
    delete?: ProfessionalProfileWhereInput | boolean
    connect?: ProfessionalProfileWhereUniqueInput
    update?: XOR<XOR<ProfessionalProfileUpdateToOneWithWhereWithoutProfileInput, ProfessionalProfileUpdateWithoutProfileInput>, ProfessionalProfileUncheckedUpdateWithoutProfileInput>
  }

  export type StudentProfileUpdateOneWithoutProfileNestedInput = {
    create?: XOR<StudentProfileCreateWithoutProfileInput, StudentProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutProfileInput
    upsert?: StudentProfileUpsertWithoutProfileInput
    disconnect?: StudentProfileWhereInput | boolean
    delete?: StudentProfileWhereInput | boolean
    connect?: StudentProfileWhereUniqueInput
    update?: XOR<XOR<StudentProfileUpdateToOneWithWhereWithoutProfileInput, StudentProfileUpdateWithoutProfileInput>, StudentProfileUncheckedUpdateWithoutProfileInput>
  }

  export type ParentProfileUpdateOneWithoutProfileNestedInput = {
    create?: XOR<ParentProfileCreateWithoutProfileInput, ParentProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ParentProfileCreateOrConnectWithoutProfileInput
    upsert?: ParentProfileUpsertWithoutProfileInput
    disconnect?: ParentProfileWhereInput | boolean
    delete?: ParentProfileWhereInput | boolean
    connect?: ParentProfileWhereUniqueInput
    update?: XOR<XOR<ParentProfileUpdateToOneWithWhereWithoutProfileInput, ParentProfileUpdateWithoutProfileInput>, ParentProfileUncheckedUpdateWithoutProfileInput>
  }

  export type StaffProfileUpdateOneWithoutProfileNestedInput = {
    create?: XOR<StaffProfileCreateWithoutProfileInput, StaffProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutProfileInput
    upsert?: StaffProfileUpsertWithoutProfileInput
    disconnect?: StaffProfileWhereInput | boolean
    delete?: StaffProfileWhereInput | boolean
    connect?: StaffProfileWhereUniqueInput
    update?: XOR<XOR<StaffProfileUpdateToOneWithWhereWithoutProfileInput, StaffProfileUpdateWithoutProfileInput>, StaffProfileUncheckedUpdateWithoutProfileInput>
  }

  export type ProfessionalProfileUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<ProfessionalProfileCreateWithoutProfileInput, ProfessionalProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ProfessionalProfileCreateOrConnectWithoutProfileInput
    upsert?: ProfessionalProfileUpsertWithoutProfileInput
    disconnect?: ProfessionalProfileWhereInput | boolean
    delete?: ProfessionalProfileWhereInput | boolean
    connect?: ProfessionalProfileWhereUniqueInput
    update?: XOR<XOR<ProfessionalProfileUpdateToOneWithWhereWithoutProfileInput, ProfessionalProfileUpdateWithoutProfileInput>, ProfessionalProfileUncheckedUpdateWithoutProfileInput>
  }

  export type StudentProfileUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<StudentProfileCreateWithoutProfileInput, StudentProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutProfileInput
    upsert?: StudentProfileUpsertWithoutProfileInput
    disconnect?: StudentProfileWhereInput | boolean
    delete?: StudentProfileWhereInput | boolean
    connect?: StudentProfileWhereUniqueInput
    update?: XOR<XOR<StudentProfileUpdateToOneWithWhereWithoutProfileInput, StudentProfileUpdateWithoutProfileInput>, StudentProfileUncheckedUpdateWithoutProfileInput>
  }

  export type ParentProfileUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<ParentProfileCreateWithoutProfileInput, ParentProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ParentProfileCreateOrConnectWithoutProfileInput
    upsert?: ParentProfileUpsertWithoutProfileInput
    disconnect?: ParentProfileWhereInput | boolean
    delete?: ParentProfileWhereInput | boolean
    connect?: ParentProfileWhereUniqueInput
    update?: XOR<XOR<ParentProfileUpdateToOneWithWhereWithoutProfileInput, ParentProfileUpdateWithoutProfileInput>, ParentProfileUncheckedUpdateWithoutProfileInput>
  }

  export type StaffProfileUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<StaffProfileCreateWithoutProfileInput, StaffProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutProfileInput
    upsert?: StaffProfileUpsertWithoutProfileInput
    disconnect?: StaffProfileWhereInput | boolean
    delete?: StaffProfileWhereInput | boolean
    connect?: StaffProfileWhereUniqueInput
    update?: XOR<XOR<StaffProfileUpdateToOneWithWhereWithoutProfileInput, StaffProfileUpdateWithoutProfileInput>, StaffProfileUncheckedUpdateWithoutProfileInput>
  }

  export type ProfessionalProfileCreateworkHistoryInput = {
    set: InputJsonValue[]
  }

  export type ProfessionalProfileCreatesubjectsQualifiedInput = {
    set: string[]
  }

  export type ProfessionalProfileCreatecertificationsInput = {
    set: InputJsonValue[]
  }

  export type ProfessionalProfileCreatelicensesInput = {
    set: InputJsonValue[]
  }

  export type ProfessionalProfileCreateskillsInput = {
    set: string[]
  }

  export type ProfessionalProfileCreatespecializationsInput = {
    set: string[]
  }

  export type ProfessionalProfileCreateachievementsInput = {
    set: InputJsonValue[]
  }

  export type ProfileCreateNestedOneWithoutProfessionalProfileInput = {
    create?: XOR<ProfileCreateWithoutProfessionalProfileInput, ProfileUncheckedCreateWithoutProfessionalProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutProfessionalProfileInput
    connect?: ProfileWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfessionalProfileUpdateworkHistoryInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type ProfessionalProfileUpdatesubjectsQualifiedInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProfessionalProfileUpdatecertificationsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type ProfessionalProfileUpdatelicensesInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type ProfessionalProfileUpdateskillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProfessionalProfileUpdatespecializationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProfessionalProfileUpdateachievementsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type ProfileUpdateOneRequiredWithoutProfessionalProfileNestedInput = {
    create?: XOR<ProfileCreateWithoutProfessionalProfileInput, ProfileUncheckedCreateWithoutProfessionalProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutProfessionalProfileInput
    upsert?: ProfileUpsertWithoutProfessionalProfileInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutProfessionalProfileInput, ProfileUpdateWithoutProfessionalProfileInput>, ProfileUncheckedUpdateWithoutProfessionalProfileInput>
  }

  export type SchoolCreatefacilitiesInput = {
    set: string[]
  }

  export type SchoolCreatecurriculumInput = {
    set: string[]
  }

  export type SchoolCreatelanguagesInput = {
    set: string[]
  }

  export type SchoolCreatetermDatesInput = {
    set: InputJsonValue[]
  }

  export type StaffAssignmentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StaffAssignmentCreateWithoutSchoolInput, StaffAssignmentUncheckedCreateWithoutSchoolInput> | StaffAssignmentCreateWithoutSchoolInput[] | StaffAssignmentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffAssignmentCreateOrConnectWithoutSchoolInput | StaffAssignmentCreateOrConnectWithoutSchoolInput[]
    createMany?: StaffAssignmentCreateManySchoolInputEnvelope
    connect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
  }

  export type ReportCardCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ReportCardCreateWithoutSchoolInput, ReportCardUncheckedCreateWithoutSchoolInput> | ReportCardCreateWithoutSchoolInput[] | ReportCardUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ReportCardCreateOrConnectWithoutSchoolInput | ReportCardCreateOrConnectWithoutSchoolInput[]
    createMany?: ReportCardCreateManySchoolInputEnvelope
    connect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
  }

  export type ClassSubjectCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassSubjectCreateWithoutSchoolInput, ClassSubjectUncheckedCreateWithoutSchoolInput> | ClassSubjectCreateWithoutSchoolInput[] | ClassSubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutSchoolInput | ClassSubjectCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassSubjectCreateManySchoolInputEnvelope
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput> | ClassCreateWithoutSchoolInput[] | ClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutSchoolInput | ClassCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassCreateManySchoolInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type CommunicationGroupCreateNestedManyWithoutSchoolInput = {
    create?: XOR<CommunicationGroupCreateWithoutSchoolInput, CommunicationGroupUncheckedCreateWithoutSchoolInput> | CommunicationGroupCreateWithoutSchoolInput[] | CommunicationGroupUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: CommunicationGroupCreateOrConnectWithoutSchoolInput | CommunicationGroupCreateOrConnectWithoutSchoolInput[]
    createMany?: CommunicationGroupCreateManySchoolInputEnvelope
    connect?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
  }

  export type SchoolRoleCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolRoleCreateWithoutSchoolInput, SchoolRoleUncheckedCreateWithoutSchoolInput> | SchoolRoleCreateWithoutSchoolInput[] | SchoolRoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolRoleCreateOrConnectWithoutSchoolInput | SchoolRoleCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolRoleCreateManySchoolInputEnvelope
    connect?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
  }

  export type StaffAssignmentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StaffAssignmentCreateWithoutSchoolInput, StaffAssignmentUncheckedCreateWithoutSchoolInput> | StaffAssignmentCreateWithoutSchoolInput[] | StaffAssignmentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffAssignmentCreateOrConnectWithoutSchoolInput | StaffAssignmentCreateOrConnectWithoutSchoolInput[]
    createMany?: StaffAssignmentCreateManySchoolInputEnvelope
    connect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
  }

  export type ReportCardUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ReportCardCreateWithoutSchoolInput, ReportCardUncheckedCreateWithoutSchoolInput> | ReportCardCreateWithoutSchoolInput[] | ReportCardUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ReportCardCreateOrConnectWithoutSchoolInput | ReportCardCreateOrConnectWithoutSchoolInput[]
    createMany?: ReportCardCreateManySchoolInputEnvelope
    connect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
  }

  export type ClassSubjectUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassSubjectCreateWithoutSchoolInput, ClassSubjectUncheckedCreateWithoutSchoolInput> | ClassSubjectCreateWithoutSchoolInput[] | ClassSubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutSchoolInput | ClassSubjectCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassSubjectCreateManySchoolInputEnvelope
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput> | ClassCreateWithoutSchoolInput[] | ClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutSchoolInput | ClassCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassCreateManySchoolInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type CommunicationGroupUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<CommunicationGroupCreateWithoutSchoolInput, CommunicationGroupUncheckedCreateWithoutSchoolInput> | CommunicationGroupCreateWithoutSchoolInput[] | CommunicationGroupUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: CommunicationGroupCreateOrConnectWithoutSchoolInput | CommunicationGroupCreateOrConnectWithoutSchoolInput[]
    createMany?: CommunicationGroupCreateManySchoolInputEnvelope
    connect?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
  }

  export type SchoolRoleUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolRoleCreateWithoutSchoolInput, SchoolRoleUncheckedCreateWithoutSchoolInput> | SchoolRoleCreateWithoutSchoolInput[] | SchoolRoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolRoleCreateOrConnectWithoutSchoolInput | SchoolRoleCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolRoleCreateManySchoolInputEnvelope
    connect?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
  }

  export type SchoolUpdatefacilitiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SchoolUpdatecurriculumInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SchoolUpdatelanguagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SchoolUpdatetermDatesInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type StaffAssignmentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StaffAssignmentCreateWithoutSchoolInput, StaffAssignmentUncheckedCreateWithoutSchoolInput> | StaffAssignmentCreateWithoutSchoolInput[] | StaffAssignmentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffAssignmentCreateOrConnectWithoutSchoolInput | StaffAssignmentCreateOrConnectWithoutSchoolInput[]
    upsert?: StaffAssignmentUpsertWithWhereUniqueWithoutSchoolInput | StaffAssignmentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StaffAssignmentCreateManySchoolInputEnvelope
    set?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    disconnect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    delete?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    connect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    update?: StaffAssignmentUpdateWithWhereUniqueWithoutSchoolInput | StaffAssignmentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StaffAssignmentUpdateManyWithWhereWithoutSchoolInput | StaffAssignmentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StaffAssignmentScalarWhereInput | StaffAssignmentScalarWhereInput[]
  }

  export type ReportCardUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ReportCardCreateWithoutSchoolInput, ReportCardUncheckedCreateWithoutSchoolInput> | ReportCardCreateWithoutSchoolInput[] | ReportCardUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ReportCardCreateOrConnectWithoutSchoolInput | ReportCardCreateOrConnectWithoutSchoolInput[]
    upsert?: ReportCardUpsertWithWhereUniqueWithoutSchoolInput | ReportCardUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ReportCardCreateManySchoolInputEnvelope
    set?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    disconnect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    delete?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    connect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    update?: ReportCardUpdateWithWhereUniqueWithoutSchoolInput | ReportCardUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ReportCardUpdateManyWithWhereWithoutSchoolInput | ReportCardUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ReportCardScalarWhereInput | ReportCardScalarWhereInput[]
  }

  export type ClassSubjectUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassSubjectCreateWithoutSchoolInput, ClassSubjectUncheckedCreateWithoutSchoolInput> | ClassSubjectCreateWithoutSchoolInput[] | ClassSubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutSchoolInput | ClassSubjectCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassSubjectUpsertWithWhereUniqueWithoutSchoolInput | ClassSubjectUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassSubjectCreateManySchoolInputEnvelope
    set?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    disconnect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    delete?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    update?: ClassSubjectUpdateWithWhereUniqueWithoutSchoolInput | ClassSubjectUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassSubjectUpdateManyWithWhereWithoutSchoolInput | ClassSubjectUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput> | ClassCreateWithoutSchoolInput[] | ClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutSchoolInput | ClassCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutSchoolInput | ClassUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassCreateManySchoolInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutSchoolInput | ClassUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutSchoolInput | ClassUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type CommunicationGroupUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<CommunicationGroupCreateWithoutSchoolInput, CommunicationGroupUncheckedCreateWithoutSchoolInput> | CommunicationGroupCreateWithoutSchoolInput[] | CommunicationGroupUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: CommunicationGroupCreateOrConnectWithoutSchoolInput | CommunicationGroupCreateOrConnectWithoutSchoolInput[]
    upsert?: CommunicationGroupUpsertWithWhereUniqueWithoutSchoolInput | CommunicationGroupUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: CommunicationGroupCreateManySchoolInputEnvelope
    set?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
    disconnect?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
    delete?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
    connect?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
    update?: CommunicationGroupUpdateWithWhereUniqueWithoutSchoolInput | CommunicationGroupUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: CommunicationGroupUpdateManyWithWhereWithoutSchoolInput | CommunicationGroupUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: CommunicationGroupScalarWhereInput | CommunicationGroupScalarWhereInput[]
  }

  export type SchoolRoleUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolRoleCreateWithoutSchoolInput, SchoolRoleUncheckedCreateWithoutSchoolInput> | SchoolRoleCreateWithoutSchoolInput[] | SchoolRoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolRoleCreateOrConnectWithoutSchoolInput | SchoolRoleCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolRoleUpsertWithWhereUniqueWithoutSchoolInput | SchoolRoleUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolRoleCreateManySchoolInputEnvelope
    set?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
    disconnect?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
    delete?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
    connect?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
    update?: SchoolRoleUpdateWithWhereUniqueWithoutSchoolInput | SchoolRoleUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolRoleUpdateManyWithWhereWithoutSchoolInput | SchoolRoleUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolRoleScalarWhereInput | SchoolRoleScalarWhereInput[]
  }

  export type StaffAssignmentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StaffAssignmentCreateWithoutSchoolInput, StaffAssignmentUncheckedCreateWithoutSchoolInput> | StaffAssignmentCreateWithoutSchoolInput[] | StaffAssignmentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StaffAssignmentCreateOrConnectWithoutSchoolInput | StaffAssignmentCreateOrConnectWithoutSchoolInput[]
    upsert?: StaffAssignmentUpsertWithWhereUniqueWithoutSchoolInput | StaffAssignmentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StaffAssignmentCreateManySchoolInputEnvelope
    set?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    disconnect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    delete?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    connect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    update?: StaffAssignmentUpdateWithWhereUniqueWithoutSchoolInput | StaffAssignmentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StaffAssignmentUpdateManyWithWhereWithoutSchoolInput | StaffAssignmentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StaffAssignmentScalarWhereInput | StaffAssignmentScalarWhereInput[]
  }

  export type ReportCardUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ReportCardCreateWithoutSchoolInput, ReportCardUncheckedCreateWithoutSchoolInput> | ReportCardCreateWithoutSchoolInput[] | ReportCardUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ReportCardCreateOrConnectWithoutSchoolInput | ReportCardCreateOrConnectWithoutSchoolInput[]
    upsert?: ReportCardUpsertWithWhereUniqueWithoutSchoolInput | ReportCardUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ReportCardCreateManySchoolInputEnvelope
    set?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    disconnect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    delete?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    connect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    update?: ReportCardUpdateWithWhereUniqueWithoutSchoolInput | ReportCardUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ReportCardUpdateManyWithWhereWithoutSchoolInput | ReportCardUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ReportCardScalarWhereInput | ReportCardScalarWhereInput[]
  }

  export type ClassSubjectUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassSubjectCreateWithoutSchoolInput, ClassSubjectUncheckedCreateWithoutSchoolInput> | ClassSubjectCreateWithoutSchoolInput[] | ClassSubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutSchoolInput | ClassSubjectCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassSubjectUpsertWithWhereUniqueWithoutSchoolInput | ClassSubjectUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassSubjectCreateManySchoolInputEnvelope
    set?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    disconnect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    delete?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    update?: ClassSubjectUpdateWithWhereUniqueWithoutSchoolInput | ClassSubjectUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassSubjectUpdateManyWithWhereWithoutSchoolInput | ClassSubjectUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput> | ClassCreateWithoutSchoolInput[] | ClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutSchoolInput | ClassCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutSchoolInput | ClassUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassCreateManySchoolInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutSchoolInput | ClassUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutSchoolInput | ClassUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type CommunicationGroupUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<CommunicationGroupCreateWithoutSchoolInput, CommunicationGroupUncheckedCreateWithoutSchoolInput> | CommunicationGroupCreateWithoutSchoolInput[] | CommunicationGroupUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: CommunicationGroupCreateOrConnectWithoutSchoolInput | CommunicationGroupCreateOrConnectWithoutSchoolInput[]
    upsert?: CommunicationGroupUpsertWithWhereUniqueWithoutSchoolInput | CommunicationGroupUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: CommunicationGroupCreateManySchoolInputEnvelope
    set?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
    disconnect?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
    delete?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
    connect?: CommunicationGroupWhereUniqueInput | CommunicationGroupWhereUniqueInput[]
    update?: CommunicationGroupUpdateWithWhereUniqueWithoutSchoolInput | CommunicationGroupUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: CommunicationGroupUpdateManyWithWhereWithoutSchoolInput | CommunicationGroupUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: CommunicationGroupScalarWhereInput | CommunicationGroupScalarWhereInput[]
  }

  export type SchoolRoleUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolRoleCreateWithoutSchoolInput, SchoolRoleUncheckedCreateWithoutSchoolInput> | SchoolRoleCreateWithoutSchoolInput[] | SchoolRoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolRoleCreateOrConnectWithoutSchoolInput | SchoolRoleCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolRoleUpsertWithWhereUniqueWithoutSchoolInput | SchoolRoleUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolRoleCreateManySchoolInputEnvelope
    set?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
    disconnect?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
    delete?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
    connect?: SchoolRoleWhereUniqueInput | SchoolRoleWhereUniqueInput[]
    update?: SchoolRoleUpdateWithWhereUniqueWithoutSchoolInput | SchoolRoleUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolRoleUpdateManyWithWhereWithoutSchoolInput | SchoolRoleUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolRoleScalarWhereInput | SchoolRoleScalarWhereInput[]
  }

  export type StaffProfileCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<StaffProfileCreateWithoutAssignmentsInput, StaffProfileUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutAssignmentsInput
    connect?: StaffProfileWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutStaffAssignmentsInput = {
    create?: XOR<SchoolCreateWithoutStaffAssignmentsInput, SchoolUncheckedCreateWithoutStaffAssignmentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStaffAssignmentsInput
    connect?: SchoolWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type StaffProfileUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<StaffProfileCreateWithoutAssignmentsInput, StaffProfileUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutAssignmentsInput
    upsert?: StaffProfileUpsertWithoutAssignmentsInput
    connect?: StaffProfileWhereUniqueInput
    update?: XOR<XOR<StaffProfileUpdateToOneWithWhereWithoutAssignmentsInput, StaffProfileUpdateWithoutAssignmentsInput>, StaffProfileUncheckedUpdateWithoutAssignmentsInput>
  }

  export type SchoolUpdateOneRequiredWithoutStaffAssignmentsNestedInput = {
    create?: XOR<SchoolCreateWithoutStaffAssignmentsInput, SchoolUncheckedCreateWithoutStaffAssignmentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStaffAssignmentsInput
    upsert?: SchoolUpsertWithoutStaffAssignmentsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStaffAssignmentsInput, SchoolUpdateWithoutStaffAssignmentsInput>, SchoolUncheckedUpdateWithoutStaffAssignmentsInput>
  }

  export type ParentProfileCreateNestedOneWithoutChildrenInput = {
    create?: XOR<ParentProfileCreateWithoutChildrenInput, ParentProfileUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ParentProfileCreateOrConnectWithoutChildrenInput
    connect?: ParentProfileWhereUniqueInput
  }

  export type StudentProfileCreateNestedOneWithoutGuardiansInput = {
    create?: XOR<StudentProfileCreateWithoutGuardiansInput, StudentProfileUncheckedCreateWithoutGuardiansInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutGuardiansInput
    connect?: StudentProfileWhereUniqueInput
  }

  export type ParentProfileUpdateOneRequiredWithoutChildrenNestedInput = {
    create?: XOR<ParentProfileCreateWithoutChildrenInput, ParentProfileUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ParentProfileCreateOrConnectWithoutChildrenInput
    upsert?: ParentProfileUpsertWithoutChildrenInput
    connect?: ParentProfileWhereUniqueInput
    update?: XOR<XOR<ParentProfileUpdateToOneWithWhereWithoutChildrenInput, ParentProfileUpdateWithoutChildrenInput>, ParentProfileUncheckedUpdateWithoutChildrenInput>
  }

  export type StudentProfileUpdateOneRequiredWithoutGuardiansNestedInput = {
    create?: XOR<StudentProfileCreateWithoutGuardiansInput, StudentProfileUncheckedCreateWithoutGuardiansInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutGuardiansInput
    upsert?: StudentProfileUpsertWithoutGuardiansInput
    connect?: StudentProfileWhereUniqueInput
    update?: XOR<XOR<StudentProfileUpdateToOneWithWhereWithoutGuardiansInput, StudentProfileUpdateWithoutGuardiansInput>, StudentProfileUncheckedUpdateWithoutGuardiansInput>
  }

  export type ClassCreateNestedOneWithoutClassSubjectsInput = {
    create?: XOR<ClassCreateWithoutClassSubjectsInput, ClassUncheckedCreateWithoutClassSubjectsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassSubjectsInput
    connect?: ClassWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutClassSubjectsInput = {
    create?: XOR<SubjectCreateWithoutClassSubjectsInput, SubjectUncheckedCreateWithoutClassSubjectsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutClassSubjectsInput
    connect?: SubjectWhereUniqueInput
  }

  export type StaffProfileCreateNestedOneWithoutClassSubjectsInput = {
    create?: XOR<StaffProfileCreateWithoutClassSubjectsInput, StaffProfileUncheckedCreateWithoutClassSubjectsInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutClassSubjectsInput
    connect?: StaffProfileWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutClassSubjectsInput = {
    create?: XOR<SchoolCreateWithoutClassSubjectsInput, SchoolUncheckedCreateWithoutClassSubjectsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassSubjectsInput
    connect?: SchoolWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutClassSubjectsNestedInput = {
    create?: XOR<ClassCreateWithoutClassSubjectsInput, ClassUncheckedCreateWithoutClassSubjectsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassSubjectsInput
    upsert?: ClassUpsertWithoutClassSubjectsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutClassSubjectsInput, ClassUpdateWithoutClassSubjectsInput>, ClassUncheckedUpdateWithoutClassSubjectsInput>
  }

  export type SubjectUpdateOneRequiredWithoutClassSubjectsNestedInput = {
    create?: XOR<SubjectCreateWithoutClassSubjectsInput, SubjectUncheckedCreateWithoutClassSubjectsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutClassSubjectsInput
    upsert?: SubjectUpsertWithoutClassSubjectsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutClassSubjectsInput, SubjectUpdateWithoutClassSubjectsInput>, SubjectUncheckedUpdateWithoutClassSubjectsInput>
  }

  export type StaffProfileUpdateOneRequiredWithoutClassSubjectsNestedInput = {
    create?: XOR<StaffProfileCreateWithoutClassSubjectsInput, StaffProfileUncheckedCreateWithoutClassSubjectsInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutClassSubjectsInput
    upsert?: StaffProfileUpsertWithoutClassSubjectsInput
    connect?: StaffProfileWhereUniqueInput
    update?: XOR<XOR<StaffProfileUpdateToOneWithWhereWithoutClassSubjectsInput, StaffProfileUpdateWithoutClassSubjectsInput>, StaffProfileUncheckedUpdateWithoutClassSubjectsInput>
  }

  export type SchoolUpdateOneRequiredWithoutClassSubjectsNestedInput = {
    create?: XOR<SchoolCreateWithoutClassSubjectsInput, SchoolUncheckedCreateWithoutClassSubjectsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassSubjectsInput
    upsert?: SchoolUpsertWithoutClassSubjectsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutClassSubjectsInput, SchoolUpdateWithoutClassSubjectsInput>, SchoolUncheckedUpdateWithoutClassSubjectsInput>
  }

  export type ClassCreateclassMasterHistoryInput = {
    set: InputJsonValue[]
  }

  export type SchoolCreateNestedOneWithoutClassesInput = {
    create?: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassesInput
    connect?: SchoolWhereUniqueInput
  }

  export type ClassSubjectCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassSubjectCreateWithoutClassInput, ClassSubjectUncheckedCreateWithoutClassInput> | ClassSubjectCreateWithoutClassInput[] | ClassSubjectUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutClassInput | ClassSubjectCreateOrConnectWithoutClassInput[]
    createMany?: ClassSubjectCreateManyClassInputEnvelope
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
  }

  export type ClassStudentCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput> | ClassStudentCreateWithoutClassInput[] | ClassStudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutClassInput | ClassStudentCreateOrConnectWithoutClassInput[]
    createMany?: ClassStudentCreateManyClassInputEnvelope
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type ClassSubjectUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassSubjectCreateWithoutClassInput, ClassSubjectUncheckedCreateWithoutClassInput> | ClassSubjectCreateWithoutClassInput[] | ClassSubjectUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutClassInput | ClassSubjectCreateOrConnectWithoutClassInput[]
    createMany?: ClassSubjectCreateManyClassInputEnvelope
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
  }

  export type ClassStudentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput> | ClassStudentCreateWithoutClassInput[] | ClassStudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutClassInput | ClassStudentCreateOrConnectWithoutClassInput[]
    createMany?: ClassStudentCreateManyClassInputEnvelope
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type ClassUpdateclassMasterHistoryInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type SchoolUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassesInput
    upsert?: SchoolUpsertWithoutClassesInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutClassesInput, SchoolUpdateWithoutClassesInput>, SchoolUncheckedUpdateWithoutClassesInput>
  }

  export type ClassSubjectUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassSubjectCreateWithoutClassInput, ClassSubjectUncheckedCreateWithoutClassInput> | ClassSubjectCreateWithoutClassInput[] | ClassSubjectUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutClassInput | ClassSubjectCreateOrConnectWithoutClassInput[]
    upsert?: ClassSubjectUpsertWithWhereUniqueWithoutClassInput | ClassSubjectUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassSubjectCreateManyClassInputEnvelope
    set?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    disconnect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    delete?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    update?: ClassSubjectUpdateWithWhereUniqueWithoutClassInput | ClassSubjectUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassSubjectUpdateManyWithWhereWithoutClassInput | ClassSubjectUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
  }

  export type ClassStudentUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput> | ClassStudentCreateWithoutClassInput[] | ClassStudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutClassInput | ClassStudentCreateOrConnectWithoutClassInput[]
    upsert?: ClassStudentUpsertWithWhereUniqueWithoutClassInput | ClassStudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassStudentCreateManyClassInputEnvelope
    set?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    disconnect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    delete?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    update?: ClassStudentUpdateWithWhereUniqueWithoutClassInput | ClassStudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassStudentUpdateManyWithWhereWithoutClassInput | ClassStudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutClassInput | AttendanceUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutClassInput | AttendanceUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutClassInput | AttendanceUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type ClassSubjectUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassSubjectCreateWithoutClassInput, ClassSubjectUncheckedCreateWithoutClassInput> | ClassSubjectCreateWithoutClassInput[] | ClassSubjectUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutClassInput | ClassSubjectCreateOrConnectWithoutClassInput[]
    upsert?: ClassSubjectUpsertWithWhereUniqueWithoutClassInput | ClassSubjectUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassSubjectCreateManyClassInputEnvelope
    set?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    disconnect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    delete?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    update?: ClassSubjectUpdateWithWhereUniqueWithoutClassInput | ClassSubjectUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassSubjectUpdateManyWithWhereWithoutClassInput | ClassSubjectUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
  }

  export type ClassStudentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput> | ClassStudentCreateWithoutClassInput[] | ClassStudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutClassInput | ClassStudentCreateOrConnectWithoutClassInput[]
    upsert?: ClassStudentUpsertWithWhereUniqueWithoutClassInput | ClassStudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassStudentCreateManyClassInputEnvelope
    set?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    disconnect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    delete?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    update?: ClassStudentUpdateWithWhereUniqueWithoutClassInput | ClassStudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassStudentUpdateManyWithWhereWithoutClassInput | ClassStudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutClassInput | AttendanceUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutClassInput | AttendanceUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutClassInput | AttendanceUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentProfileCreateNestedOneWithoutClassesInput = {
    create?: XOR<StudentProfileCreateWithoutClassesInput, StudentProfileUncheckedCreateWithoutClassesInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutClassesInput
    connect?: StudentProfileWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    upsert?: ClassUpsertWithoutStudentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentsInput, ClassUpdateWithoutStudentsInput>, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentProfileUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<StudentProfileCreateWithoutClassesInput, StudentProfileUncheckedCreateWithoutClassesInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutClassesInput
    upsert?: StudentProfileUpsertWithoutClassesInput
    connect?: StudentProfileWhereUniqueInput
    update?: XOR<XOR<StudentProfileUpdateToOneWithWhereWithoutClassesInput, StudentProfileUpdateWithoutClassesInput>, StudentProfileUncheckedUpdateWithoutClassesInput>
  }

  export type StudentProfileCreateNestedOneWithoutReportCardsInput = {
    create?: XOR<StudentProfileCreateWithoutReportCardsInput, StudentProfileUncheckedCreateWithoutReportCardsInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutReportCardsInput
    connect?: StudentProfileWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutReportCardsInput = {
    create?: XOR<SchoolCreateWithoutReportCardsInput, SchoolUncheckedCreateWithoutReportCardsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutReportCardsInput
    connect?: SchoolWhereUniqueInput
  }

  export type GradeCreateNestedManyWithoutReportCardInput = {
    create?: XOR<GradeCreateWithoutReportCardInput, GradeUncheckedCreateWithoutReportCardInput> | GradeCreateWithoutReportCardInput[] | GradeUncheckedCreateWithoutReportCardInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutReportCardInput | GradeCreateOrConnectWithoutReportCardInput[]
    createMany?: GradeCreateManyReportCardInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutReportCardInput = {
    create?: XOR<GradeCreateWithoutReportCardInput, GradeUncheckedCreateWithoutReportCardInput> | GradeCreateWithoutReportCardInput[] | GradeUncheckedCreateWithoutReportCardInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutReportCardInput | GradeCreateOrConnectWithoutReportCardInput[]
    createMany?: GradeCreateManyReportCardInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type EnumReportCardStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReportCardStatus
  }

  export type StudentProfileUpdateOneRequiredWithoutReportCardsNestedInput = {
    create?: XOR<StudentProfileCreateWithoutReportCardsInput, StudentProfileUncheckedCreateWithoutReportCardsInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutReportCardsInput
    upsert?: StudentProfileUpsertWithoutReportCardsInput
    connect?: StudentProfileWhereUniqueInput
    update?: XOR<XOR<StudentProfileUpdateToOneWithWhereWithoutReportCardsInput, StudentProfileUpdateWithoutReportCardsInput>, StudentProfileUncheckedUpdateWithoutReportCardsInput>
  }

  export type SchoolUpdateOneRequiredWithoutReportCardsNestedInput = {
    create?: XOR<SchoolCreateWithoutReportCardsInput, SchoolUncheckedCreateWithoutReportCardsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutReportCardsInput
    upsert?: SchoolUpsertWithoutReportCardsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutReportCardsInput, SchoolUpdateWithoutReportCardsInput>, SchoolUncheckedUpdateWithoutReportCardsInput>
  }

  export type GradeUpdateManyWithoutReportCardNestedInput = {
    create?: XOR<GradeCreateWithoutReportCardInput, GradeUncheckedCreateWithoutReportCardInput> | GradeCreateWithoutReportCardInput[] | GradeUncheckedCreateWithoutReportCardInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutReportCardInput | GradeCreateOrConnectWithoutReportCardInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutReportCardInput | GradeUpsertWithWhereUniqueWithoutReportCardInput[]
    createMany?: GradeCreateManyReportCardInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutReportCardInput | GradeUpdateWithWhereUniqueWithoutReportCardInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutReportCardInput | GradeUpdateManyWithWhereWithoutReportCardInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutReportCardNestedInput = {
    create?: XOR<GradeCreateWithoutReportCardInput, GradeUncheckedCreateWithoutReportCardInput> | GradeCreateWithoutReportCardInput[] | GradeUncheckedCreateWithoutReportCardInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutReportCardInput | GradeCreateOrConnectWithoutReportCardInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutReportCardInput | GradeUpsertWithWhereUniqueWithoutReportCardInput[]
    createMany?: GradeCreateManyReportCardInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutReportCardInput | GradeUpdateWithWhereUniqueWithoutReportCardInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutReportCardInput | GradeUpdateManyWithWhereWithoutReportCardInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type StudentProfileCreateNestedOneWithoutGradesInput = {
    create?: XOR<StudentProfileCreateWithoutGradesInput, StudentProfileUncheckedCreateWithoutGradesInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutGradesInput
    connect?: StudentProfileWhereUniqueInput
  }

  export type ReportCardCreateNestedOneWithoutGradesInput = {
    create?: XOR<ReportCardCreateWithoutGradesInput, ReportCardUncheckedCreateWithoutGradesInput>
    connectOrCreate?: ReportCardCreateOrConnectWithoutGradesInput
    connect?: ReportCardWhereUniqueInput
  }

  export type StaffProfileCreateNestedOneWithoutGradesInput = {
    create?: XOR<StaffProfileCreateWithoutGradesInput, StaffProfileUncheckedCreateWithoutGradesInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutGradesInput
    connect?: StaffProfileWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumGradeStatusFieldUpdateOperationsInput = {
    set?: $Enums.GradeStatus
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentProfileUpdateOneRequiredWithoutGradesNestedInput = {
    create?: XOR<StudentProfileCreateWithoutGradesInput, StudentProfileUncheckedCreateWithoutGradesInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutGradesInput
    upsert?: StudentProfileUpsertWithoutGradesInput
    connect?: StudentProfileWhereUniqueInput
    update?: XOR<XOR<StudentProfileUpdateToOneWithWhereWithoutGradesInput, StudentProfileUpdateWithoutGradesInput>, StudentProfileUncheckedUpdateWithoutGradesInput>
  }

  export type ReportCardUpdateOneRequiredWithoutGradesNestedInput = {
    create?: XOR<ReportCardCreateWithoutGradesInput, ReportCardUncheckedCreateWithoutGradesInput>
    connectOrCreate?: ReportCardCreateOrConnectWithoutGradesInput
    upsert?: ReportCardUpsertWithoutGradesInput
    connect?: ReportCardWhereUniqueInput
    update?: XOR<XOR<ReportCardUpdateToOneWithWhereWithoutGradesInput, ReportCardUpdateWithoutGradesInput>, ReportCardUncheckedUpdateWithoutGradesInput>
  }

  export type StaffProfileUpdateOneRequiredWithoutGradesNestedInput = {
    create?: XOR<StaffProfileCreateWithoutGradesInput, StaffProfileUncheckedCreateWithoutGradesInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutGradesInput
    upsert?: StaffProfileUpsertWithoutGradesInput
    connect?: StaffProfileWhereUniqueInput
    update?: XOR<XOR<StaffProfileUpdateToOneWithWhereWithoutGradesInput, StaffProfileUpdateWithoutGradesInput>, StaffProfileUncheckedUpdateWithoutGradesInput>
  }

  export type StudentProfileCreatepreviousSchoolsInput = {
    set: InputJsonValue[]
  }

  export type StudentProfileCreatelearningProgressInput = {
    set: InputJsonValue[]
  }

  export type StudentProfileCreateachievementsInput = {
    set: InputJsonValue[]
  }

  export type StudentProfileCreateextracurricularInput = {
    set: InputJsonValue[]
  }

  export type StudentProfileCreatedietaryRestrictionsInput = {
    set: string[]
  }

  export type ProfileCreateNestedOneWithoutStudentProfileInput = {
    create?: XOR<ProfileCreateWithoutStudentProfileInput, ProfileUncheckedCreateWithoutStudentProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutStudentProfileInput
    connect?: ProfileWhereUniqueInput
  }

  export type ParentStudentRelationCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<ParentStudentRelationCreateWithoutStudentProfileInput, ParentStudentRelationUncheckedCreateWithoutStudentProfileInput> | ParentStudentRelationCreateWithoutStudentProfileInput[] | ParentStudentRelationUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ParentStudentRelationCreateOrConnectWithoutStudentProfileInput | ParentStudentRelationCreateOrConnectWithoutStudentProfileInput[]
    createMany?: ParentStudentRelationCreateManyStudentProfileInputEnvelope
    connect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
  }

  export type ClassStudentCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<ClassStudentCreateWithoutStudentProfileInput, ClassStudentUncheckedCreateWithoutStudentProfileInput> | ClassStudentCreateWithoutStudentProfileInput[] | ClassStudentUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutStudentProfileInput | ClassStudentCreateOrConnectWithoutStudentProfileInput[]
    createMany?: ClassStudentCreateManyStudentProfileInputEnvelope
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<AttendanceCreateWithoutStudentProfileInput, AttendanceUncheckedCreateWithoutStudentProfileInput> | AttendanceCreateWithoutStudentProfileInput[] | AttendanceUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentProfileInput | AttendanceCreateOrConnectWithoutStudentProfileInput[]
    createMany?: AttendanceCreateManyStudentProfileInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type ReportCardCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<ReportCardCreateWithoutStudentProfileInput, ReportCardUncheckedCreateWithoutStudentProfileInput> | ReportCardCreateWithoutStudentProfileInput[] | ReportCardUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ReportCardCreateOrConnectWithoutStudentProfileInput | ReportCardCreateOrConnectWithoutStudentProfileInput[]
    createMany?: ReportCardCreateManyStudentProfileInputEnvelope
    connect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
  }

  export type GradeCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<GradeCreateWithoutStudentProfileInput, GradeUncheckedCreateWithoutStudentProfileInput> | GradeCreateWithoutStudentProfileInput[] | GradeUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStudentProfileInput | GradeCreateOrConnectWithoutStudentProfileInput[]
    createMany?: GradeCreateManyStudentProfileInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type ParentStudentRelationUncheckedCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<ParentStudentRelationCreateWithoutStudentProfileInput, ParentStudentRelationUncheckedCreateWithoutStudentProfileInput> | ParentStudentRelationCreateWithoutStudentProfileInput[] | ParentStudentRelationUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ParentStudentRelationCreateOrConnectWithoutStudentProfileInput | ParentStudentRelationCreateOrConnectWithoutStudentProfileInput[]
    createMany?: ParentStudentRelationCreateManyStudentProfileInputEnvelope
    connect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
  }

  export type ClassStudentUncheckedCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<ClassStudentCreateWithoutStudentProfileInput, ClassStudentUncheckedCreateWithoutStudentProfileInput> | ClassStudentCreateWithoutStudentProfileInput[] | ClassStudentUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutStudentProfileInput | ClassStudentCreateOrConnectWithoutStudentProfileInput[]
    createMany?: ClassStudentCreateManyStudentProfileInputEnvelope
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<AttendanceCreateWithoutStudentProfileInput, AttendanceUncheckedCreateWithoutStudentProfileInput> | AttendanceCreateWithoutStudentProfileInput[] | AttendanceUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentProfileInput | AttendanceCreateOrConnectWithoutStudentProfileInput[]
    createMany?: AttendanceCreateManyStudentProfileInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type ReportCardUncheckedCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<ReportCardCreateWithoutStudentProfileInput, ReportCardUncheckedCreateWithoutStudentProfileInput> | ReportCardCreateWithoutStudentProfileInput[] | ReportCardUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ReportCardCreateOrConnectWithoutStudentProfileInput | ReportCardCreateOrConnectWithoutStudentProfileInput[]
    createMany?: ReportCardCreateManyStudentProfileInputEnvelope
    connect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutStudentProfileInput = {
    create?: XOR<GradeCreateWithoutStudentProfileInput, GradeUncheckedCreateWithoutStudentProfileInput> | GradeCreateWithoutStudentProfileInput[] | GradeUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStudentProfileInput | GradeCreateOrConnectWithoutStudentProfileInput[]
    createMany?: GradeCreateManyStudentProfileInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type StudentProfileUpdatepreviousSchoolsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type StudentProfileUpdatelearningProgressInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type StudentProfileUpdateachievementsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type StudentProfileUpdateextracurricularInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type StudentProfileUpdatedietaryRestrictionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProfileUpdateOneRequiredWithoutStudentProfileNestedInput = {
    create?: XOR<ProfileCreateWithoutStudentProfileInput, ProfileUncheckedCreateWithoutStudentProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutStudentProfileInput
    upsert?: ProfileUpsertWithoutStudentProfileInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutStudentProfileInput, ProfileUpdateWithoutStudentProfileInput>, ProfileUncheckedUpdateWithoutStudentProfileInput>
  }

  export type ParentStudentRelationUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<ParentStudentRelationCreateWithoutStudentProfileInput, ParentStudentRelationUncheckedCreateWithoutStudentProfileInput> | ParentStudentRelationCreateWithoutStudentProfileInput[] | ParentStudentRelationUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ParentStudentRelationCreateOrConnectWithoutStudentProfileInput | ParentStudentRelationCreateOrConnectWithoutStudentProfileInput[]
    upsert?: ParentStudentRelationUpsertWithWhereUniqueWithoutStudentProfileInput | ParentStudentRelationUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: ParentStudentRelationCreateManyStudentProfileInputEnvelope
    set?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    disconnect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    delete?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    connect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    update?: ParentStudentRelationUpdateWithWhereUniqueWithoutStudentProfileInput | ParentStudentRelationUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: ParentStudentRelationUpdateManyWithWhereWithoutStudentProfileInput | ParentStudentRelationUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: ParentStudentRelationScalarWhereInput | ParentStudentRelationScalarWhereInput[]
  }

  export type ClassStudentUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<ClassStudentCreateWithoutStudentProfileInput, ClassStudentUncheckedCreateWithoutStudentProfileInput> | ClassStudentCreateWithoutStudentProfileInput[] | ClassStudentUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutStudentProfileInput | ClassStudentCreateOrConnectWithoutStudentProfileInput[]
    upsert?: ClassStudentUpsertWithWhereUniqueWithoutStudentProfileInput | ClassStudentUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: ClassStudentCreateManyStudentProfileInputEnvelope
    set?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    disconnect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    delete?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    update?: ClassStudentUpdateWithWhereUniqueWithoutStudentProfileInput | ClassStudentUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: ClassStudentUpdateManyWithWhereWithoutStudentProfileInput | ClassStudentUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<AttendanceCreateWithoutStudentProfileInput, AttendanceUncheckedCreateWithoutStudentProfileInput> | AttendanceCreateWithoutStudentProfileInput[] | AttendanceUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentProfileInput | AttendanceCreateOrConnectWithoutStudentProfileInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutStudentProfileInput | AttendanceUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: AttendanceCreateManyStudentProfileInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutStudentProfileInput | AttendanceUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutStudentProfileInput | AttendanceUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type ReportCardUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<ReportCardCreateWithoutStudentProfileInput, ReportCardUncheckedCreateWithoutStudentProfileInput> | ReportCardCreateWithoutStudentProfileInput[] | ReportCardUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ReportCardCreateOrConnectWithoutStudentProfileInput | ReportCardCreateOrConnectWithoutStudentProfileInput[]
    upsert?: ReportCardUpsertWithWhereUniqueWithoutStudentProfileInput | ReportCardUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: ReportCardCreateManyStudentProfileInputEnvelope
    set?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    disconnect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    delete?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    connect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    update?: ReportCardUpdateWithWhereUniqueWithoutStudentProfileInput | ReportCardUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: ReportCardUpdateManyWithWhereWithoutStudentProfileInput | ReportCardUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: ReportCardScalarWhereInput | ReportCardScalarWhereInput[]
  }

  export type GradeUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<GradeCreateWithoutStudentProfileInput, GradeUncheckedCreateWithoutStudentProfileInput> | GradeCreateWithoutStudentProfileInput[] | GradeUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStudentProfileInput | GradeCreateOrConnectWithoutStudentProfileInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutStudentProfileInput | GradeUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: GradeCreateManyStudentProfileInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutStudentProfileInput | GradeUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutStudentProfileInput | GradeUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<ParentStudentRelationCreateWithoutStudentProfileInput, ParentStudentRelationUncheckedCreateWithoutStudentProfileInput> | ParentStudentRelationCreateWithoutStudentProfileInput[] | ParentStudentRelationUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ParentStudentRelationCreateOrConnectWithoutStudentProfileInput | ParentStudentRelationCreateOrConnectWithoutStudentProfileInput[]
    upsert?: ParentStudentRelationUpsertWithWhereUniqueWithoutStudentProfileInput | ParentStudentRelationUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: ParentStudentRelationCreateManyStudentProfileInputEnvelope
    set?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    disconnect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    delete?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    connect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    update?: ParentStudentRelationUpdateWithWhereUniqueWithoutStudentProfileInput | ParentStudentRelationUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: ParentStudentRelationUpdateManyWithWhereWithoutStudentProfileInput | ParentStudentRelationUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: ParentStudentRelationScalarWhereInput | ParentStudentRelationScalarWhereInput[]
  }

  export type ClassStudentUncheckedUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<ClassStudentCreateWithoutStudentProfileInput, ClassStudentUncheckedCreateWithoutStudentProfileInput> | ClassStudentCreateWithoutStudentProfileInput[] | ClassStudentUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutStudentProfileInput | ClassStudentCreateOrConnectWithoutStudentProfileInput[]
    upsert?: ClassStudentUpsertWithWhereUniqueWithoutStudentProfileInput | ClassStudentUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: ClassStudentCreateManyStudentProfileInputEnvelope
    set?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    disconnect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    delete?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    update?: ClassStudentUpdateWithWhereUniqueWithoutStudentProfileInput | ClassStudentUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: ClassStudentUpdateManyWithWhereWithoutStudentProfileInput | ClassStudentUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<AttendanceCreateWithoutStudentProfileInput, AttendanceUncheckedCreateWithoutStudentProfileInput> | AttendanceCreateWithoutStudentProfileInput[] | AttendanceUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentProfileInput | AttendanceCreateOrConnectWithoutStudentProfileInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutStudentProfileInput | AttendanceUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: AttendanceCreateManyStudentProfileInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutStudentProfileInput | AttendanceUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutStudentProfileInput | AttendanceUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type ReportCardUncheckedUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<ReportCardCreateWithoutStudentProfileInput, ReportCardUncheckedCreateWithoutStudentProfileInput> | ReportCardCreateWithoutStudentProfileInput[] | ReportCardUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: ReportCardCreateOrConnectWithoutStudentProfileInput | ReportCardCreateOrConnectWithoutStudentProfileInput[]
    upsert?: ReportCardUpsertWithWhereUniqueWithoutStudentProfileInput | ReportCardUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: ReportCardCreateManyStudentProfileInputEnvelope
    set?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    disconnect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    delete?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    connect?: ReportCardWhereUniqueInput | ReportCardWhereUniqueInput[]
    update?: ReportCardUpdateWithWhereUniqueWithoutStudentProfileInput | ReportCardUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: ReportCardUpdateManyWithWhereWithoutStudentProfileInput | ReportCardUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: ReportCardScalarWhereInput | ReportCardScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutStudentProfileNestedInput = {
    create?: XOR<GradeCreateWithoutStudentProfileInput, GradeUncheckedCreateWithoutStudentProfileInput> | GradeCreateWithoutStudentProfileInput[] | GradeUncheckedCreateWithoutStudentProfileInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStudentProfileInput | GradeCreateOrConnectWithoutStudentProfileInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutStudentProfileInput | GradeUpsertWithWhereUniqueWithoutStudentProfileInput[]
    createMany?: GradeCreateManyStudentProfileInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutStudentProfileInput | GradeUpdateWithWhereUniqueWithoutStudentProfileInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutStudentProfileInput | GradeUpdateManyWithWhereWithoutStudentProfileInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutParentProfileInput = {
    create?: XOR<ProfileCreateWithoutParentProfileInput, ProfileUncheckedCreateWithoutParentProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutParentProfileInput
    connect?: ProfileWhereUniqueInput
  }

  export type ParentStudentRelationCreateNestedManyWithoutParentProfileInput = {
    create?: XOR<ParentStudentRelationCreateWithoutParentProfileInput, ParentStudentRelationUncheckedCreateWithoutParentProfileInput> | ParentStudentRelationCreateWithoutParentProfileInput[] | ParentStudentRelationUncheckedCreateWithoutParentProfileInput[]
    connectOrCreate?: ParentStudentRelationCreateOrConnectWithoutParentProfileInput | ParentStudentRelationCreateOrConnectWithoutParentProfileInput[]
    createMany?: ParentStudentRelationCreateManyParentProfileInputEnvelope
    connect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
  }

  export type ParentStudentRelationUncheckedCreateNestedManyWithoutParentProfileInput = {
    create?: XOR<ParentStudentRelationCreateWithoutParentProfileInput, ParentStudentRelationUncheckedCreateWithoutParentProfileInput> | ParentStudentRelationCreateWithoutParentProfileInput[] | ParentStudentRelationUncheckedCreateWithoutParentProfileInput[]
    connectOrCreate?: ParentStudentRelationCreateOrConnectWithoutParentProfileInput | ParentStudentRelationCreateOrConnectWithoutParentProfileInput[]
    createMany?: ParentStudentRelationCreateManyParentProfileInputEnvelope
    connect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
  }

  export type ProfileUpdateOneRequiredWithoutParentProfileNestedInput = {
    create?: XOR<ProfileCreateWithoutParentProfileInput, ProfileUncheckedCreateWithoutParentProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutParentProfileInput
    upsert?: ProfileUpsertWithoutParentProfileInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutParentProfileInput, ProfileUpdateWithoutParentProfileInput>, ProfileUncheckedUpdateWithoutParentProfileInput>
  }

  export type ParentStudentRelationUpdateManyWithoutParentProfileNestedInput = {
    create?: XOR<ParentStudentRelationCreateWithoutParentProfileInput, ParentStudentRelationUncheckedCreateWithoutParentProfileInput> | ParentStudentRelationCreateWithoutParentProfileInput[] | ParentStudentRelationUncheckedCreateWithoutParentProfileInput[]
    connectOrCreate?: ParentStudentRelationCreateOrConnectWithoutParentProfileInput | ParentStudentRelationCreateOrConnectWithoutParentProfileInput[]
    upsert?: ParentStudentRelationUpsertWithWhereUniqueWithoutParentProfileInput | ParentStudentRelationUpsertWithWhereUniqueWithoutParentProfileInput[]
    createMany?: ParentStudentRelationCreateManyParentProfileInputEnvelope
    set?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    disconnect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    delete?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    connect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    update?: ParentStudentRelationUpdateWithWhereUniqueWithoutParentProfileInput | ParentStudentRelationUpdateWithWhereUniqueWithoutParentProfileInput[]
    updateMany?: ParentStudentRelationUpdateManyWithWhereWithoutParentProfileInput | ParentStudentRelationUpdateManyWithWhereWithoutParentProfileInput[]
    deleteMany?: ParentStudentRelationScalarWhereInput | ParentStudentRelationScalarWhereInput[]
  }

  export type ParentStudentRelationUncheckedUpdateManyWithoutParentProfileNestedInput = {
    create?: XOR<ParentStudentRelationCreateWithoutParentProfileInput, ParentStudentRelationUncheckedCreateWithoutParentProfileInput> | ParentStudentRelationCreateWithoutParentProfileInput[] | ParentStudentRelationUncheckedCreateWithoutParentProfileInput[]
    connectOrCreate?: ParentStudentRelationCreateOrConnectWithoutParentProfileInput | ParentStudentRelationCreateOrConnectWithoutParentProfileInput[]
    upsert?: ParentStudentRelationUpsertWithWhereUniqueWithoutParentProfileInput | ParentStudentRelationUpsertWithWhereUniqueWithoutParentProfileInput[]
    createMany?: ParentStudentRelationCreateManyParentProfileInputEnvelope
    set?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    disconnect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    delete?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    connect?: ParentStudentRelationWhereUniqueInput | ParentStudentRelationWhereUniqueInput[]
    update?: ParentStudentRelationUpdateWithWhereUniqueWithoutParentProfileInput | ParentStudentRelationUpdateWithWhereUniqueWithoutParentProfileInput[]
    updateMany?: ParentStudentRelationUpdateManyWithWhereWithoutParentProfileInput | ParentStudentRelationUpdateManyWithWhereWithoutParentProfileInput[]
    deleteMany?: ParentStudentRelationScalarWhereInput | ParentStudentRelationScalarWhereInput[]
  }

  export type StudentProfileCreateNestedOneWithoutAttendanceRecordsInput = {
    create?: XOR<StudentProfileCreateWithoutAttendanceRecordsInput, StudentProfileUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutAttendanceRecordsInput
    connect?: StudentProfileWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentProfileUpdateOneRequiredWithoutAttendanceRecordsNestedInput = {
    create?: XOR<StudentProfileCreateWithoutAttendanceRecordsInput, StudentProfileUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: StudentProfileCreateOrConnectWithoutAttendanceRecordsInput
    upsert?: StudentProfileUpsertWithoutAttendanceRecordsInput
    connect?: StudentProfileWhereUniqueInput
    update?: XOR<XOR<StudentProfileUpdateToOneWithWhereWithoutAttendanceRecordsInput, StudentProfileUpdateWithoutAttendanceRecordsInput>, StudentProfileUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type ClassUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceInput
    upsert?: ClassUpsertWithoutAttendanceInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAttendanceInput, ClassUpdateWithoutAttendanceInput>, ClassUncheckedUpdateWithoutAttendanceInput>
  }

  export type StaffProfileCreateresponsibilitiesInput = {
    set: string[]
  }

  export type StaffProfileCreatespecializationsInput = {
    set: string[]
  }

  export type ProfileCreateNestedOneWithoutStaffProfileInput = {
    create?: XOR<ProfileCreateWithoutStaffProfileInput, ProfileUncheckedCreateWithoutStaffProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutStaffProfileInput
    connect?: ProfileWhereUniqueInput
  }

  export type StaffAssignmentCreateNestedManyWithoutStaffProfileInput = {
    create?: XOR<StaffAssignmentCreateWithoutStaffProfileInput, StaffAssignmentUncheckedCreateWithoutStaffProfileInput> | StaffAssignmentCreateWithoutStaffProfileInput[] | StaffAssignmentUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: StaffAssignmentCreateOrConnectWithoutStaffProfileInput | StaffAssignmentCreateOrConnectWithoutStaffProfileInput[]
    createMany?: StaffAssignmentCreateManyStaffProfileInputEnvelope
    connect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
  }

  export type SubjectAssignmentCreateNestedManyWithoutStaffProfileInput = {
    create?: XOR<SubjectAssignmentCreateWithoutStaffProfileInput, SubjectAssignmentUncheckedCreateWithoutStaffProfileInput> | SubjectAssignmentCreateWithoutStaffProfileInput[] | SubjectAssignmentUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: SubjectAssignmentCreateOrConnectWithoutStaffProfileInput | SubjectAssignmentCreateOrConnectWithoutStaffProfileInput[]
    createMany?: SubjectAssignmentCreateManyStaffProfileInputEnvelope
    connect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
  }

  export type GradeCreateNestedManyWithoutStaffProfileInput = {
    create?: XOR<GradeCreateWithoutStaffProfileInput, GradeUncheckedCreateWithoutStaffProfileInput> | GradeCreateWithoutStaffProfileInput[] | GradeUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStaffProfileInput | GradeCreateOrConnectWithoutStaffProfileInput[]
    createMany?: GradeCreateManyStaffProfileInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type ClassSubjectCreateNestedManyWithoutStaffProfileInput = {
    create?: XOR<ClassSubjectCreateWithoutStaffProfileInput, ClassSubjectUncheckedCreateWithoutStaffProfileInput> | ClassSubjectCreateWithoutStaffProfileInput[] | ClassSubjectUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutStaffProfileInput | ClassSubjectCreateOrConnectWithoutStaffProfileInput[]
    createMany?: ClassSubjectCreateManyStaffProfileInputEnvelope
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
  }

  export type StaffAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput = {
    create?: XOR<StaffAssignmentCreateWithoutStaffProfileInput, StaffAssignmentUncheckedCreateWithoutStaffProfileInput> | StaffAssignmentCreateWithoutStaffProfileInput[] | StaffAssignmentUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: StaffAssignmentCreateOrConnectWithoutStaffProfileInput | StaffAssignmentCreateOrConnectWithoutStaffProfileInput[]
    createMany?: StaffAssignmentCreateManyStaffProfileInputEnvelope
    connect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
  }

  export type SubjectAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput = {
    create?: XOR<SubjectAssignmentCreateWithoutStaffProfileInput, SubjectAssignmentUncheckedCreateWithoutStaffProfileInput> | SubjectAssignmentCreateWithoutStaffProfileInput[] | SubjectAssignmentUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: SubjectAssignmentCreateOrConnectWithoutStaffProfileInput | SubjectAssignmentCreateOrConnectWithoutStaffProfileInput[]
    createMany?: SubjectAssignmentCreateManyStaffProfileInputEnvelope
    connect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutStaffProfileInput = {
    create?: XOR<GradeCreateWithoutStaffProfileInput, GradeUncheckedCreateWithoutStaffProfileInput> | GradeCreateWithoutStaffProfileInput[] | GradeUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStaffProfileInput | GradeCreateOrConnectWithoutStaffProfileInput[]
    createMany?: GradeCreateManyStaffProfileInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type ClassSubjectUncheckedCreateNestedManyWithoutStaffProfileInput = {
    create?: XOR<ClassSubjectCreateWithoutStaffProfileInput, ClassSubjectUncheckedCreateWithoutStaffProfileInput> | ClassSubjectCreateWithoutStaffProfileInput[] | ClassSubjectUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutStaffProfileInput | ClassSubjectCreateOrConnectWithoutStaffProfileInput[]
    createMany?: ClassSubjectCreateManyStaffProfileInputEnvelope
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
  }

  export type StaffProfileUpdateresponsibilitiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type StaffProfileUpdatespecializationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProfileUpdateOneRequiredWithoutStaffProfileNestedInput = {
    create?: XOR<ProfileCreateWithoutStaffProfileInput, ProfileUncheckedCreateWithoutStaffProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutStaffProfileInput
    upsert?: ProfileUpsertWithoutStaffProfileInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutStaffProfileInput, ProfileUpdateWithoutStaffProfileInput>, ProfileUncheckedUpdateWithoutStaffProfileInput>
  }

  export type StaffAssignmentUpdateManyWithoutStaffProfileNestedInput = {
    create?: XOR<StaffAssignmentCreateWithoutStaffProfileInput, StaffAssignmentUncheckedCreateWithoutStaffProfileInput> | StaffAssignmentCreateWithoutStaffProfileInput[] | StaffAssignmentUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: StaffAssignmentCreateOrConnectWithoutStaffProfileInput | StaffAssignmentCreateOrConnectWithoutStaffProfileInput[]
    upsert?: StaffAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput | StaffAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput[]
    createMany?: StaffAssignmentCreateManyStaffProfileInputEnvelope
    set?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    disconnect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    delete?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    connect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    update?: StaffAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput | StaffAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput[]
    updateMany?: StaffAssignmentUpdateManyWithWhereWithoutStaffProfileInput | StaffAssignmentUpdateManyWithWhereWithoutStaffProfileInput[]
    deleteMany?: StaffAssignmentScalarWhereInput | StaffAssignmentScalarWhereInput[]
  }

  export type SubjectAssignmentUpdateManyWithoutStaffProfileNestedInput = {
    create?: XOR<SubjectAssignmentCreateWithoutStaffProfileInput, SubjectAssignmentUncheckedCreateWithoutStaffProfileInput> | SubjectAssignmentCreateWithoutStaffProfileInput[] | SubjectAssignmentUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: SubjectAssignmentCreateOrConnectWithoutStaffProfileInput | SubjectAssignmentCreateOrConnectWithoutStaffProfileInput[]
    upsert?: SubjectAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput | SubjectAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput[]
    createMany?: SubjectAssignmentCreateManyStaffProfileInputEnvelope
    set?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    disconnect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    delete?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    connect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    update?: SubjectAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput | SubjectAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput[]
    updateMany?: SubjectAssignmentUpdateManyWithWhereWithoutStaffProfileInput | SubjectAssignmentUpdateManyWithWhereWithoutStaffProfileInput[]
    deleteMany?: SubjectAssignmentScalarWhereInput | SubjectAssignmentScalarWhereInput[]
  }

  export type GradeUpdateManyWithoutStaffProfileNestedInput = {
    create?: XOR<GradeCreateWithoutStaffProfileInput, GradeUncheckedCreateWithoutStaffProfileInput> | GradeCreateWithoutStaffProfileInput[] | GradeUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStaffProfileInput | GradeCreateOrConnectWithoutStaffProfileInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutStaffProfileInput | GradeUpsertWithWhereUniqueWithoutStaffProfileInput[]
    createMany?: GradeCreateManyStaffProfileInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutStaffProfileInput | GradeUpdateWithWhereUniqueWithoutStaffProfileInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutStaffProfileInput | GradeUpdateManyWithWhereWithoutStaffProfileInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type ClassSubjectUpdateManyWithoutStaffProfileNestedInput = {
    create?: XOR<ClassSubjectCreateWithoutStaffProfileInput, ClassSubjectUncheckedCreateWithoutStaffProfileInput> | ClassSubjectCreateWithoutStaffProfileInput[] | ClassSubjectUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutStaffProfileInput | ClassSubjectCreateOrConnectWithoutStaffProfileInput[]
    upsert?: ClassSubjectUpsertWithWhereUniqueWithoutStaffProfileInput | ClassSubjectUpsertWithWhereUniqueWithoutStaffProfileInput[]
    createMany?: ClassSubjectCreateManyStaffProfileInputEnvelope
    set?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    disconnect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    delete?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    update?: ClassSubjectUpdateWithWhereUniqueWithoutStaffProfileInput | ClassSubjectUpdateWithWhereUniqueWithoutStaffProfileInput[]
    updateMany?: ClassSubjectUpdateManyWithWhereWithoutStaffProfileInput | ClassSubjectUpdateManyWithWhereWithoutStaffProfileInput[]
    deleteMany?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
  }

  export type StaffAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput = {
    create?: XOR<StaffAssignmentCreateWithoutStaffProfileInput, StaffAssignmentUncheckedCreateWithoutStaffProfileInput> | StaffAssignmentCreateWithoutStaffProfileInput[] | StaffAssignmentUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: StaffAssignmentCreateOrConnectWithoutStaffProfileInput | StaffAssignmentCreateOrConnectWithoutStaffProfileInput[]
    upsert?: StaffAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput | StaffAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput[]
    createMany?: StaffAssignmentCreateManyStaffProfileInputEnvelope
    set?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    disconnect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    delete?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    connect?: StaffAssignmentWhereUniqueInput | StaffAssignmentWhereUniqueInput[]
    update?: StaffAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput | StaffAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput[]
    updateMany?: StaffAssignmentUpdateManyWithWhereWithoutStaffProfileInput | StaffAssignmentUpdateManyWithWhereWithoutStaffProfileInput[]
    deleteMany?: StaffAssignmentScalarWhereInput | StaffAssignmentScalarWhereInput[]
  }

  export type SubjectAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput = {
    create?: XOR<SubjectAssignmentCreateWithoutStaffProfileInput, SubjectAssignmentUncheckedCreateWithoutStaffProfileInput> | SubjectAssignmentCreateWithoutStaffProfileInput[] | SubjectAssignmentUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: SubjectAssignmentCreateOrConnectWithoutStaffProfileInput | SubjectAssignmentCreateOrConnectWithoutStaffProfileInput[]
    upsert?: SubjectAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput | SubjectAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput[]
    createMany?: SubjectAssignmentCreateManyStaffProfileInputEnvelope
    set?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    disconnect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    delete?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    connect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    update?: SubjectAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput | SubjectAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput[]
    updateMany?: SubjectAssignmentUpdateManyWithWhereWithoutStaffProfileInput | SubjectAssignmentUpdateManyWithWhereWithoutStaffProfileInput[]
    deleteMany?: SubjectAssignmentScalarWhereInput | SubjectAssignmentScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutStaffProfileNestedInput = {
    create?: XOR<GradeCreateWithoutStaffProfileInput, GradeUncheckedCreateWithoutStaffProfileInput> | GradeCreateWithoutStaffProfileInput[] | GradeUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStaffProfileInput | GradeCreateOrConnectWithoutStaffProfileInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutStaffProfileInput | GradeUpsertWithWhereUniqueWithoutStaffProfileInput[]
    createMany?: GradeCreateManyStaffProfileInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutStaffProfileInput | GradeUpdateWithWhereUniqueWithoutStaffProfileInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutStaffProfileInput | GradeUpdateManyWithWhereWithoutStaffProfileInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type ClassSubjectUncheckedUpdateManyWithoutStaffProfileNestedInput = {
    create?: XOR<ClassSubjectCreateWithoutStaffProfileInput, ClassSubjectUncheckedCreateWithoutStaffProfileInput> | ClassSubjectCreateWithoutStaffProfileInput[] | ClassSubjectUncheckedCreateWithoutStaffProfileInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutStaffProfileInput | ClassSubjectCreateOrConnectWithoutStaffProfileInput[]
    upsert?: ClassSubjectUpsertWithWhereUniqueWithoutStaffProfileInput | ClassSubjectUpsertWithWhereUniqueWithoutStaffProfileInput[]
    createMany?: ClassSubjectCreateManyStaffProfileInputEnvelope
    set?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    disconnect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    delete?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    update?: ClassSubjectUpdateWithWhereUniqueWithoutStaffProfileInput | ClassSubjectUpdateWithWhereUniqueWithoutStaffProfileInput[]
    updateMany?: ClassSubjectUpdateManyWithWhereWithoutStaffProfileInput | ClassSubjectUpdateManyWithWhereWithoutStaffProfileInput[]
    deleteMany?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
  }

  export type SubjectCreategradeLevelInput = {
    set: string[]
  }

  export type SubjectCreateprerequisitesInput = {
    set: string[]
  }

  export type SubjectCreatecorequisitesInput = {
    set: string[]
  }

  export type SubjectCreatelearningOutcomesInput = {
    set: string[]
  }

  export type SubjectAssignmentCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SubjectAssignmentCreateWithoutSubjectInput, SubjectAssignmentUncheckedCreateWithoutSubjectInput> | SubjectAssignmentCreateWithoutSubjectInput[] | SubjectAssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectAssignmentCreateOrConnectWithoutSubjectInput | SubjectAssignmentCreateOrConnectWithoutSubjectInput[]
    createMany?: SubjectAssignmentCreateManySubjectInputEnvelope
    connect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
  }

  export type ClassSubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ClassSubjectCreateWithoutSubjectInput, ClassSubjectUncheckedCreateWithoutSubjectInput> | ClassSubjectCreateWithoutSubjectInput[] | ClassSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutSubjectInput | ClassSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: ClassSubjectCreateManySubjectInputEnvelope
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
  }

  export type SubjectAssignmentUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SubjectAssignmentCreateWithoutSubjectInput, SubjectAssignmentUncheckedCreateWithoutSubjectInput> | SubjectAssignmentCreateWithoutSubjectInput[] | SubjectAssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectAssignmentCreateOrConnectWithoutSubjectInput | SubjectAssignmentCreateOrConnectWithoutSubjectInput[]
    createMany?: SubjectAssignmentCreateManySubjectInputEnvelope
    connect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
  }

  export type ClassSubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ClassSubjectCreateWithoutSubjectInput, ClassSubjectUncheckedCreateWithoutSubjectInput> | ClassSubjectCreateWithoutSubjectInput[] | ClassSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutSubjectInput | ClassSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: ClassSubjectCreateManySubjectInputEnvelope
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
  }

  export type SubjectUpdategradeLevelInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SubjectUpdateprerequisitesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SubjectUpdatecorequisitesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SubjectUpdatelearningOutcomesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SubjectAssignmentUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SubjectAssignmentCreateWithoutSubjectInput, SubjectAssignmentUncheckedCreateWithoutSubjectInput> | SubjectAssignmentCreateWithoutSubjectInput[] | SubjectAssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectAssignmentCreateOrConnectWithoutSubjectInput | SubjectAssignmentCreateOrConnectWithoutSubjectInput[]
    upsert?: SubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput | SubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SubjectAssignmentCreateManySubjectInputEnvelope
    set?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    disconnect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    delete?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    connect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    update?: SubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput | SubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SubjectAssignmentUpdateManyWithWhereWithoutSubjectInput | SubjectAssignmentUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SubjectAssignmentScalarWhereInput | SubjectAssignmentScalarWhereInput[]
  }

  export type ClassSubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ClassSubjectCreateWithoutSubjectInput, ClassSubjectUncheckedCreateWithoutSubjectInput> | ClassSubjectCreateWithoutSubjectInput[] | ClassSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutSubjectInput | ClassSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: ClassSubjectUpsertWithWhereUniqueWithoutSubjectInput | ClassSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ClassSubjectCreateManySubjectInputEnvelope
    set?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    disconnect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    delete?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    update?: ClassSubjectUpdateWithWhereUniqueWithoutSubjectInput | ClassSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ClassSubjectUpdateManyWithWhereWithoutSubjectInput | ClassSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
  }

  export type SubjectAssignmentUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SubjectAssignmentCreateWithoutSubjectInput, SubjectAssignmentUncheckedCreateWithoutSubjectInput> | SubjectAssignmentCreateWithoutSubjectInput[] | SubjectAssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectAssignmentCreateOrConnectWithoutSubjectInput | SubjectAssignmentCreateOrConnectWithoutSubjectInput[]
    upsert?: SubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput | SubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SubjectAssignmentCreateManySubjectInputEnvelope
    set?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    disconnect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    delete?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    connect?: SubjectAssignmentWhereUniqueInput | SubjectAssignmentWhereUniqueInput[]
    update?: SubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput | SubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SubjectAssignmentUpdateManyWithWhereWithoutSubjectInput | SubjectAssignmentUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SubjectAssignmentScalarWhereInput | SubjectAssignmentScalarWhereInput[]
  }

  export type ClassSubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ClassSubjectCreateWithoutSubjectInput, ClassSubjectUncheckedCreateWithoutSubjectInput> | ClassSubjectCreateWithoutSubjectInput[] | ClassSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ClassSubjectCreateOrConnectWithoutSubjectInput | ClassSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: ClassSubjectUpsertWithWhereUniqueWithoutSubjectInput | ClassSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ClassSubjectCreateManySubjectInputEnvelope
    set?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    disconnect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    delete?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    connect?: ClassSubjectWhereUniqueInput | ClassSubjectWhereUniqueInput[]
    update?: ClassSubjectUpdateWithWhereUniqueWithoutSubjectInput | ClassSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ClassSubjectUpdateManyWithWhereWithoutSubjectInput | ClassSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
  }

  export type SubjectCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutAssignmentsInput
    connect?: SubjectWhereUniqueInput
  }

  export type StaffProfileCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<StaffProfileCreateWithoutSubjectsInput, StaffProfileUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutSubjectsInput
    connect?: StaffProfileWhereUniqueInput
  }

  export type SubjectUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutAssignmentsInput
    upsert?: SubjectUpsertWithoutAssignmentsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutAssignmentsInput, SubjectUpdateWithoutAssignmentsInput>, SubjectUncheckedUpdateWithoutAssignmentsInput>
  }

  export type StaffProfileUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<StaffProfileCreateWithoutSubjectsInput, StaffProfileUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutSubjectsInput
    upsert?: StaffProfileUpsertWithoutSubjectsInput
    connect?: StaffProfileWhereUniqueInput
    update?: XOR<XOR<StaffProfileUpdateToOneWithWhereWithoutSubjectsInput, StaffProfileUpdateWithoutSubjectsInput>, StaffProfileUncheckedUpdateWithoutSubjectsInput>
  }

  export type SchoolCreateNestedOneWithoutCommunicationGroupsInput = {
    create?: XOR<SchoolCreateWithoutCommunicationGroupsInput, SchoolUncheckedCreateWithoutCommunicationGroupsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutCommunicationGroupsInput
    connect?: SchoolWhereUniqueInput
  }

  export type SchoolUpdateOneRequiredWithoutCommunicationGroupsNestedInput = {
    create?: XOR<SchoolCreateWithoutCommunicationGroupsInput, SchoolUncheckedCreateWithoutCommunicationGroupsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutCommunicationGroupsInput
    upsert?: SchoolUpsertWithoutCommunicationGroupsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutCommunicationGroupsInput, SchoolUpdateWithoutCommunicationGroupsInput>, SchoolUncheckedUpdateWithoutCommunicationGroupsInput>
  }

  export type SchoolRoleCreatepermissionsInput = {
    set: string[]
  }

  export type SchoolRoleCreatecommunicationPermissionsInput = {
    set: string[]
  }

  export type SchoolCreateNestedOneWithoutSchoolRolesInput = {
    create?: XOR<SchoolCreateWithoutSchoolRolesInput, SchoolUncheckedCreateWithoutSchoolRolesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutSchoolRolesInput
    connect?: SchoolWhereUniqueInput
  }

  export type SchoolRoleUpdatepermissionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SchoolRoleUpdatecommunicationPermissionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SchoolUpdateOneRequiredWithoutSchoolRolesNestedInput = {
    create?: XOR<SchoolCreateWithoutSchoolRolesInput, SchoolUncheckedCreateWithoutSchoolRolesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutSchoolRolesInput
    upsert?: SchoolUpsertWithoutSchoolRolesInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutSchoolRolesInput, SchoolUpdateWithoutSchoolRolesInput>, SchoolUncheckedUpdateWithoutSchoolRolesInput>
  }

  export type FileCreateaccessibleToInput = {
    set: string[]
  }

  export type FileQuotaCreateNestedOneWithoutFileInput = {
    create?: XOR<FileQuotaCreateWithoutFileInput, FileQuotaUncheckedCreateWithoutFileInput>
    connectOrCreate?: FileQuotaCreateOrConnectWithoutFileInput
    connect?: FileQuotaWhereUniqueInput
  }

  export type FileQuotaUncheckedCreateNestedOneWithoutFileInput = {
    create?: XOR<FileQuotaCreateWithoutFileInput, FileQuotaUncheckedCreateWithoutFileInput>
    connectOrCreate?: FileQuotaCreateOrConnectWithoutFileInput
    connect?: FileQuotaWhereUniqueInput
  }

  export type EnumFileTypeFieldUpdateOperationsInput = {
    set?: $Enums.FileType
  }

  export type EnumFileCategoryFieldUpdateOperationsInput = {
    set?: $Enums.FileCategory
  }

  export type EnumFileAccessLevelFieldUpdateOperationsInput = {
    set?: $Enums.FileAccessLevel
  }

  export type EnumStorageProviderFieldUpdateOperationsInput = {
    set?: $Enums.StorageProvider
  }

  export type FileUpdateaccessibleToInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FileQuotaUpdateOneWithoutFileNestedInput = {
    create?: XOR<FileQuotaCreateWithoutFileInput, FileQuotaUncheckedCreateWithoutFileInput>
    connectOrCreate?: FileQuotaCreateOrConnectWithoutFileInput
    upsert?: FileQuotaUpsertWithoutFileInput
    disconnect?: FileQuotaWhereInput | boolean
    delete?: FileQuotaWhereInput | boolean
    connect?: FileQuotaWhereUniqueInput
    update?: XOR<XOR<FileQuotaUpdateToOneWithWhereWithoutFileInput, FileQuotaUpdateWithoutFileInput>, FileQuotaUncheckedUpdateWithoutFileInput>
  }

  export type FileQuotaUncheckedUpdateOneWithoutFileNestedInput = {
    create?: XOR<FileQuotaCreateWithoutFileInput, FileQuotaUncheckedCreateWithoutFileInput>
    connectOrCreate?: FileQuotaCreateOrConnectWithoutFileInput
    upsert?: FileQuotaUpsertWithoutFileInput
    disconnect?: FileQuotaWhereInput | boolean
    delete?: FileQuotaWhereInput | boolean
    connect?: FileQuotaWhereUniqueInput
    update?: XOR<XOR<FileQuotaUpdateToOneWithWhereWithoutFileInput, FileQuotaUpdateWithoutFileInput>, FileQuotaUncheckedUpdateWithoutFileInput>
  }

  export type FileCreateNestedOneWithoutQuotaInput = {
    create?: XOR<FileCreateWithoutQuotaInput, FileUncheckedCreateWithoutQuotaInput>
    connectOrCreate?: FileCreateOrConnectWithoutQuotaInput
    connect?: FileWhereUniqueInput
  }

  export type FileUpdateOneRequiredWithoutQuotaNestedInput = {
    create?: XOR<FileCreateWithoutQuotaInput, FileUncheckedCreateWithoutQuotaInput>
    connectOrCreate?: FileCreateOrConnectWithoutQuotaInput
    upsert?: FileUpsertWithoutQuotaInput
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutQuotaInput, FileUpdateWithoutQuotaInput>, FileUncheckedUpdateWithoutQuotaInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedEnumVerificationStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumVerificationStatusNullableFilter<$PrismaModel> | $Enums.VerificationStatus | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumEmploymentEligibilityStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentEligibilityStatus | EnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentEligibilityStatus[] | ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentEligibilityStatus[] | ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentEligibilityStatusFilter<$PrismaModel> | $Enums.EmploymentEligibilityStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedEnumVerificationStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumVerificationStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.VerificationStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumVerificationStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumVerificationStatusNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumEmploymentEligibilityStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentEligibilityStatus | EnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentEligibilityStatus[] | ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentEligibilityStatus[] | ListEnumEmploymentEligibilityStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentEligibilityStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentEligibilityStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentEligibilityStatusFilter<$PrismaModel>
    _max?: NestedEnumEmploymentEligibilityStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumOTPStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OTPStatus | EnumOTPStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OTPStatus[] | ListEnumOTPStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OTPStatus[] | ListEnumOTPStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOTPStatusFilter<$PrismaModel> | $Enums.OTPStatus
  }

  export type NestedEnumOTPStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OTPStatus | EnumOTPStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OTPStatus[] | ListEnumOTPStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OTPStatus[] | ListEnumOTPStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOTPStatusWithAggregatesFilter<$PrismaModel> | $Enums.OTPStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOTPStatusFilter<$PrismaModel>
    _max?: NestedEnumOTPStatusFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumVerificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusFilter<$PrismaModel> | $Enums.VerificationStatus
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.VerificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVerificationStatusFilter<$PrismaModel>
    _max?: NestedEnumVerificationStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntityTypeFilter<$PrismaModel> | $Enums.EntityType
  }

  export type NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.EntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumEntityTypeFilter<$PrismaModel>
  }

  export type NestedEnumOccupationTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OccupationType | EnumOccupationTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OccupationType[] | ListEnumOccupationTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OccupationType[] | ListEnumOccupationTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOccupationTypeNullableFilter<$PrismaModel> | $Enums.OccupationType | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumOccupationTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OccupationType | EnumOccupationTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OccupationType[] | ListEnumOccupationTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OccupationType[] | ListEnumOccupationTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOccupationTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.OccupationType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOccupationTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumOccupationTypeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumReportCardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportCardStatus | EnumReportCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportCardStatus[] | ListEnumReportCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportCardStatus[] | ListEnumReportCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReportCardStatusFilter<$PrismaModel> | $Enums.ReportCardStatus
  }

  export type NestedEnumReportCardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportCardStatus | EnumReportCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportCardStatus[] | ListEnumReportCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportCardStatus[] | ListEnumReportCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReportCardStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReportCardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportCardStatusFilter<$PrismaModel>
    _max?: NestedEnumReportCardStatusFilter<$PrismaModel>
  }

  export type NestedEnumGradeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeStatus | EnumGradeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GradeStatus[] | ListEnumGradeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradeStatus[] | ListEnumGradeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGradeStatusFilter<$PrismaModel> | $Enums.GradeStatus
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumGradeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeStatus | EnumGradeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GradeStatus[] | ListEnumGradeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradeStatus[] | ListEnumGradeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGradeStatusWithAggregatesFilter<$PrismaModel> | $Enums.GradeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGradeStatusFilter<$PrismaModel>
    _max?: NestedEnumGradeStatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumFileTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FileType | EnumFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FileType[] | ListEnumFileTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileType[] | ListEnumFileTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFileTypeFilter<$PrismaModel> | $Enums.FileType
  }

  export type NestedEnumFileCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.FileCategory | EnumFileCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFileCategoryFilter<$PrismaModel> | $Enums.FileCategory
  }

  export type NestedEnumFileAccessLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.FileAccessLevel | EnumFileAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.FileAccessLevel[] | ListEnumFileAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileAccessLevel[] | ListEnumFileAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumFileAccessLevelFilter<$PrismaModel> | $Enums.FileAccessLevel
  }

  export type NestedEnumStorageProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageProvider | EnumStorageProviderFieldRefInput<$PrismaModel>
    in?: $Enums.StorageProvider[] | ListEnumStorageProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorageProvider[] | ListEnumStorageProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumStorageProviderFilter<$PrismaModel> | $Enums.StorageProvider
  }

  export type NestedEnumFileTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileType | EnumFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FileType[] | ListEnumFileTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileType[] | ListEnumFileTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFileTypeWithAggregatesFilter<$PrismaModel> | $Enums.FileType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileTypeFilter<$PrismaModel>
    _max?: NestedEnumFileTypeFilter<$PrismaModel>
  }

  export type NestedEnumFileCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileCategory | EnumFileCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFileCategoryWithAggregatesFilter<$PrismaModel> | $Enums.FileCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileCategoryFilter<$PrismaModel>
    _max?: NestedEnumFileCategoryFilter<$PrismaModel>
  }

  export type NestedEnumFileAccessLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileAccessLevel | EnumFileAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.FileAccessLevel[] | ListEnumFileAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileAccessLevel[] | ListEnumFileAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumFileAccessLevelWithAggregatesFilter<$PrismaModel> | $Enums.FileAccessLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileAccessLevelFilter<$PrismaModel>
    _max?: NestedEnumFileAccessLevelFilter<$PrismaModel>
  }

  export type NestedEnumStorageProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageProvider | EnumStorageProviderFieldRefInput<$PrismaModel>
    in?: $Enums.StorageProvider[] | ListEnumStorageProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorageProvider[] | ListEnumStorageProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumStorageProviderWithAggregatesFilter<$PrismaModel> | $Enums.StorageProvider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStorageProviderFilter<$PrismaModel>
    _max?: NestedEnumStorageProviderFilter<$PrismaModel>
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileUncheckedCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileUncheckedCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type KYCDocumentCreateWithoutUserInput = {
    id?: string
    type: $Enums.DocumentType
    status: $Enums.VerificationStatus
    documentUrls?: KYCDocumentCreatedocumentUrlsInput | string[]
    verifiedAt?: Date | string | null
    metadata: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KYCDocumentUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.DocumentType
    status: $Enums.VerificationStatus
    documentUrls?: KYCDocumentCreatedocumentUrlsInput | string[]
    verifiedAt?: Date | string | null
    metadata: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KYCDocumentCreateOrConnectWithoutUserInput = {
    where: KYCDocumentWhereUniqueInput
    create: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput>
  }

  export type KYCDocumentCreateManyUserInputEnvelope = {
    data: KYCDocumentCreateManyUserInput | KYCDocumentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VerificationHistoryCreateWithoutVerifierInput = {
    id?: string
    entityId: string
    entityType: $Enums.EntityType
    status: $Enums.VerificationStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationHistoryUncheckedCreateWithoutVerifierInput = {
    id?: string
    entityId: string
    entityType: $Enums.EntityType
    status: $Enums.VerificationStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationHistoryCreateOrConnectWithoutVerifierInput = {
    where: VerificationHistoryWhereUniqueInput
    create: XOR<VerificationHistoryCreateWithoutVerifierInput, VerificationHistoryUncheckedCreateWithoutVerifierInput>
  }

  export type VerificationHistoryCreateManyVerifierInputEnvelope = {
    data: VerificationHistoryCreateManyVerifierInput | VerificationHistoryCreateManyVerifierInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUpdateOneWithoutProfileNestedInput
    studentProfile?: StudentProfileUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedUpdateOneWithoutProfileNestedInput
    studentProfile?: StudentProfileUncheckedUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUncheckedUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type KYCDocumentUpsertWithWhereUniqueWithoutUserInput = {
    where: KYCDocumentWhereUniqueInput
    update: XOR<KYCDocumentUpdateWithoutUserInput, KYCDocumentUncheckedUpdateWithoutUserInput>
    create: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput>
  }

  export type KYCDocumentUpdateWithWhereUniqueWithoutUserInput = {
    where: KYCDocumentWhereUniqueInput
    data: XOR<KYCDocumentUpdateWithoutUserInput, KYCDocumentUncheckedUpdateWithoutUserInput>
  }

  export type KYCDocumentUpdateManyWithWhereWithoutUserInput = {
    where: KYCDocumentScalarWhereInput
    data: XOR<KYCDocumentUpdateManyMutationInput, KYCDocumentUncheckedUpdateManyWithoutUserInput>
  }

  export type KYCDocumentScalarWhereInput = {
    AND?: KYCDocumentScalarWhereInput | KYCDocumentScalarWhereInput[]
    OR?: KYCDocumentScalarWhereInput[]
    NOT?: KYCDocumentScalarWhereInput | KYCDocumentScalarWhereInput[]
    id?: StringFilter<"KYCDocument"> | string
    userId?: StringFilter<"KYCDocument"> | string
    type?: EnumDocumentTypeFilter<"KYCDocument"> | $Enums.DocumentType
    status?: EnumVerificationStatusFilter<"KYCDocument"> | $Enums.VerificationStatus
    documentUrls?: StringNullableListFilter<"KYCDocument">
    verifiedAt?: DateTimeNullableFilter<"KYCDocument"> | Date | string | null
    metadata?: JsonFilter<"KYCDocument">
    createdAt?: DateTimeFilter<"KYCDocument"> | Date | string
    updatedAt?: DateTimeFilter<"KYCDocument"> | Date | string
  }

  export type VerificationHistoryUpsertWithWhereUniqueWithoutVerifierInput = {
    where: VerificationHistoryWhereUniqueInput
    update: XOR<VerificationHistoryUpdateWithoutVerifierInput, VerificationHistoryUncheckedUpdateWithoutVerifierInput>
    create: XOR<VerificationHistoryCreateWithoutVerifierInput, VerificationHistoryUncheckedCreateWithoutVerifierInput>
  }

  export type VerificationHistoryUpdateWithWhereUniqueWithoutVerifierInput = {
    where: VerificationHistoryWhereUniqueInput
    data: XOR<VerificationHistoryUpdateWithoutVerifierInput, VerificationHistoryUncheckedUpdateWithoutVerifierInput>
  }

  export type VerificationHistoryUpdateManyWithWhereWithoutVerifierInput = {
    where: VerificationHistoryScalarWhereInput
    data: XOR<VerificationHistoryUpdateManyMutationInput, VerificationHistoryUncheckedUpdateManyWithoutVerifierInput>
  }

  export type VerificationHistoryScalarWhereInput = {
    AND?: VerificationHistoryScalarWhereInput | VerificationHistoryScalarWhereInput[]
    OR?: VerificationHistoryScalarWhereInput[]
    NOT?: VerificationHistoryScalarWhereInput | VerificationHistoryScalarWhereInput[]
    id?: StringFilter<"VerificationHistory"> | string
    entityId?: StringFilter<"VerificationHistory"> | string
    entityType?: EnumEntityTypeFilter<"VerificationHistory"> | $Enums.EntityType
    status?: EnumVerificationStatusFilter<"VerificationHistory"> | $Enums.VerificationStatus
    verifiedBy?: StringNullableFilter<"VerificationHistory"> | string | null
    notes?: StringNullableFilter<"VerificationHistory"> | string | null
    createdAt?: DateTimeFilter<"VerificationHistory"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationHistory"> | Date | string
  }

  export type UserCreateWithoutDocumentsInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    verifications?: VerificationHistoryCreateNestedManyWithoutVerifierInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    verifications?: VerificationHistoryUncheckedCreateNestedManyWithoutVerifierInput
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    verifications?: VerificationHistoryUpdateManyWithoutVerifierNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    verifications?: VerificationHistoryUncheckedUpdateManyWithoutVerifierNestedInput
  }

  export type UserCreateWithoutVerificationsInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    documents?: KYCDocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVerificationsInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    documents?: KYCDocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVerificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
  }

  export type UserUpsertWithoutVerificationsInput = {
    update: XOR<UserUpdateWithoutVerificationsInput, UserUncheckedUpdateWithoutVerificationsInput>
    create: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVerificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVerificationsInput, UserUncheckedUpdateWithoutVerificationsInput>
  }

  export type UserUpdateWithoutVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    documents?: KYCDocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    documents?: KYCDocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    documents?: KYCDocumentCreateNestedManyWithoutUserInput
    verifications?: VerificationHistoryCreateNestedManyWithoutVerifierInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email?: string | null
    password: string
    phone?: string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    permissions?: UserCreatepermissionsInput | string[]
    status?: $Enums.UserStatus
    kycStatus?: $Enums.VerificationStatus | null
    kycVerifiedAt?: Date | string | null
    kycDocumentIds?: UserCreatekycDocumentIdsInput | string[]
    employmentStatus?: $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: Date | string | null
    employmentDocumentIds?: UserCreateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    documents?: KYCDocumentUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationHistoryUncheckedCreateNestedManyWithoutVerifierInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type ProfessionalProfileCreateWithoutProfileInput = {
    id?: string
    currentPosition?: string | null
    yearsOfExperience?: number | null
    workHistory?: ProfessionalProfileCreateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileCreatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileCreatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileCreatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileCreateskillsInput | string[]
    specializations?: ProfessionalProfileCreatespecializationsInput | string[]
    achievements?: ProfessionalProfileCreateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalProfileUncheckedCreateWithoutProfileInput = {
    id?: string
    currentPosition?: string | null
    yearsOfExperience?: number | null
    workHistory?: ProfessionalProfileCreateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileCreatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileCreatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileCreatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileCreateskillsInput | string[]
    specializations?: ProfessionalProfileCreatespecializationsInput | string[]
    achievements?: ProfessionalProfileCreateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalProfileCreateOrConnectWithoutProfileInput = {
    where: ProfessionalProfileWhereUniqueInput
    create: XOR<ProfessionalProfileCreateWithoutProfileInput, ProfessionalProfileUncheckedCreateWithoutProfileInput>
  }

  export type StudentProfileCreateWithoutProfileInput = {
    id?: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    guardians?: ParentStudentRelationCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardCreateNestedManyWithoutStudentProfileInput
    grades?: GradeCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileUncheckedCreateWithoutProfileInput = {
    id?: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    guardians?: ParentStudentRelationUncheckedCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceUncheckedCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutStudentProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileCreateOrConnectWithoutProfileInput = {
    where: StudentProfileWhereUniqueInput
    create: XOR<StudentProfileCreateWithoutProfileInput, StudentProfileUncheckedCreateWithoutProfileInput>
  }

  export type ParentProfileCreateWithoutProfileInput = {
    id?: string
    relationship: string
    preferredLanguage?: string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ParentStudentRelationCreateNestedManyWithoutParentProfileInput
  }

  export type ParentProfileUncheckedCreateWithoutProfileInput = {
    id?: string
    relationship: string
    preferredLanguage?: string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ParentStudentRelationUncheckedCreateNestedManyWithoutParentProfileInput
  }

  export type ParentProfileCreateOrConnectWithoutProfileInput = {
    where: ParentProfileWhereUniqueInput
    create: XOR<ParentProfileCreateWithoutProfileInput, ParentProfileUncheckedCreateWithoutProfileInput>
  }

  export type StaffProfileCreateWithoutProfileInput = {
    id?: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    assignments?: StaffAssignmentCreateNestedManyWithoutStaffProfileInput
    subjects?: SubjectAssignmentCreateNestedManyWithoutStaffProfileInput
    grades?: GradeCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileUncheckedCreateWithoutProfileInput = {
    id?: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    subjects?: SubjectAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileCreateOrConnectWithoutProfileInput = {
    where: StaffProfileWhereUniqueInput
    create: XOR<StaffProfileCreateWithoutProfileInput, StaffProfileUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documents?: KYCDocumentUpdateManyWithoutUserNestedInput
    verifications?: VerificationHistoryUpdateManyWithoutVerifierNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    permissions?: UserUpdatepermissionsInput | string[]
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    kycStatus?: NullableEnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocumentIds?: UserUpdatekycDocumentIdsInput | string[]
    employmentStatus?: EnumEmploymentEligibilityStatusFieldUpdateOperationsInput | $Enums.EmploymentEligibilityStatus
    employmentVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employmentDocumentIds?: UserUpdateemploymentDocumentIdsInput | string[]
    socialAccessEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documents?: KYCDocumentUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationHistoryUncheckedUpdateManyWithoutVerifierNestedInput
  }

  export type ProfessionalProfileUpsertWithoutProfileInput = {
    update: XOR<ProfessionalProfileUpdateWithoutProfileInput, ProfessionalProfileUncheckedUpdateWithoutProfileInput>
    create: XOR<ProfessionalProfileCreateWithoutProfileInput, ProfessionalProfileUncheckedCreateWithoutProfileInput>
    where?: ProfessionalProfileWhereInput
  }

  export type ProfessionalProfileUpdateToOneWithWhereWithoutProfileInput = {
    where?: ProfessionalProfileWhereInput
    data: XOR<ProfessionalProfileUpdateWithoutProfileInput, ProfessionalProfileUncheckedUpdateWithoutProfileInput>
  }

  export type ProfessionalProfileUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    workHistory?: ProfessionalProfileUpdateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileUpdatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileUpdatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileUpdatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileUpdateskillsInput | string[]
    specializations?: ProfessionalProfileUpdatespecializationsInput | string[]
    achievements?: ProfessionalProfileUpdateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalProfileUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    workHistory?: ProfessionalProfileUpdateworkHistoryInput | InputJsonValue[]
    teachingExperience?: NullableJsonNullValueInput | InputJsonValue
    subjectsQualified?: ProfessionalProfileUpdatesubjectsQualifiedInput | string[]
    adminExperience?: NullableJsonNullValueInput | InputJsonValue
    certifications?: ProfessionalProfileUpdatecertificationsInput | InputJsonValue[]
    licenses?: ProfessionalProfileUpdatelicensesInput | InputJsonValue[]
    skills?: ProfessionalProfileUpdateskillsInput | string[]
    specializations?: ProfessionalProfileUpdatespecializationsInput | string[]
    achievements?: ProfessionalProfileUpdateachievementsInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentProfileUpsertWithoutProfileInput = {
    update: XOR<StudentProfileUpdateWithoutProfileInput, StudentProfileUncheckedUpdateWithoutProfileInput>
    create: XOR<StudentProfileCreateWithoutProfileInput, StudentProfileUncheckedCreateWithoutProfileInput>
    where?: StudentProfileWhereInput
  }

  export type StudentProfileUpdateToOneWithWhereWithoutProfileInput = {
    where?: StudentProfileWhereInput
    data: XOR<StudentProfileUpdateWithoutProfileInput, StudentProfileUncheckedUpdateWithoutProfileInput>
  }

  export type StudentProfileUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guardians?: ParentStudentRelationUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guardians?: ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUncheckedUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentProfileNestedInput
  }

  export type ParentProfileUpsertWithoutProfileInput = {
    update: XOR<ParentProfileUpdateWithoutProfileInput, ParentProfileUncheckedUpdateWithoutProfileInput>
    create: XOR<ParentProfileCreateWithoutProfileInput, ParentProfileUncheckedCreateWithoutProfileInput>
    where?: ParentProfileWhereInput
  }

  export type ParentProfileUpdateToOneWithWhereWithoutProfileInput = {
    where?: ParentProfileWhereInput
    data: XOR<ParentProfileUpdateWithoutProfileInput, ParentProfileUncheckedUpdateWithoutProfileInput>
  }

  export type ParentProfileUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ParentStudentRelationUpdateManyWithoutParentProfileNestedInput
  }

  export type ParentProfileUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ParentStudentRelationUncheckedUpdateManyWithoutParentProfileNestedInput
  }

  export type StaffProfileUpsertWithoutProfileInput = {
    update: XOR<StaffProfileUpdateWithoutProfileInput, StaffProfileUncheckedUpdateWithoutProfileInput>
    create: XOR<StaffProfileCreateWithoutProfileInput, StaffProfileUncheckedCreateWithoutProfileInput>
    where?: StaffProfileWhereInput
  }

  export type StaffProfileUpdateToOneWithWhereWithoutProfileInput = {
    where?: StaffProfileWhereInput
    data: XOR<StaffProfileUpdateWithoutProfileInput, StaffProfileUncheckedUpdateWithoutProfileInput>
  }

  export type StaffProfileUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    assignments?: StaffAssignmentUpdateManyWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutStaffProfileNestedInput
  }

  export type StaffProfileUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutStaffProfileNestedInput
  }

  export type ProfileCreateWithoutProfessionalProfileInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutProfessionalProfileInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    studentProfile?: StudentProfileUncheckedCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileUncheckedCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutProfessionalProfileInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutProfessionalProfileInput, ProfileUncheckedCreateWithoutProfessionalProfileInput>
  }

  export type ProfileUpsertWithoutProfessionalProfileInput = {
    update: XOR<ProfileUpdateWithoutProfessionalProfileInput, ProfileUncheckedUpdateWithoutProfessionalProfileInput>
    create: XOR<ProfileCreateWithoutProfessionalProfileInput, ProfileUncheckedCreateWithoutProfessionalProfileInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutProfessionalProfileInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutProfessionalProfileInput, ProfileUncheckedUpdateWithoutProfessionalProfileInput>
  }

  export type ProfileUpdateWithoutProfessionalProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    studentProfile?: StudentProfileUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutProfessionalProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    studentProfile?: StudentProfileUncheckedUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUncheckedUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type StaffAssignmentCreateWithoutSchoolInput = {
    id?: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    staffProfile: StaffProfileCreateNestedOneWithoutAssignmentsInput
  }

  export type StaffAssignmentUncheckedCreateWithoutSchoolInput = {
    id?: string
    staffProfileId: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffAssignmentCreateOrConnectWithoutSchoolInput = {
    where: StaffAssignmentWhereUniqueInput
    create: XOR<StaffAssignmentCreateWithoutSchoolInput, StaffAssignmentUncheckedCreateWithoutSchoolInput>
  }

  export type StaffAssignmentCreateManySchoolInputEnvelope = {
    data: StaffAssignmentCreateManySchoolInput | StaffAssignmentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ReportCardCreateWithoutSchoolInput = {
    id?: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    studentProfile: StudentProfileCreateNestedOneWithoutReportCardsInput
    grades?: GradeCreateNestedManyWithoutReportCardInput
  }

  export type ReportCardUncheckedCreateWithoutSchoolInput = {
    id?: string
    studentProfileId: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    grades?: GradeUncheckedCreateNestedManyWithoutReportCardInput
  }

  export type ReportCardCreateOrConnectWithoutSchoolInput = {
    where: ReportCardWhereUniqueInput
    create: XOR<ReportCardCreateWithoutSchoolInput, ReportCardUncheckedCreateWithoutSchoolInput>
  }

  export type ReportCardCreateManySchoolInputEnvelope = {
    data: ReportCardCreateManySchoolInput | ReportCardCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ClassSubjectCreateWithoutSchoolInput = {
    id?: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
    class: ClassCreateNestedOneWithoutClassSubjectsInput
    subject: SubjectCreateNestedOneWithoutClassSubjectsInput
    staffProfile: StaffProfileCreateNestedOneWithoutClassSubjectsInput
  }

  export type ClassSubjectUncheckedCreateWithoutSchoolInput = {
    id?: string
    classId: string
    subjectId: string
    staffProfileId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type ClassSubjectCreateOrConnectWithoutSchoolInput = {
    where: ClassSubjectWhereUniqueInput
    create: XOR<ClassSubjectCreateWithoutSchoolInput, ClassSubjectUncheckedCreateWithoutSchoolInput>
  }

  export type ClassSubjectCreateManySchoolInputEnvelope = {
    data: ClassSubjectCreateManySchoolInput | ClassSubjectCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutSchoolInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectCreateNestedManyWithoutClassInput
    students?: ClassStudentCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutSchoolInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutClassInput
    students?: ClassStudentUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutSchoolInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput>
  }

  export type ClassCreateManySchoolInputEnvelope = {
    data: ClassCreateManySchoolInput | ClassCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type CommunicationGroupCreateWithoutSchoolInput = {
    id?: string
    name: string
    type: string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommunicationGroupUncheckedCreateWithoutSchoolInput = {
    id?: string
    name: string
    type: string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommunicationGroupCreateOrConnectWithoutSchoolInput = {
    where: CommunicationGroupWhereUniqueInput
    create: XOR<CommunicationGroupCreateWithoutSchoolInput, CommunicationGroupUncheckedCreateWithoutSchoolInput>
  }

  export type CommunicationGroupCreateManySchoolInputEnvelope = {
    data: CommunicationGroupCreateManySchoolInput | CommunicationGroupCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type SchoolRoleCreateWithoutSchoolInput = {
    id?: string
    userId: string
    role: $Enums.Role
    permissions?: SchoolRoleCreatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleCreatecommunicationPermissionsInput | string[]
    assignedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolRoleUncheckedCreateWithoutSchoolInput = {
    id?: string
    userId: string
    role: $Enums.Role
    permissions?: SchoolRoleCreatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleCreatecommunicationPermissionsInput | string[]
    assignedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolRoleCreateOrConnectWithoutSchoolInput = {
    where: SchoolRoleWhereUniqueInput
    create: XOR<SchoolRoleCreateWithoutSchoolInput, SchoolRoleUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolRoleCreateManySchoolInputEnvelope = {
    data: SchoolRoleCreateManySchoolInput | SchoolRoleCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type StaffAssignmentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StaffAssignmentWhereUniqueInput
    update: XOR<StaffAssignmentUpdateWithoutSchoolInput, StaffAssignmentUncheckedUpdateWithoutSchoolInput>
    create: XOR<StaffAssignmentCreateWithoutSchoolInput, StaffAssignmentUncheckedCreateWithoutSchoolInput>
  }

  export type StaffAssignmentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StaffAssignmentWhereUniqueInput
    data: XOR<StaffAssignmentUpdateWithoutSchoolInput, StaffAssignmentUncheckedUpdateWithoutSchoolInput>
  }

  export type StaffAssignmentUpdateManyWithWhereWithoutSchoolInput = {
    where: StaffAssignmentScalarWhereInput
    data: XOR<StaffAssignmentUpdateManyMutationInput, StaffAssignmentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type StaffAssignmentScalarWhereInput = {
    AND?: StaffAssignmentScalarWhereInput | StaffAssignmentScalarWhereInput[]
    OR?: StaffAssignmentScalarWhereInput[]
    NOT?: StaffAssignmentScalarWhereInput | StaffAssignmentScalarWhereInput[]
    id?: StringFilter<"StaffAssignment"> | string
    staffProfileId?: StringFilter<"StaffAssignment"> | string
    schoolId?: StringFilter<"StaffAssignment"> | string
    role?: EnumRoleFilter<"StaffAssignment"> | $Enums.Role
    startDate?: DateTimeFilter<"StaffAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"StaffAssignment"> | Date | string | null
    isActive?: BoolFilter<"StaffAssignment"> | boolean
    metadata?: JsonNullableFilter<"StaffAssignment">
    createdAt?: DateTimeFilter<"StaffAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"StaffAssignment"> | Date | string
  }

  export type ReportCardUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ReportCardWhereUniqueInput
    update: XOR<ReportCardUpdateWithoutSchoolInput, ReportCardUncheckedUpdateWithoutSchoolInput>
    create: XOR<ReportCardCreateWithoutSchoolInput, ReportCardUncheckedCreateWithoutSchoolInput>
  }

  export type ReportCardUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ReportCardWhereUniqueInput
    data: XOR<ReportCardUpdateWithoutSchoolInput, ReportCardUncheckedUpdateWithoutSchoolInput>
  }

  export type ReportCardUpdateManyWithWhereWithoutSchoolInput = {
    where: ReportCardScalarWhereInput
    data: XOR<ReportCardUpdateManyMutationInput, ReportCardUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ReportCardScalarWhereInput = {
    AND?: ReportCardScalarWhereInput | ReportCardScalarWhereInput[]
    OR?: ReportCardScalarWhereInput[]
    NOT?: ReportCardScalarWhereInput | ReportCardScalarWhereInput[]
    id?: StringFilter<"ReportCard"> | string
    studentProfileId?: StringFilter<"ReportCard"> | string
    schoolId?: StringFilter<"ReportCard"> | string
    term?: StringFilter<"ReportCard"> | string
    academicYear?: StringFilter<"ReportCard"> | string
    teacherComments?: StringNullableFilter<"ReportCard"> | string | null
    principalComments?: StringNullableFilter<"ReportCard"> | string | null
    attendance?: JsonNullableFilter<"ReportCard">
    status?: EnumReportCardStatusFilter<"ReportCard"> | $Enums.ReportCardStatus
    publishedAt?: DateTimeNullableFilter<"ReportCard"> | Date | string | null
    metadata?: JsonNullableFilter<"ReportCard">
    createdAt?: DateTimeFilter<"ReportCard"> | Date | string
    updatedAt?: DateTimeFilter<"ReportCard"> | Date | string
  }

  export type ClassSubjectUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ClassSubjectWhereUniqueInput
    update: XOR<ClassSubjectUpdateWithoutSchoolInput, ClassSubjectUncheckedUpdateWithoutSchoolInput>
    create: XOR<ClassSubjectCreateWithoutSchoolInput, ClassSubjectUncheckedCreateWithoutSchoolInput>
  }

  export type ClassSubjectUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ClassSubjectWhereUniqueInput
    data: XOR<ClassSubjectUpdateWithoutSchoolInput, ClassSubjectUncheckedUpdateWithoutSchoolInput>
  }

  export type ClassSubjectUpdateManyWithWhereWithoutSchoolInput = {
    where: ClassSubjectScalarWhereInput
    data: XOR<ClassSubjectUpdateManyMutationInput, ClassSubjectUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ClassSubjectScalarWhereInput = {
    AND?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
    OR?: ClassSubjectScalarWhereInput[]
    NOT?: ClassSubjectScalarWhereInput | ClassSubjectScalarWhereInput[]
    id?: StringFilter<"ClassSubject"> | string
    classId?: StringFilter<"ClassSubject"> | string
    subjectId?: StringFilter<"ClassSubject"> | string
    staffProfileId?: StringFilter<"ClassSubject"> | string
    schoolId?: StringFilter<"ClassSubject"> | string
    schedule?: JsonFilter<"ClassSubject">
    syllabus?: JsonNullableFilter<"ClassSubject">
    metadata?: JsonNullableFilter<"ClassSubject">
    createdAt?: DateTimeFilter<"ClassSubject"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSubject"> | Date | string
    academicYear?: StringFilter<"ClassSubject"> | string
    term?: StringFilter<"ClassSubject"> | string
    maxStudents?: IntNullableFilter<"ClassSubject"> | number | null
    currentEnrollment?: IntFilter<"ClassSubject"> | number
  }

  export type ClassUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutSchoolInput, ClassUncheckedUpdateWithoutSchoolInput>
    create: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutSchoolInput, ClassUncheckedUpdateWithoutSchoolInput>
  }

  export type ClassUpdateManyWithWhereWithoutSchoolInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    grade?: StringFilter<"Class"> | string
    section?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringFilter<"Class"> | string
    capacity?: IntFilter<"Class"> | number
    schedule?: JsonFilter<"Class">
    schoolId?: StringFilter<"Class"> | string
    metadata?: JsonNullableFilter<"Class">
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updatedAt?: DateTimeFilter<"Class"> | Date | string
    classMasterId?: StringNullableFilter<"Class"> | string | null
    classMasterHistory?: JsonNullableListFilter<"Class">
  }

  export type CommunicationGroupUpsertWithWhereUniqueWithoutSchoolInput = {
    where: CommunicationGroupWhereUniqueInput
    update: XOR<CommunicationGroupUpdateWithoutSchoolInput, CommunicationGroupUncheckedUpdateWithoutSchoolInput>
    create: XOR<CommunicationGroupCreateWithoutSchoolInput, CommunicationGroupUncheckedCreateWithoutSchoolInput>
  }

  export type CommunicationGroupUpdateWithWhereUniqueWithoutSchoolInput = {
    where: CommunicationGroupWhereUniqueInput
    data: XOR<CommunicationGroupUpdateWithoutSchoolInput, CommunicationGroupUncheckedUpdateWithoutSchoolInput>
  }

  export type CommunicationGroupUpdateManyWithWhereWithoutSchoolInput = {
    where: CommunicationGroupScalarWhereInput
    data: XOR<CommunicationGroupUpdateManyMutationInput, CommunicationGroupUncheckedUpdateManyWithoutSchoolInput>
  }

  export type CommunicationGroupScalarWhereInput = {
    AND?: CommunicationGroupScalarWhereInput | CommunicationGroupScalarWhereInput[]
    OR?: CommunicationGroupScalarWhereInput[]
    NOT?: CommunicationGroupScalarWhereInput | CommunicationGroupScalarWhereInput[]
    id?: StringFilter<"CommunicationGroup"> | string
    schoolId?: StringFilter<"CommunicationGroup"> | string
    name?: StringFilter<"CommunicationGroup"> | string
    type?: StringFilter<"CommunicationGroup"> | string
    filters?: JsonNullableFilter<"CommunicationGroup">
    metadata?: JsonNullableFilter<"CommunicationGroup">
    createdAt?: DateTimeFilter<"CommunicationGroup"> | Date | string
    updatedAt?: DateTimeFilter<"CommunicationGroup"> | Date | string
  }

  export type SchoolRoleUpsertWithWhereUniqueWithoutSchoolInput = {
    where: SchoolRoleWhereUniqueInput
    update: XOR<SchoolRoleUpdateWithoutSchoolInput, SchoolRoleUncheckedUpdateWithoutSchoolInput>
    create: XOR<SchoolRoleCreateWithoutSchoolInput, SchoolRoleUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolRoleUpdateWithWhereUniqueWithoutSchoolInput = {
    where: SchoolRoleWhereUniqueInput
    data: XOR<SchoolRoleUpdateWithoutSchoolInput, SchoolRoleUncheckedUpdateWithoutSchoolInput>
  }

  export type SchoolRoleUpdateManyWithWhereWithoutSchoolInput = {
    where: SchoolRoleScalarWhereInput
    data: XOR<SchoolRoleUpdateManyMutationInput, SchoolRoleUncheckedUpdateManyWithoutSchoolInput>
  }

  export type SchoolRoleScalarWhereInput = {
    AND?: SchoolRoleScalarWhereInput | SchoolRoleScalarWhereInput[]
    OR?: SchoolRoleScalarWhereInput[]
    NOT?: SchoolRoleScalarWhereInput | SchoolRoleScalarWhereInput[]
    id?: StringFilter<"SchoolRole"> | string
    schoolId?: StringFilter<"SchoolRole"> | string
    userId?: StringFilter<"SchoolRole"> | string
    role?: EnumRoleFilter<"SchoolRole"> | $Enums.Role
    permissions?: StringNullableListFilter<"SchoolRole">
    communicationPermissions?: StringNullableListFilter<"SchoolRole">
    assignedBy?: StringFilter<"SchoolRole"> | string
    createdAt?: DateTimeFilter<"SchoolRole"> | Date | string
    updatedAt?: DateTimeFilter<"SchoolRole"> | Date | string
  }

  export type StaffProfileCreateWithoutAssignmentsInput = {
    id?: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    profile: ProfileCreateNestedOneWithoutStaffProfileInput
    subjects?: SubjectAssignmentCreateNestedManyWithoutStaffProfileInput
    grades?: GradeCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    profileId: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    subjects?: SubjectAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileCreateOrConnectWithoutAssignmentsInput = {
    where: StaffProfileWhereUniqueInput
    create: XOR<StaffProfileCreateWithoutAssignmentsInput, StaffProfileUncheckedCreateWithoutAssignmentsInput>
  }

  export type SchoolCreateWithoutStaffAssignmentsInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    reportCards?: ReportCardCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutStaffAssignmentsInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupUncheckedCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutStaffAssignmentsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStaffAssignmentsInput, SchoolUncheckedCreateWithoutStaffAssignmentsInput>
  }

  export type StaffProfileUpsertWithoutAssignmentsInput = {
    update: XOR<StaffProfileUpdateWithoutAssignmentsInput, StaffProfileUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<StaffProfileCreateWithoutAssignmentsInput, StaffProfileUncheckedCreateWithoutAssignmentsInput>
    where?: StaffProfileWhereInput
  }

  export type StaffProfileUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: StaffProfileWhereInput
    data: XOR<StaffProfileUpdateWithoutAssignmentsInput, StaffProfileUncheckedUpdateWithoutAssignmentsInput>
  }

  export type StaffProfileUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    profile?: ProfileUpdateOneRequiredWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutStaffProfileNestedInput
  }

  export type StaffProfileUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    subjects?: SubjectAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutStaffProfileNestedInput
  }

  export type SchoolUpsertWithoutStaffAssignmentsInput = {
    update: XOR<SchoolUpdateWithoutStaffAssignmentsInput, SchoolUncheckedUpdateWithoutStaffAssignmentsInput>
    create: XOR<SchoolCreateWithoutStaffAssignmentsInput, SchoolUncheckedCreateWithoutStaffAssignmentsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStaffAssignmentsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStaffAssignmentsInput, SchoolUncheckedUpdateWithoutStaffAssignmentsInput>
  }

  export type SchoolUpdateWithoutStaffAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    reportCards?: ReportCardUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutStaffAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    reportCards?: ReportCardUncheckedUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUncheckedUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type ParentProfileCreateWithoutChildrenInput = {
    id?: string
    relationship: string
    preferredLanguage?: string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutParentProfileInput
  }

  export type ParentProfileUncheckedCreateWithoutChildrenInput = {
    id?: string
    profileId: string
    relationship: string
    preferredLanguage?: string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentProfileCreateOrConnectWithoutChildrenInput = {
    where: ParentProfileWhereUniqueInput
    create: XOR<ParentProfileCreateWithoutChildrenInput, ParentProfileUncheckedCreateWithoutChildrenInput>
  }

  export type StudentProfileCreateWithoutGuardiansInput = {
    id?: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    profile: ProfileCreateNestedOneWithoutStudentProfileInput
    classes?: ClassStudentCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardCreateNestedManyWithoutStudentProfileInput
    grades?: GradeCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileUncheckedCreateWithoutGuardiansInput = {
    id?: string
    profileId: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceUncheckedCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutStudentProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileCreateOrConnectWithoutGuardiansInput = {
    where: StudentProfileWhereUniqueInput
    create: XOR<StudentProfileCreateWithoutGuardiansInput, StudentProfileUncheckedCreateWithoutGuardiansInput>
  }

  export type ParentProfileUpsertWithoutChildrenInput = {
    update: XOR<ParentProfileUpdateWithoutChildrenInput, ParentProfileUncheckedUpdateWithoutChildrenInput>
    create: XOR<ParentProfileCreateWithoutChildrenInput, ParentProfileUncheckedCreateWithoutChildrenInput>
    where?: ParentProfileWhereInput
  }

  export type ParentProfileUpdateToOneWithWhereWithoutChildrenInput = {
    where?: ParentProfileWhereInput
    data: XOR<ParentProfileUpdateWithoutChildrenInput, ParentProfileUncheckedUpdateWithoutChildrenInput>
  }

  export type ParentProfileUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutParentProfileNestedInput
  }

  export type ParentProfileUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentProfileUpsertWithoutGuardiansInput = {
    update: XOR<StudentProfileUpdateWithoutGuardiansInput, StudentProfileUncheckedUpdateWithoutGuardiansInput>
    create: XOR<StudentProfileCreateWithoutGuardiansInput, StudentProfileUncheckedCreateWithoutGuardiansInput>
    where?: StudentProfileWhereInput
  }

  export type StudentProfileUpdateToOneWithWhereWithoutGuardiansInput = {
    where?: StudentProfileWhereInput
    data: XOR<StudentProfileUpdateWithoutGuardiansInput, StudentProfileUncheckedUpdateWithoutGuardiansInput>
  }

  export type StudentProfileUpdateWithoutGuardiansInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneRequiredWithoutStudentProfileNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileUncheckedUpdateWithoutGuardiansInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUncheckedUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentProfileNestedInput
  }

  export type ClassCreateWithoutClassSubjectsInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    school: SchoolCreateNestedOneWithoutClassesInput
    students?: ClassStudentCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutClassSubjectsInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    schoolId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    students?: ClassStudentUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutClassSubjectsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutClassSubjectsInput, ClassUncheckedCreateWithoutClassSubjectsInput>
  }

  export type SubjectCreateWithoutClassSubjectsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    gradeLevel?: SubjectCreategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    credits?: number | null
    prerequisites?: SubjectCreateprerequisitesInput | string[]
    corequisites?: SubjectCreatecorequisitesInput | string[]
    learningOutcomes?: SubjectCreatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    assignments?: SubjectAssignmentCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutClassSubjectsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    gradeLevel?: SubjectCreategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    credits?: number | null
    prerequisites?: SubjectCreateprerequisitesInput | string[]
    corequisites?: SubjectCreatecorequisitesInput | string[]
    learningOutcomes?: SubjectCreatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    assignments?: SubjectAssignmentUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutClassSubjectsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutClassSubjectsInput, SubjectUncheckedCreateWithoutClassSubjectsInput>
  }

  export type StaffProfileCreateWithoutClassSubjectsInput = {
    id?: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    profile: ProfileCreateNestedOneWithoutStaffProfileInput
    assignments?: StaffAssignmentCreateNestedManyWithoutStaffProfileInput
    subjects?: SubjectAssignmentCreateNestedManyWithoutStaffProfileInput
    grades?: GradeCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileUncheckedCreateWithoutClassSubjectsInput = {
    id?: string
    profileId: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    subjects?: SubjectAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileCreateOrConnectWithoutClassSubjectsInput = {
    where: StaffProfileWhereUniqueInput
    create: XOR<StaffProfileCreateWithoutClassSubjectsInput, StaffProfileUncheckedCreateWithoutClassSubjectsInput>
  }

  export type SchoolCreateWithoutClassSubjectsInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutClassSubjectsInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupUncheckedCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutClassSubjectsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutClassSubjectsInput, SchoolUncheckedCreateWithoutClassSubjectsInput>
  }

  export type ClassUpsertWithoutClassSubjectsInput = {
    update: XOR<ClassUpdateWithoutClassSubjectsInput, ClassUncheckedUpdateWithoutClassSubjectsInput>
    create: XOR<ClassCreateWithoutClassSubjectsInput, ClassUncheckedCreateWithoutClassSubjectsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutClassSubjectsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutClassSubjectsInput, ClassUncheckedUpdateWithoutClassSubjectsInput>
  }

  export type ClassUpdateWithoutClassSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    students?: ClassStudentUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutClassSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    schoolId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    students?: ClassStudentUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SubjectUpsertWithoutClassSubjectsInput = {
    update: XOR<SubjectUpdateWithoutClassSubjectsInput, SubjectUncheckedUpdateWithoutClassSubjectsInput>
    create: XOR<SubjectCreateWithoutClassSubjectsInput, SubjectUncheckedCreateWithoutClassSubjectsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutClassSubjectsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutClassSubjectsInput, SubjectUncheckedUpdateWithoutClassSubjectsInput>
  }

  export type SubjectUpdateWithoutClassSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    gradeLevel?: SubjectUpdategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: NullableFloatFieldUpdateOperationsInput | number | null
    prerequisites?: SubjectUpdateprerequisitesInput | string[]
    corequisites?: SubjectUpdatecorequisitesInput | string[]
    learningOutcomes?: SubjectUpdatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    assignments?: SubjectAssignmentUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutClassSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    gradeLevel?: SubjectUpdategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: NullableFloatFieldUpdateOperationsInput | number | null
    prerequisites?: SubjectUpdateprerequisitesInput | string[]
    corequisites?: SubjectUpdatecorequisitesInput | string[]
    learningOutcomes?: SubjectUpdatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    assignments?: SubjectAssignmentUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type StaffProfileUpsertWithoutClassSubjectsInput = {
    update: XOR<StaffProfileUpdateWithoutClassSubjectsInput, StaffProfileUncheckedUpdateWithoutClassSubjectsInput>
    create: XOR<StaffProfileCreateWithoutClassSubjectsInput, StaffProfileUncheckedCreateWithoutClassSubjectsInput>
    where?: StaffProfileWhereInput
  }

  export type StaffProfileUpdateToOneWithWhereWithoutClassSubjectsInput = {
    where?: StaffProfileWhereInput
    data: XOR<StaffProfileUpdateWithoutClassSubjectsInput, StaffProfileUncheckedUpdateWithoutClassSubjectsInput>
  }

  export type StaffProfileUpdateWithoutClassSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    profile?: ProfileUpdateOneRequiredWithoutStaffProfileNestedInput
    assignments?: StaffAssignmentUpdateManyWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUpdateManyWithoutStaffProfileNestedInput
  }

  export type StaffProfileUncheckedUpdateWithoutClassSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStaffProfileNestedInput
  }

  export type SchoolUpsertWithoutClassSubjectsInput = {
    update: XOR<SchoolUpdateWithoutClassSubjectsInput, SchoolUncheckedUpdateWithoutClassSubjectsInput>
    create: XOR<SchoolCreateWithoutClassSubjectsInput, SchoolUncheckedCreateWithoutClassSubjectsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutClassSubjectsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutClassSubjectsInput, SchoolUncheckedUpdateWithoutClassSubjectsInput>
  }

  export type SchoolUpdateWithoutClassSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutClassSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUncheckedUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateWithoutClassesInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutClassesInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupUncheckedCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutClassesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
  }

  export type ClassSubjectCreateWithoutClassInput = {
    id?: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
    subject: SubjectCreateNestedOneWithoutClassSubjectsInput
    staffProfile: StaffProfileCreateNestedOneWithoutClassSubjectsInput
    school: SchoolCreateNestedOneWithoutClassSubjectsInput
  }

  export type ClassSubjectUncheckedCreateWithoutClassInput = {
    id?: string
    subjectId: string
    staffProfileId: string
    schoolId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type ClassSubjectCreateOrConnectWithoutClassInput = {
    where: ClassSubjectWhereUniqueInput
    create: XOR<ClassSubjectCreateWithoutClassInput, ClassSubjectUncheckedCreateWithoutClassInput>
  }

  export type ClassSubjectCreateManyClassInputEnvelope = {
    data: ClassSubjectCreateManyClassInput | ClassSubjectCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type ClassStudentCreateWithoutClassInput = {
    id?: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    studentProfile: StudentProfileCreateNestedOneWithoutClassesInput
  }

  export type ClassStudentUncheckedCreateWithoutClassInput = {
    id?: string
    studentProfileId: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassStudentCreateOrConnectWithoutClassInput = {
    where: ClassStudentWhereUniqueInput
    create: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput>
  }

  export type ClassStudentCreateManyClassInputEnvelope = {
    data: ClassStudentCreateManyClassInput | ClassStudentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceCreateWithoutClassInput = {
    id?: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
    studentProfile: StudentProfileCreateNestedOneWithoutAttendanceRecordsInput
  }

  export type AttendanceUncheckedCreateWithoutClassInput = {
    id?: string
    studentProfileId: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
  }

  export type AttendanceCreateOrConnectWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput>
  }

  export type AttendanceCreateManyClassInputEnvelope = {
    data: AttendanceCreateManyClassInput | AttendanceCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithoutClassesInput = {
    update: XOR<SchoolUpdateWithoutClassesInput, SchoolUncheckedUpdateWithoutClassesInput>
    create: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutClassesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutClassesInput, SchoolUncheckedUpdateWithoutClassesInput>
  }

  export type SchoolUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUncheckedUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type ClassSubjectUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassSubjectWhereUniqueInput
    update: XOR<ClassSubjectUpdateWithoutClassInput, ClassSubjectUncheckedUpdateWithoutClassInput>
    create: XOR<ClassSubjectCreateWithoutClassInput, ClassSubjectUncheckedCreateWithoutClassInput>
  }

  export type ClassSubjectUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassSubjectWhereUniqueInput
    data: XOR<ClassSubjectUpdateWithoutClassInput, ClassSubjectUncheckedUpdateWithoutClassInput>
  }

  export type ClassSubjectUpdateManyWithWhereWithoutClassInput = {
    where: ClassSubjectScalarWhereInput
    data: XOR<ClassSubjectUpdateManyMutationInput, ClassSubjectUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassStudentUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassStudentWhereUniqueInput
    update: XOR<ClassStudentUpdateWithoutClassInput, ClassStudentUncheckedUpdateWithoutClassInput>
    create: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput>
  }

  export type ClassStudentUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassStudentWhereUniqueInput
    data: XOR<ClassStudentUpdateWithoutClassInput, ClassStudentUncheckedUpdateWithoutClassInput>
  }

  export type ClassStudentUpdateManyWithWhereWithoutClassInput = {
    where: ClassStudentScalarWhereInput
    data: XOR<ClassStudentUpdateManyMutationInput, ClassStudentUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassStudentScalarWhereInput = {
    AND?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
    OR?: ClassStudentScalarWhereInput[]
    NOT?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
    id?: StringFilter<"ClassStudent"> | string
    classId?: StringFilter<"ClassStudent"> | string
    studentProfileId?: StringFilter<"ClassStudent"> | string
    enrollmentDate?: DateTimeFilter<"ClassStudent"> | Date | string
    status?: StringFilter<"ClassStudent"> | string
    metadata?: JsonNullableFilter<"ClassStudent">
    createdAt?: DateTimeFilter<"ClassStudent"> | Date | string
    updatedAt?: DateTimeFilter<"ClassStudent"> | Date | string
  }

  export type AttendanceUpsertWithWhereUniqueWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutClassInput, AttendanceUncheckedUpdateWithoutClassInput>
    create: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutClassInput, AttendanceUncheckedUpdateWithoutClassInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutClassInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutClassInput>
  }

  export type AttendanceScalarWhereInput = {
    AND?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    OR?: AttendanceScalarWhereInput[]
    NOT?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    id?: StringFilter<"Attendance"> | string
    studentProfileId?: StringFilter<"Attendance"> | string
    date?: DateTimeFilter<"Attendance"> | Date | string
    status?: StringFilter<"Attendance"> | string
    timeIn?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    timeOut?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    reason?: StringNullableFilter<"Attendance"> | string | null
    isExcused?: BoolFilter<"Attendance"> | boolean
    notes?: StringNullableFilter<"Attendance"> | string | null
    metadata?: JsonNullableFilter<"Attendance">
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    updatedAt?: DateTimeFilter<"Attendance"> | Date | string
    term?: StringFilter<"Attendance"> | string
    academicYear?: StringFilter<"Attendance"> | string
    verifiedBy?: StringNullableFilter<"Attendance"> | string | null
    classMasterId?: StringFilter<"Attendance"> | string
    classId?: StringFilter<"Attendance"> | string
    recordedBy?: StringFilter<"Attendance"> | string
    modifiedBy?: StringNullableFilter<"Attendance"> | string | null
    modifiedAt?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    verificationNotes?: StringNullableFilter<"Attendance"> | string | null
  }

  export type ClassCreateWithoutStudentsInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    school: SchoolCreateNestedOneWithoutClassesInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    schoolId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type StudentProfileCreateWithoutClassesInput = {
    id?: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    profile: ProfileCreateNestedOneWithoutStudentProfileInput
    guardians?: ParentStudentRelationCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardCreateNestedManyWithoutStudentProfileInput
    grades?: GradeCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileUncheckedCreateWithoutClassesInput = {
    id?: string
    profileId: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    guardians?: ParentStudentRelationUncheckedCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceUncheckedCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutStudentProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileCreateOrConnectWithoutClassesInput = {
    where: StudentProfileWhereUniqueInput
    create: XOR<StudentProfileCreateWithoutClassesInput, StudentProfileUncheckedCreateWithoutClassesInput>
  }

  export type ClassUpsertWithoutStudentsInput = {
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    schoolId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentProfileUpsertWithoutClassesInput = {
    update: XOR<StudentProfileUpdateWithoutClassesInput, StudentProfileUncheckedUpdateWithoutClassesInput>
    create: XOR<StudentProfileCreateWithoutClassesInput, StudentProfileUncheckedCreateWithoutClassesInput>
    where?: StudentProfileWhereInput
  }

  export type StudentProfileUpdateToOneWithWhereWithoutClassesInput = {
    where?: StudentProfileWhereInput
    data: XOR<StudentProfileUpdateWithoutClassesInput, StudentProfileUncheckedUpdateWithoutClassesInput>
  }

  export type StudentProfileUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneRequiredWithoutStudentProfileNestedInput
    guardians?: ParentStudentRelationUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guardians?: ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUncheckedUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileCreateWithoutReportCardsInput = {
    id?: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    profile: ProfileCreateNestedOneWithoutStudentProfileInput
    guardians?: ParentStudentRelationCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceCreateNestedManyWithoutStudentProfileInput
    grades?: GradeCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileUncheckedCreateWithoutReportCardsInput = {
    id?: string
    profileId: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    guardians?: ParentStudentRelationUncheckedCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceUncheckedCreateNestedManyWithoutStudentProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileCreateOrConnectWithoutReportCardsInput = {
    where: StudentProfileWhereUniqueInput
    create: XOR<StudentProfileCreateWithoutReportCardsInput, StudentProfileUncheckedCreateWithoutReportCardsInput>
  }

  export type SchoolCreateWithoutReportCardsInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutReportCardsInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupUncheckedCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutReportCardsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutReportCardsInput, SchoolUncheckedCreateWithoutReportCardsInput>
  }

  export type GradeCreateWithoutReportCardInput = {
    id?: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
    studentProfile: StudentProfileCreateNestedOneWithoutGradesInput
    staffProfile: StaffProfileCreateNestedOneWithoutGradesInput
  }

  export type GradeUncheckedCreateWithoutReportCardInput = {
    id?: string
    studentProfileId: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    staffProfileId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
  }

  export type GradeCreateOrConnectWithoutReportCardInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutReportCardInput, GradeUncheckedCreateWithoutReportCardInput>
  }

  export type GradeCreateManyReportCardInputEnvelope = {
    data: GradeCreateManyReportCardInput | GradeCreateManyReportCardInput[]
    skipDuplicates?: boolean
  }

  export type StudentProfileUpsertWithoutReportCardsInput = {
    update: XOR<StudentProfileUpdateWithoutReportCardsInput, StudentProfileUncheckedUpdateWithoutReportCardsInput>
    create: XOR<StudentProfileCreateWithoutReportCardsInput, StudentProfileUncheckedCreateWithoutReportCardsInput>
    where?: StudentProfileWhereInput
  }

  export type StudentProfileUpdateToOneWithWhereWithoutReportCardsInput = {
    where?: StudentProfileWhereInput
    data: XOR<StudentProfileUpdateWithoutReportCardsInput, StudentProfileUncheckedUpdateWithoutReportCardsInput>
  }

  export type StudentProfileUpdateWithoutReportCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneRequiredWithoutStudentProfileNestedInput
    guardians?: ParentStudentRelationUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileUncheckedUpdateWithoutReportCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guardians?: ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUncheckedUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentProfileNestedInput
  }

  export type SchoolUpsertWithoutReportCardsInput = {
    update: XOR<SchoolUpdateWithoutReportCardsInput, SchoolUncheckedUpdateWithoutReportCardsInput>
    create: XOR<SchoolCreateWithoutReportCardsInput, SchoolUncheckedCreateWithoutReportCardsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutReportCardsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutReportCardsInput, SchoolUncheckedUpdateWithoutReportCardsInput>
  }

  export type SchoolUpdateWithoutReportCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutReportCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUncheckedUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type GradeUpsertWithWhereUniqueWithoutReportCardInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutReportCardInput, GradeUncheckedUpdateWithoutReportCardInput>
    create: XOR<GradeCreateWithoutReportCardInput, GradeUncheckedCreateWithoutReportCardInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutReportCardInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutReportCardInput, GradeUncheckedUpdateWithoutReportCardInput>
  }

  export type GradeUpdateManyWithWhereWithoutReportCardInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutReportCardInput>
  }

  export type GradeScalarWhereInput = {
    AND?: GradeScalarWhereInput | GradeScalarWhereInput[]
    OR?: GradeScalarWhereInput[]
    NOT?: GradeScalarWhereInput | GradeScalarWhereInput[]
    id?: StringFilter<"Grade"> | string
    studentProfileId?: StringFilter<"Grade"> | string
    reportCardId?: StringFilter<"Grade"> | string
    subjectId?: StringFilter<"Grade"> | string
    teacherId?: StringFilter<"Grade"> | string
    grade?: FloatFilter<"Grade"> | number
    comments?: StringNullableFilter<"Grade"> | string | null
    assessmentType?: StringFilter<"Grade"> | string
    assessmentDate?: DateTimeFilter<"Grade"> | Date | string
    status?: EnumGradeStatusFilter<"Grade"> | $Enums.GradeStatus
    staffProfileId?: StringFilter<"Grade"> | string
    metadata?: JsonNullableFilter<"Grade">
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
    term?: StringFilter<"Grade"> | string
    academicYear?: StringFilter<"Grade"> | string
    weightage?: FloatNullableFilter<"Grade"> | number | null
  }

  export type StudentProfileCreateWithoutGradesInput = {
    id?: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    profile: ProfileCreateNestedOneWithoutStudentProfileInput
    guardians?: ParentStudentRelationCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileUncheckedCreateWithoutGradesInput = {
    id?: string
    profileId: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    guardians?: ParentStudentRelationUncheckedCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentProfileInput
    attendanceRecords?: AttendanceUncheckedCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileCreateOrConnectWithoutGradesInput = {
    where: StudentProfileWhereUniqueInput
    create: XOR<StudentProfileCreateWithoutGradesInput, StudentProfileUncheckedCreateWithoutGradesInput>
  }

  export type ReportCardCreateWithoutGradesInput = {
    id?: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    studentProfile: StudentProfileCreateNestedOneWithoutReportCardsInput
    school: SchoolCreateNestedOneWithoutReportCardsInput
  }

  export type ReportCardUncheckedCreateWithoutGradesInput = {
    id?: string
    studentProfileId: string
    schoolId: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCardCreateOrConnectWithoutGradesInput = {
    where: ReportCardWhereUniqueInput
    create: XOR<ReportCardCreateWithoutGradesInput, ReportCardUncheckedCreateWithoutGradesInput>
  }

  export type StaffProfileCreateWithoutGradesInput = {
    id?: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    profile: ProfileCreateNestedOneWithoutStaffProfileInput
    assignments?: StaffAssignmentCreateNestedManyWithoutStaffProfileInput
    subjects?: SubjectAssignmentCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileUncheckedCreateWithoutGradesInput = {
    id?: string
    profileId: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    subjects?: SubjectAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileCreateOrConnectWithoutGradesInput = {
    where: StaffProfileWhereUniqueInput
    create: XOR<StaffProfileCreateWithoutGradesInput, StaffProfileUncheckedCreateWithoutGradesInput>
  }

  export type StudentProfileUpsertWithoutGradesInput = {
    update: XOR<StudentProfileUpdateWithoutGradesInput, StudentProfileUncheckedUpdateWithoutGradesInput>
    create: XOR<StudentProfileCreateWithoutGradesInput, StudentProfileUncheckedCreateWithoutGradesInput>
    where?: StudentProfileWhereInput
  }

  export type StudentProfileUpdateToOneWithWhereWithoutGradesInput = {
    where?: StudentProfileWhereInput
    data: XOR<StudentProfileUpdateWithoutGradesInput, StudentProfileUncheckedUpdateWithoutGradesInput>
  }

  export type StudentProfileUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneRequiredWithoutStudentProfileNestedInput
    guardians?: ParentStudentRelationUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileUncheckedUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guardians?: ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentProfileNestedInput
    attendanceRecords?: AttendanceUncheckedUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutStudentProfileNestedInput
  }

  export type ReportCardUpsertWithoutGradesInput = {
    update: XOR<ReportCardUpdateWithoutGradesInput, ReportCardUncheckedUpdateWithoutGradesInput>
    create: XOR<ReportCardCreateWithoutGradesInput, ReportCardUncheckedCreateWithoutGradesInput>
    where?: ReportCardWhereInput
  }

  export type ReportCardUpdateToOneWithWhereWithoutGradesInput = {
    where?: ReportCardWhereInput
    data: XOR<ReportCardUpdateWithoutGradesInput, ReportCardUncheckedUpdateWithoutGradesInput>
  }

  export type ReportCardUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentProfile?: StudentProfileUpdateOneRequiredWithoutReportCardsNestedInput
    school?: SchoolUpdateOneRequiredWithoutReportCardsNestedInput
  }

  export type ReportCardUncheckedUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffProfileUpsertWithoutGradesInput = {
    update: XOR<StaffProfileUpdateWithoutGradesInput, StaffProfileUncheckedUpdateWithoutGradesInput>
    create: XOR<StaffProfileCreateWithoutGradesInput, StaffProfileUncheckedCreateWithoutGradesInput>
    where?: StaffProfileWhereInput
  }

  export type StaffProfileUpdateToOneWithWhereWithoutGradesInput = {
    where?: StaffProfileWhereInput
    data: XOR<StaffProfileUpdateWithoutGradesInput, StaffProfileUncheckedUpdateWithoutGradesInput>
  }

  export type StaffProfileUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    profile?: ProfileUpdateOneRequiredWithoutStaffProfileNestedInput
    assignments?: StaffAssignmentUpdateManyWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutStaffProfileNestedInput
  }

  export type StaffProfileUncheckedUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    subjects?: SubjectAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutStaffProfileNestedInput
  }

  export type ProfileCreateWithoutStudentProfileInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProfileInput
    professionalProfile?: ProfessionalProfileCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutStudentProfileInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileUncheckedCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutStudentProfileInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutStudentProfileInput, ProfileUncheckedCreateWithoutStudentProfileInput>
  }

  export type ParentStudentRelationCreateWithoutStudentProfileInput = {
    id?: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parentProfile: ParentProfileCreateNestedOneWithoutChildrenInput
  }

  export type ParentStudentRelationUncheckedCreateWithoutStudentProfileInput = {
    id?: string
    parentProfileId: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentRelationCreateOrConnectWithoutStudentProfileInput = {
    where: ParentStudentRelationWhereUniqueInput
    create: XOR<ParentStudentRelationCreateWithoutStudentProfileInput, ParentStudentRelationUncheckedCreateWithoutStudentProfileInput>
  }

  export type ParentStudentRelationCreateManyStudentProfileInputEnvelope = {
    data: ParentStudentRelationCreateManyStudentProfileInput | ParentStudentRelationCreateManyStudentProfileInput[]
    skipDuplicates?: boolean
  }

  export type ClassStudentCreateWithoutStudentProfileInput = {
    id?: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutStudentsInput
  }

  export type ClassStudentUncheckedCreateWithoutStudentProfileInput = {
    id?: string
    classId: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassStudentCreateOrConnectWithoutStudentProfileInput = {
    where: ClassStudentWhereUniqueInput
    create: XOR<ClassStudentCreateWithoutStudentProfileInput, ClassStudentUncheckedCreateWithoutStudentProfileInput>
  }

  export type ClassStudentCreateManyStudentProfileInputEnvelope = {
    data: ClassStudentCreateManyStudentProfileInput | ClassStudentCreateManyStudentProfileInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceCreateWithoutStudentProfileInput = {
    id?: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
    class: ClassCreateNestedOneWithoutAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutStudentProfileInput = {
    id?: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    classId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
  }

  export type AttendanceCreateOrConnectWithoutStudentProfileInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutStudentProfileInput, AttendanceUncheckedCreateWithoutStudentProfileInput>
  }

  export type AttendanceCreateManyStudentProfileInputEnvelope = {
    data: AttendanceCreateManyStudentProfileInput | AttendanceCreateManyStudentProfileInput[]
    skipDuplicates?: boolean
  }

  export type ReportCardCreateWithoutStudentProfileInput = {
    id?: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutReportCardsInput
    grades?: GradeCreateNestedManyWithoutReportCardInput
  }

  export type ReportCardUncheckedCreateWithoutStudentProfileInput = {
    id?: string
    schoolId: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    grades?: GradeUncheckedCreateNestedManyWithoutReportCardInput
  }

  export type ReportCardCreateOrConnectWithoutStudentProfileInput = {
    where: ReportCardWhereUniqueInput
    create: XOR<ReportCardCreateWithoutStudentProfileInput, ReportCardUncheckedCreateWithoutStudentProfileInput>
  }

  export type ReportCardCreateManyStudentProfileInputEnvelope = {
    data: ReportCardCreateManyStudentProfileInput | ReportCardCreateManyStudentProfileInput[]
    skipDuplicates?: boolean
  }

  export type GradeCreateWithoutStudentProfileInput = {
    id?: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
    reportCard: ReportCardCreateNestedOneWithoutGradesInput
    staffProfile: StaffProfileCreateNestedOneWithoutGradesInput
  }

  export type GradeUncheckedCreateWithoutStudentProfileInput = {
    id?: string
    reportCardId: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    staffProfileId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
  }

  export type GradeCreateOrConnectWithoutStudentProfileInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutStudentProfileInput, GradeUncheckedCreateWithoutStudentProfileInput>
  }

  export type GradeCreateManyStudentProfileInputEnvelope = {
    data: GradeCreateManyStudentProfileInput | GradeCreateManyStudentProfileInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutStudentProfileInput = {
    update: XOR<ProfileUpdateWithoutStudentProfileInput, ProfileUncheckedUpdateWithoutStudentProfileInput>
    create: XOR<ProfileCreateWithoutStudentProfileInput, ProfileUncheckedCreateWithoutStudentProfileInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutStudentProfileInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutStudentProfileInput, ProfileUncheckedUpdateWithoutStudentProfileInput>
  }

  export type ProfileUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    professionalProfile?: ProfessionalProfileUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUncheckedUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ParentStudentRelationUpsertWithWhereUniqueWithoutStudentProfileInput = {
    where: ParentStudentRelationWhereUniqueInput
    update: XOR<ParentStudentRelationUpdateWithoutStudentProfileInput, ParentStudentRelationUncheckedUpdateWithoutStudentProfileInput>
    create: XOR<ParentStudentRelationCreateWithoutStudentProfileInput, ParentStudentRelationUncheckedCreateWithoutStudentProfileInput>
  }

  export type ParentStudentRelationUpdateWithWhereUniqueWithoutStudentProfileInput = {
    where: ParentStudentRelationWhereUniqueInput
    data: XOR<ParentStudentRelationUpdateWithoutStudentProfileInput, ParentStudentRelationUncheckedUpdateWithoutStudentProfileInput>
  }

  export type ParentStudentRelationUpdateManyWithWhereWithoutStudentProfileInput = {
    where: ParentStudentRelationScalarWhereInput
    data: XOR<ParentStudentRelationUpdateManyMutationInput, ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileInput>
  }

  export type ParentStudentRelationScalarWhereInput = {
    AND?: ParentStudentRelationScalarWhereInput | ParentStudentRelationScalarWhereInput[]
    OR?: ParentStudentRelationScalarWhereInput[]
    NOT?: ParentStudentRelationScalarWhereInput | ParentStudentRelationScalarWhereInput[]
    id?: StringFilter<"ParentStudentRelation"> | string
    parentProfileId?: StringFilter<"ParentStudentRelation"> | string
    studentProfileId?: StringFilter<"ParentStudentRelation"> | string
    relationship?: StringFilter<"ParentStudentRelation"> | string
    isPrimary?: BoolFilter<"ParentStudentRelation"> | boolean
    metadata?: JsonNullableFilter<"ParentStudentRelation">
    createdAt?: DateTimeFilter<"ParentStudentRelation"> | Date | string
    updatedAt?: DateTimeFilter<"ParentStudentRelation"> | Date | string
  }

  export type ClassStudentUpsertWithWhereUniqueWithoutStudentProfileInput = {
    where: ClassStudentWhereUniqueInput
    update: XOR<ClassStudentUpdateWithoutStudentProfileInput, ClassStudentUncheckedUpdateWithoutStudentProfileInput>
    create: XOR<ClassStudentCreateWithoutStudentProfileInput, ClassStudentUncheckedCreateWithoutStudentProfileInput>
  }

  export type ClassStudentUpdateWithWhereUniqueWithoutStudentProfileInput = {
    where: ClassStudentWhereUniqueInput
    data: XOR<ClassStudentUpdateWithoutStudentProfileInput, ClassStudentUncheckedUpdateWithoutStudentProfileInput>
  }

  export type ClassStudentUpdateManyWithWhereWithoutStudentProfileInput = {
    where: ClassStudentScalarWhereInput
    data: XOR<ClassStudentUpdateManyMutationInput, ClassStudentUncheckedUpdateManyWithoutStudentProfileInput>
  }

  export type AttendanceUpsertWithWhereUniqueWithoutStudentProfileInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutStudentProfileInput, AttendanceUncheckedUpdateWithoutStudentProfileInput>
    create: XOR<AttendanceCreateWithoutStudentProfileInput, AttendanceUncheckedCreateWithoutStudentProfileInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutStudentProfileInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutStudentProfileInput, AttendanceUncheckedUpdateWithoutStudentProfileInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutStudentProfileInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutStudentProfileInput>
  }

  export type ReportCardUpsertWithWhereUniqueWithoutStudentProfileInput = {
    where: ReportCardWhereUniqueInput
    update: XOR<ReportCardUpdateWithoutStudentProfileInput, ReportCardUncheckedUpdateWithoutStudentProfileInput>
    create: XOR<ReportCardCreateWithoutStudentProfileInput, ReportCardUncheckedCreateWithoutStudentProfileInput>
  }

  export type ReportCardUpdateWithWhereUniqueWithoutStudentProfileInput = {
    where: ReportCardWhereUniqueInput
    data: XOR<ReportCardUpdateWithoutStudentProfileInput, ReportCardUncheckedUpdateWithoutStudentProfileInput>
  }

  export type ReportCardUpdateManyWithWhereWithoutStudentProfileInput = {
    where: ReportCardScalarWhereInput
    data: XOR<ReportCardUpdateManyMutationInput, ReportCardUncheckedUpdateManyWithoutStudentProfileInput>
  }

  export type GradeUpsertWithWhereUniqueWithoutStudentProfileInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutStudentProfileInput, GradeUncheckedUpdateWithoutStudentProfileInput>
    create: XOR<GradeCreateWithoutStudentProfileInput, GradeUncheckedCreateWithoutStudentProfileInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutStudentProfileInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutStudentProfileInput, GradeUncheckedUpdateWithoutStudentProfileInput>
  }

  export type GradeUpdateManyWithWhereWithoutStudentProfileInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutStudentProfileInput>
  }

  export type ProfileCreateWithoutParentProfileInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProfileInput
    professionalProfile?: ProfessionalProfileCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutParentProfileInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileUncheckedCreateNestedOneWithoutProfileInput
    staffProfile?: StaffProfileUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutParentProfileInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutParentProfileInput, ProfileUncheckedCreateWithoutParentProfileInput>
  }

  export type ParentStudentRelationCreateWithoutParentProfileInput = {
    id?: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    studentProfile: StudentProfileCreateNestedOneWithoutGuardiansInput
  }

  export type ParentStudentRelationUncheckedCreateWithoutParentProfileInput = {
    id?: string
    studentProfileId: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentRelationCreateOrConnectWithoutParentProfileInput = {
    where: ParentStudentRelationWhereUniqueInput
    create: XOR<ParentStudentRelationCreateWithoutParentProfileInput, ParentStudentRelationUncheckedCreateWithoutParentProfileInput>
  }

  export type ParentStudentRelationCreateManyParentProfileInputEnvelope = {
    data: ParentStudentRelationCreateManyParentProfileInput | ParentStudentRelationCreateManyParentProfileInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutParentProfileInput = {
    update: XOR<ProfileUpdateWithoutParentProfileInput, ProfileUncheckedUpdateWithoutParentProfileInput>
    create: XOR<ProfileCreateWithoutParentProfileInput, ProfileUncheckedCreateWithoutParentProfileInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutParentProfileInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutParentProfileInput, ProfileUncheckedUpdateWithoutParentProfileInput>
  }

  export type ProfileUpdateWithoutParentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    professionalProfile?: ProfessionalProfileUpdateOneWithoutProfileNestedInput
    studentProfile?: StudentProfileUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutParentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedUpdateOneWithoutProfileNestedInput
    studentProfile?: StudentProfileUncheckedUpdateOneWithoutProfileNestedInput
    staffProfile?: StaffProfileUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ParentStudentRelationUpsertWithWhereUniqueWithoutParentProfileInput = {
    where: ParentStudentRelationWhereUniqueInput
    update: XOR<ParentStudentRelationUpdateWithoutParentProfileInput, ParentStudentRelationUncheckedUpdateWithoutParentProfileInput>
    create: XOR<ParentStudentRelationCreateWithoutParentProfileInput, ParentStudentRelationUncheckedCreateWithoutParentProfileInput>
  }

  export type ParentStudentRelationUpdateWithWhereUniqueWithoutParentProfileInput = {
    where: ParentStudentRelationWhereUniqueInput
    data: XOR<ParentStudentRelationUpdateWithoutParentProfileInput, ParentStudentRelationUncheckedUpdateWithoutParentProfileInput>
  }

  export type ParentStudentRelationUpdateManyWithWhereWithoutParentProfileInput = {
    where: ParentStudentRelationScalarWhereInput
    data: XOR<ParentStudentRelationUpdateManyMutationInput, ParentStudentRelationUncheckedUpdateManyWithoutParentProfileInput>
  }

  export type StudentProfileCreateWithoutAttendanceRecordsInput = {
    id?: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    profile: ProfileCreateNestedOneWithoutStudentProfileInput
    guardians?: ParentStudentRelationCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardCreateNestedManyWithoutStudentProfileInput
    grades?: GradeCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileUncheckedCreateWithoutAttendanceRecordsInput = {
    id?: string
    profileId: string
    admissionNumber: string
    enrollmentDate: Date | string
    currentGrade?: string | null
    previousSchools?: StudentProfileCreatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileCreatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileCreateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileCreateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileCreatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGPA?: number | null
    academicStanding?: string | null
    attendanceRate?: number | null
    lastAttendanceDate?: Date | string | null
    guardians?: ParentStudentRelationUncheckedCreateNestedManyWithoutStudentProfileInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentProfileInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutStudentProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentProfileInput
  }

  export type StudentProfileCreateOrConnectWithoutAttendanceRecordsInput = {
    where: StudentProfileWhereUniqueInput
    create: XOR<StudentProfileCreateWithoutAttendanceRecordsInput, StudentProfileUncheckedCreateWithoutAttendanceRecordsInput>
  }

  export type ClassCreateWithoutAttendanceInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    school: SchoolCreateNestedOneWithoutClassesInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutClassInput
    students?: ClassStudentCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutAttendanceInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    schoolId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutClassInput
    students?: ClassStudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAttendanceInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
  }

  export type StudentProfileUpsertWithoutAttendanceRecordsInput = {
    update: XOR<StudentProfileUpdateWithoutAttendanceRecordsInput, StudentProfileUncheckedUpdateWithoutAttendanceRecordsInput>
    create: XOR<StudentProfileCreateWithoutAttendanceRecordsInput, StudentProfileUncheckedCreateWithoutAttendanceRecordsInput>
    where?: StudentProfileWhereInput
  }

  export type StudentProfileUpdateToOneWithWhereWithoutAttendanceRecordsInput = {
    where?: StudentProfileWhereInput
    data: XOR<StudentProfileUpdateWithoutAttendanceRecordsInput, StudentProfileUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type StudentProfileUpdateWithoutAttendanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneRequiredWithoutStudentProfileNestedInput
    guardians?: ParentStudentRelationUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUpdateManyWithoutStudentProfileNestedInput
  }

  export type StudentProfileUncheckedUpdateWithoutAttendanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGrade?: NullableStringFieldUpdateOperationsInput | string | null
    previousSchools?: StudentProfileUpdatepreviousSchoolsInput | InputJsonValue[]
    learningProgress?: StudentProfileUpdatelearningProgressInput | InputJsonValue[]
    achievements?: StudentProfileUpdateachievementsInput | InputJsonValue[]
    extracurricular?: StudentProfileUpdateextracurricularInput | InputJsonValue[]
    specialNeeds?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    dietaryRestrictions?: StudentProfileUpdatedietaryRestrictionsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGPA?: NullableFloatFieldUpdateOperationsInput | number | null
    academicStanding?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guardians?: ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentProfileNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutStudentProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentProfileNestedInput
  }

  export type ClassUpsertWithoutAttendanceInput = {
    update: XOR<ClassUpdateWithoutAttendanceInput, ClassUncheckedUpdateWithoutAttendanceInput>
    create: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAttendanceInput, ClassUncheckedUpdateWithoutAttendanceInput>
  }

  export type ClassUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutClassNestedInput
    students?: ClassStudentUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    schoolId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutClassNestedInput
    students?: ClassStudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ProfileCreateWithoutStaffProfileInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProfileInput
    professionalProfile?: ProfessionalProfileCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutStaffProfileInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    middleName?: string | null
    dateOfBirth: Date | string
    phoneNumber?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: string | null
    nationality?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: string | null
    occupationType?: $Enums.OccupationType | null
    employer?: string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileCreateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    lastActivityAt?: Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedCreateNestedOneWithoutProfileInput
    studentProfile?: StudentProfileUncheckedCreateNestedOneWithoutProfileInput
    parentProfile?: ParentProfileUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutStaffProfileInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutStaffProfileInput, ProfileUncheckedCreateWithoutStaffProfileInput>
  }

  export type StaffAssignmentCreateWithoutStaffProfileInput = {
    id?: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutStaffAssignmentsInput
  }

  export type StaffAssignmentUncheckedCreateWithoutStaffProfileInput = {
    id?: string
    schoolId: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffAssignmentCreateOrConnectWithoutStaffProfileInput = {
    where: StaffAssignmentWhereUniqueInput
    create: XOR<StaffAssignmentCreateWithoutStaffProfileInput, StaffAssignmentUncheckedCreateWithoutStaffProfileInput>
  }

  export type StaffAssignmentCreateManyStaffProfileInputEnvelope = {
    data: StaffAssignmentCreateManyStaffProfileInput | StaffAssignmentCreateManyStaffProfileInput[]
    skipDuplicates?: boolean
  }

  export type SubjectAssignmentCreateWithoutStaffProfileInput = {
    id?: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
  }

  export type SubjectAssignmentUncheckedCreateWithoutStaffProfileInput = {
    id?: string
    subjectId: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectAssignmentCreateOrConnectWithoutStaffProfileInput = {
    where: SubjectAssignmentWhereUniqueInput
    create: XOR<SubjectAssignmentCreateWithoutStaffProfileInput, SubjectAssignmentUncheckedCreateWithoutStaffProfileInput>
  }

  export type SubjectAssignmentCreateManyStaffProfileInputEnvelope = {
    data: SubjectAssignmentCreateManyStaffProfileInput | SubjectAssignmentCreateManyStaffProfileInput[]
    skipDuplicates?: boolean
  }

  export type GradeCreateWithoutStaffProfileInput = {
    id?: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
    studentProfile: StudentProfileCreateNestedOneWithoutGradesInput
    reportCard: ReportCardCreateNestedOneWithoutGradesInput
  }

  export type GradeUncheckedCreateWithoutStaffProfileInput = {
    id?: string
    studentProfileId: string
    reportCardId: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
  }

  export type GradeCreateOrConnectWithoutStaffProfileInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutStaffProfileInput, GradeUncheckedCreateWithoutStaffProfileInput>
  }

  export type GradeCreateManyStaffProfileInputEnvelope = {
    data: GradeCreateManyStaffProfileInput | GradeCreateManyStaffProfileInput[]
    skipDuplicates?: boolean
  }

  export type ClassSubjectCreateWithoutStaffProfileInput = {
    id?: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
    class: ClassCreateNestedOneWithoutClassSubjectsInput
    subject: SubjectCreateNestedOneWithoutClassSubjectsInput
    school: SchoolCreateNestedOneWithoutClassSubjectsInput
  }

  export type ClassSubjectUncheckedCreateWithoutStaffProfileInput = {
    id?: string
    classId: string
    subjectId: string
    schoolId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type ClassSubjectCreateOrConnectWithoutStaffProfileInput = {
    where: ClassSubjectWhereUniqueInput
    create: XOR<ClassSubjectCreateWithoutStaffProfileInput, ClassSubjectUncheckedCreateWithoutStaffProfileInput>
  }

  export type ClassSubjectCreateManyStaffProfileInputEnvelope = {
    data: ClassSubjectCreateManyStaffProfileInput | ClassSubjectCreateManyStaffProfileInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutStaffProfileInput = {
    update: XOR<ProfileUpdateWithoutStaffProfileInput, ProfileUncheckedUpdateWithoutStaffProfileInput>
    create: XOR<ProfileCreateWithoutStaffProfileInput, ProfileUncheckedCreateWithoutStaffProfileInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutStaffProfileInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutStaffProfileInput, ProfileUncheckedUpdateWithoutStaffProfileInput>
  }

  export type ProfileUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    professionalProfile?: ProfessionalProfileUpdateOneWithoutProfileNestedInput
    studentProfile?: StudentProfileUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    occupationType?: NullableEnumOccupationTypeFieldUpdateOperationsInput | $Enums.OccupationType | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    employerDetails?: NullableJsonNullValueInput | InputJsonValue
    workAddress?: NullableJsonNullValueInput | InputJsonValue
    education?: ProfileUpdateeducationInput | InputJsonValue[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationPreferences?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceInfo?: NullableJsonNullValueInput | InputJsonValue
    professionalProfile?: ProfessionalProfileUncheckedUpdateOneWithoutProfileNestedInput
    studentProfile?: StudentProfileUncheckedUpdateOneWithoutProfileNestedInput
    parentProfile?: ParentProfileUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type StaffAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput = {
    where: StaffAssignmentWhereUniqueInput
    update: XOR<StaffAssignmentUpdateWithoutStaffProfileInput, StaffAssignmentUncheckedUpdateWithoutStaffProfileInput>
    create: XOR<StaffAssignmentCreateWithoutStaffProfileInput, StaffAssignmentUncheckedCreateWithoutStaffProfileInput>
  }

  export type StaffAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput = {
    where: StaffAssignmentWhereUniqueInput
    data: XOR<StaffAssignmentUpdateWithoutStaffProfileInput, StaffAssignmentUncheckedUpdateWithoutStaffProfileInput>
  }

  export type StaffAssignmentUpdateManyWithWhereWithoutStaffProfileInput = {
    where: StaffAssignmentScalarWhereInput
    data: XOR<StaffAssignmentUpdateManyMutationInput, StaffAssignmentUncheckedUpdateManyWithoutStaffProfileInput>
  }

  export type SubjectAssignmentUpsertWithWhereUniqueWithoutStaffProfileInput = {
    where: SubjectAssignmentWhereUniqueInput
    update: XOR<SubjectAssignmentUpdateWithoutStaffProfileInput, SubjectAssignmentUncheckedUpdateWithoutStaffProfileInput>
    create: XOR<SubjectAssignmentCreateWithoutStaffProfileInput, SubjectAssignmentUncheckedCreateWithoutStaffProfileInput>
  }

  export type SubjectAssignmentUpdateWithWhereUniqueWithoutStaffProfileInput = {
    where: SubjectAssignmentWhereUniqueInput
    data: XOR<SubjectAssignmentUpdateWithoutStaffProfileInput, SubjectAssignmentUncheckedUpdateWithoutStaffProfileInput>
  }

  export type SubjectAssignmentUpdateManyWithWhereWithoutStaffProfileInput = {
    where: SubjectAssignmentScalarWhereInput
    data: XOR<SubjectAssignmentUpdateManyMutationInput, SubjectAssignmentUncheckedUpdateManyWithoutStaffProfileInput>
  }

  export type SubjectAssignmentScalarWhereInput = {
    AND?: SubjectAssignmentScalarWhereInput | SubjectAssignmentScalarWhereInput[]
    OR?: SubjectAssignmentScalarWhereInput[]
    NOT?: SubjectAssignmentScalarWhereInput | SubjectAssignmentScalarWhereInput[]
    id?: StringFilter<"SubjectAssignment"> | string
    subjectId?: StringFilter<"SubjectAssignment"> | string
    staffProfileId?: StringFilter<"SubjectAssignment"> | string
    academicYear?: StringFilter<"SubjectAssignment"> | string
    metadata?: JsonNullableFilter<"SubjectAssignment">
    createdAt?: DateTimeFilter<"SubjectAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SubjectAssignment"> | Date | string
  }

  export type GradeUpsertWithWhereUniqueWithoutStaffProfileInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutStaffProfileInput, GradeUncheckedUpdateWithoutStaffProfileInput>
    create: XOR<GradeCreateWithoutStaffProfileInput, GradeUncheckedCreateWithoutStaffProfileInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutStaffProfileInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutStaffProfileInput, GradeUncheckedUpdateWithoutStaffProfileInput>
  }

  export type GradeUpdateManyWithWhereWithoutStaffProfileInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutStaffProfileInput>
  }

  export type ClassSubjectUpsertWithWhereUniqueWithoutStaffProfileInput = {
    where: ClassSubjectWhereUniqueInput
    update: XOR<ClassSubjectUpdateWithoutStaffProfileInput, ClassSubjectUncheckedUpdateWithoutStaffProfileInput>
    create: XOR<ClassSubjectCreateWithoutStaffProfileInput, ClassSubjectUncheckedCreateWithoutStaffProfileInput>
  }

  export type ClassSubjectUpdateWithWhereUniqueWithoutStaffProfileInput = {
    where: ClassSubjectWhereUniqueInput
    data: XOR<ClassSubjectUpdateWithoutStaffProfileInput, ClassSubjectUncheckedUpdateWithoutStaffProfileInput>
  }

  export type ClassSubjectUpdateManyWithWhereWithoutStaffProfileInput = {
    where: ClassSubjectScalarWhereInput
    data: XOR<ClassSubjectUpdateManyMutationInput, ClassSubjectUncheckedUpdateManyWithoutStaffProfileInput>
  }

  export type SubjectAssignmentCreateWithoutSubjectInput = {
    id?: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    staffProfile: StaffProfileCreateNestedOneWithoutSubjectsInput
  }

  export type SubjectAssignmentUncheckedCreateWithoutSubjectInput = {
    id?: string
    staffProfileId: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectAssignmentCreateOrConnectWithoutSubjectInput = {
    where: SubjectAssignmentWhereUniqueInput
    create: XOR<SubjectAssignmentCreateWithoutSubjectInput, SubjectAssignmentUncheckedCreateWithoutSubjectInput>
  }

  export type SubjectAssignmentCreateManySubjectInputEnvelope = {
    data: SubjectAssignmentCreateManySubjectInput | SubjectAssignmentCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type ClassSubjectCreateWithoutSubjectInput = {
    id?: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
    class: ClassCreateNestedOneWithoutClassSubjectsInput
    staffProfile: StaffProfileCreateNestedOneWithoutClassSubjectsInput
    school: SchoolCreateNestedOneWithoutClassSubjectsInput
  }

  export type ClassSubjectUncheckedCreateWithoutSubjectInput = {
    id?: string
    classId: string
    staffProfileId: string
    schoolId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type ClassSubjectCreateOrConnectWithoutSubjectInput = {
    where: ClassSubjectWhereUniqueInput
    create: XOR<ClassSubjectCreateWithoutSubjectInput, ClassSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type ClassSubjectCreateManySubjectInputEnvelope = {
    data: ClassSubjectCreateManySubjectInput | ClassSubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type SubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput = {
    where: SubjectAssignmentWhereUniqueInput
    update: XOR<SubjectAssignmentUpdateWithoutSubjectInput, SubjectAssignmentUncheckedUpdateWithoutSubjectInput>
    create: XOR<SubjectAssignmentCreateWithoutSubjectInput, SubjectAssignmentUncheckedCreateWithoutSubjectInput>
  }

  export type SubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput = {
    where: SubjectAssignmentWhereUniqueInput
    data: XOR<SubjectAssignmentUpdateWithoutSubjectInput, SubjectAssignmentUncheckedUpdateWithoutSubjectInput>
  }

  export type SubjectAssignmentUpdateManyWithWhereWithoutSubjectInput = {
    where: SubjectAssignmentScalarWhereInput
    data: XOR<SubjectAssignmentUpdateManyMutationInput, SubjectAssignmentUncheckedUpdateManyWithoutSubjectInput>
  }

  export type ClassSubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: ClassSubjectWhereUniqueInput
    update: XOR<ClassSubjectUpdateWithoutSubjectInput, ClassSubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<ClassSubjectCreateWithoutSubjectInput, ClassSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type ClassSubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: ClassSubjectWhereUniqueInput
    data: XOR<ClassSubjectUpdateWithoutSubjectInput, ClassSubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type ClassSubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: ClassSubjectScalarWhereInput
    data: XOR<ClassSubjectUpdateManyMutationInput, ClassSubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type SubjectCreateWithoutAssignmentsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    gradeLevel?: SubjectCreategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    credits?: number | null
    prerequisites?: SubjectCreateprerequisitesInput | string[]
    corequisites?: SubjectCreatecorequisitesInput | string[]
    learningOutcomes?: SubjectCreatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    classSubjects?: ClassSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    gradeLevel?: SubjectCreategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    credits?: number | null
    prerequisites?: SubjectCreateprerequisitesInput | string[]
    corequisites?: SubjectCreatecorequisitesInput | string[]
    learningOutcomes?: SubjectCreatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutAssignmentsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
  }

  export type StaffProfileCreateWithoutSubjectsInput = {
    id?: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    profile: ProfileCreateNestedOneWithoutStaffProfileInput
    assignments?: StaffAssignmentCreateNestedManyWithoutStaffProfileInput
    grades?: GradeCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileUncheckedCreateWithoutSubjectsInput = {
    id?: string
    profileId: string
    employeeId: string
    position: string
    department: string
    employmentType: string
    startDate: Date | string
    endDate?: Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileCreateresponsibilitiesInput | string[]
    teachingHours?: number | null
    specializations?: StaffProfileCreatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedCreateNestedManyWithoutStaffProfileInput
    grades?: GradeUncheckedCreateNestedManyWithoutStaffProfileInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutStaffProfileInput
  }

  export type StaffProfileCreateOrConnectWithoutSubjectsInput = {
    where: StaffProfileWhereUniqueInput
    create: XOR<StaffProfileCreateWithoutSubjectsInput, StaffProfileUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectUpsertWithoutAssignmentsInput = {
    update: XOR<SubjectUpdateWithoutAssignmentsInput, SubjectUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutAssignmentsInput, SubjectUncheckedUpdateWithoutAssignmentsInput>
  }

  export type SubjectUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    gradeLevel?: SubjectUpdategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: NullableFloatFieldUpdateOperationsInput | number | null
    prerequisites?: SubjectUpdateprerequisitesInput | string[]
    corequisites?: SubjectUpdatecorequisitesInput | string[]
    learningOutcomes?: SubjectUpdatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    classSubjects?: ClassSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    gradeLevel?: SubjectUpdategradeLevelInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credits?: NullableFloatFieldUpdateOperationsInput | number | null
    prerequisites?: SubjectUpdateprerequisitesInput | string[]
    corequisites?: SubjectUpdatecorequisitesInput | string[]
    learningOutcomes?: SubjectUpdatelearningOutcomesInput | string[]
    assessmentCriteria?: NullableJsonNullValueInput | InputJsonValue
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type StaffProfileUpsertWithoutSubjectsInput = {
    update: XOR<StaffProfileUpdateWithoutSubjectsInput, StaffProfileUncheckedUpdateWithoutSubjectsInput>
    create: XOR<StaffProfileCreateWithoutSubjectsInput, StaffProfileUncheckedCreateWithoutSubjectsInput>
    where?: StaffProfileWhereInput
  }

  export type StaffProfileUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: StaffProfileWhereInput
    data: XOR<StaffProfileUpdateWithoutSubjectsInput, StaffProfileUncheckedUpdateWithoutSubjectsInput>
  }

  export type StaffProfileUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    profile?: ProfileUpdateOneRequiredWithoutStaffProfileNestedInput
    assignments?: StaffAssignmentUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutStaffProfileNestedInput
  }

  export type StaffProfileUncheckedUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: StaffProfileUpdateresponsibilitiesInput | string[]
    teachingHours?: NullableIntFieldUpdateOperationsInput | number | null
    specializations?: StaffProfileUpdatespecializationsInput | string[]
    assignments?: StaffAssignmentUncheckedUpdateManyWithoutStaffProfileNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStaffProfileNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutStaffProfileNestedInput
  }

  export type SchoolCreateWithoutCommunicationGroupsInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutCommunicationGroupsInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    schoolRoles?: SchoolRoleUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutCommunicationGroupsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutCommunicationGroupsInput, SchoolUncheckedCreateWithoutCommunicationGroupsInput>
  }

  export type SchoolUpsertWithoutCommunicationGroupsInput = {
    update: XOR<SchoolUpdateWithoutCommunicationGroupsInput, SchoolUncheckedUpdateWithoutCommunicationGroupsInput>
    create: XOR<SchoolCreateWithoutCommunicationGroupsInput, SchoolUncheckedCreateWithoutCommunicationGroupsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutCommunicationGroupsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutCommunicationGroupsInput, SchoolUncheckedUpdateWithoutCommunicationGroupsInput>
  }

  export type SchoolUpdateWithoutCommunicationGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutCommunicationGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    schoolRoles?: SchoolRoleUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateWithoutSchoolRolesInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutSchoolRolesInput = {
    id?: string
    name: string
    type: string
    registrationNumber: string
    license: JsonNullValueInput | InputJsonValue
    contact: JsonNullValueInput | InputJsonValue
    address: JsonNullValueInput | InputJsonValue
    facilities?: SchoolCreatefacilitiesInput | string[]
    capacity: number
    curriculum?: SchoolCreatecurriculumInput | string[]
    languages?: SchoolCreatelanguagesInput | string[]
    operatingHours: JsonNullValueInput | InputJsonValue
    termDates?: SchoolCreatetermDatesInput | InputJsonValue[]
    verificationStatus?: $Enums.VerificationStatus
    verifiedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    ownershipDetails: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedCreateNestedManyWithoutSchoolInput
    reportCards?: ReportCardUncheckedCreateNestedManyWithoutSchoolInput
    classSubjects?: ClassSubjectUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    communicationGroups?: CommunicationGroupUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutSchoolRolesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutSchoolRolesInput, SchoolUncheckedCreateWithoutSchoolRolesInput>
  }

  export type SchoolUpsertWithoutSchoolRolesInput = {
    update: XOR<SchoolUpdateWithoutSchoolRolesInput, SchoolUncheckedUpdateWithoutSchoolRolesInput>
    create: XOR<SchoolCreateWithoutSchoolRolesInput, SchoolUncheckedCreateWithoutSchoolRolesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutSchoolRolesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutSchoolRolesInput, SchoolUncheckedUpdateWithoutSchoolRolesInput>
  }

  export type SchoolUpdateWithoutSchoolRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutSchoolRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    license?: JsonNullValueInput | InputJsonValue
    contact?: JsonNullValueInput | InputJsonValue
    address?: JsonNullValueInput | InputJsonValue
    facilities?: SchoolUpdatefacilitiesInput | string[]
    capacity?: IntFieldUpdateOperationsInput | number
    curriculum?: SchoolUpdatecurriculumInput | string[]
    languages?: SchoolUpdatelanguagesInput | string[]
    operatingHours?: JsonNullValueInput | InputJsonValue
    termDates?: SchoolUpdatetermDatesInput | InputJsonValue[]
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    communicationSettings?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    ownershipDetails?: JsonNullValueInput | InputJsonValue
    systemApproval?: NullableJsonNullValueInput | InputJsonValue
    staffAssignments?: StaffAssignmentUncheckedUpdateManyWithoutSchoolNestedInput
    reportCards?: ReportCardUncheckedUpdateManyWithoutSchoolNestedInput
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    communicationGroups?: CommunicationGroupUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type FileQuotaCreateWithoutFileInput = {
    id?: string
    totalSize: number
    usedSize: number
    maxSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileQuotaUncheckedCreateWithoutFileInput = {
    id?: string
    totalSize: number
    usedSize: number
    maxSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileQuotaCreateOrConnectWithoutFileInput = {
    where: FileQuotaWhereUniqueInput
    create: XOR<FileQuotaCreateWithoutFileInput, FileQuotaUncheckedCreateWithoutFileInput>
  }

  export type FileQuotaUpsertWithoutFileInput = {
    update: XOR<FileQuotaUpdateWithoutFileInput, FileQuotaUncheckedUpdateWithoutFileInput>
    create: XOR<FileQuotaCreateWithoutFileInput, FileQuotaUncheckedCreateWithoutFileInput>
    where?: FileQuotaWhereInput
  }

  export type FileQuotaUpdateToOneWithWhereWithoutFileInput = {
    where?: FileQuotaWhereInput
    data: XOR<FileQuotaUpdateWithoutFileInput, FileQuotaUncheckedUpdateWithoutFileInput>
  }

  export type FileQuotaUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: IntFieldUpdateOperationsInput | number
    usedSize?: IntFieldUpdateOperationsInput | number
    maxSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileQuotaUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: IntFieldUpdateOperationsInput | number
    usedSize?: IntFieldUpdateOperationsInput | number
    maxSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateWithoutQuotaInput = {
    id?: string
    name: string
    originalName: string
    mimeType: string
    size: number
    url: string
    type: $Enums.FileType
    category: $Enums.FileCategory
    accessLevel?: $Enums.FileAccessLevel
    provider: $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId: string
    ownerType: $Enums.EntityType
    accessibleTo?: FileCreateaccessibleToInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type FileUncheckedCreateWithoutQuotaInput = {
    id?: string
    name: string
    originalName: string
    mimeType: string
    size: number
    url: string
    type: $Enums.FileType
    category: $Enums.FileCategory
    accessLevel?: $Enums.FileAccessLevel
    provider: $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId: string
    ownerType: $Enums.EntityType
    accessibleTo?: FileCreateaccessibleToInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type FileCreateOrConnectWithoutQuotaInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutQuotaInput, FileUncheckedCreateWithoutQuotaInput>
  }

  export type FileUpsertWithoutQuotaInput = {
    update: XOR<FileUpdateWithoutQuotaInput, FileUncheckedUpdateWithoutQuotaInput>
    create: XOR<FileCreateWithoutQuotaInput, FileUncheckedCreateWithoutQuotaInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutQuotaInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutQuotaInput, FileUncheckedUpdateWithoutQuotaInput>
  }

  export type FileUpdateWithoutQuotaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelFieldUpdateOperationsInput | $Enums.FileAccessLevel
    provider?: EnumStorageProviderFieldUpdateOperationsInput | $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId?: StringFieldUpdateOperationsInput | string
    ownerType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    accessibleTo?: FileUpdateaccessibleToInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileUncheckedUpdateWithoutQuotaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    accessLevel?: EnumFileAccessLevelFieldUpdateOperationsInput | $Enums.FileAccessLevel
    provider?: EnumStorageProviderFieldUpdateOperationsInput | $Enums.StorageProvider
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ownerId?: StringFieldUpdateOperationsInput | string
    ownerType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    accessibleTo?: FileUpdateaccessibleToInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KYCDocumentCreateManyUserInput = {
    id?: string
    type: $Enums.DocumentType
    status: $Enums.VerificationStatus
    documentUrls?: KYCDocumentCreatedocumentUrlsInput | string[]
    verifiedAt?: Date | string | null
    metadata: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationHistoryCreateManyVerifierInput = {
    id?: string
    entityId: string
    entityType: $Enums.EntityType
    status: $Enums.VerificationStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KYCDocumentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    documentUrls?: KYCDocumentUpdatedocumentUrlsInput | string[]
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KYCDocumentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    documentUrls?: KYCDocumentUpdatedocumentUrlsInput | string[]
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KYCDocumentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    documentUrls?: KYCDocumentUpdatedocumentUrlsInput | string[]
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationHistoryUpdateWithoutVerifierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationHistoryUncheckedUpdateWithoutVerifierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationHistoryUncheckedUpdateManyWithoutVerifierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    status?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffAssignmentCreateManySchoolInput = {
    id?: string
    staffProfileId: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCardCreateManySchoolInput = {
    id?: string
    studentProfileId: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassSubjectCreateManySchoolInput = {
    id?: string
    classId: string
    subjectId: string
    staffProfileId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type ClassCreateManySchoolInput = {
    id?: string
    name: string
    grade: string
    section?: string | null
    academicYear: string
    capacity: number
    schedule: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    classMasterId?: string | null
    classMasterHistory?: ClassCreateclassMasterHistoryInput | InputJsonValue[]
  }

  export type CommunicationGroupCreateManySchoolInput = {
    id?: string
    name: string
    type: string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolRoleCreateManySchoolInput = {
    id?: string
    userId: string
    role: $Enums.Role
    permissions?: SchoolRoleCreatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleCreatecommunicationPermissionsInput | string[]
    assignedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffAssignmentUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staffProfile?: StaffProfileUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type StaffAssignmentUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffAssignmentUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCardUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentProfile?: StudentProfileUpdateOneRequiredWithoutReportCardsNestedInput
    grades?: GradeUpdateManyWithoutReportCardNestedInput
  }

  export type ReportCardUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: GradeUncheckedUpdateManyWithoutReportCardNestedInput
  }

  export type ReportCardUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassSubjectUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
    class?: ClassUpdateOneRequiredWithoutClassSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutClassSubjectsNestedInput
    staffProfile?: StaffProfileUpdateOneRequiredWithoutClassSubjectsNestedInput
  }

  export type ClassSubjectUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassSubjectUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUpdateManyWithoutClassNestedInput
    students?: ClassStudentUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
    classSubjects?: ClassSubjectUncheckedUpdateManyWithoutClassNestedInput
    students?: ClassStudentUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    section?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    schedule?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classMasterId?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterHistory?: ClassUpdateclassMasterHistoryInput | InputJsonValue[]
  }

  export type CommunicationGroupUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunicationGroupUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunicationGroupUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    filters?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolRoleUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    permissions?: SchoolRoleUpdatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleUpdatecommunicationPermissionsInput | string[]
    assignedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolRoleUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    permissions?: SchoolRoleUpdatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleUpdatecommunicationPermissionsInput | string[]
    assignedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolRoleUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    permissions?: SchoolRoleUpdatepermissionsInput | string[]
    communicationPermissions?: SchoolRoleUpdatecommunicationPermissionsInput | string[]
    assignedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassSubjectCreateManyClassInput = {
    id?: string
    subjectId: string
    staffProfileId: string
    schoolId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type ClassStudentCreateManyClassInput = {
    id?: string
    studentProfileId: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceCreateManyClassInput = {
    id?: string
    studentProfileId: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
  }

  export type ClassSubjectUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
    subject?: SubjectUpdateOneRequiredWithoutClassSubjectsNestedInput
    staffProfile?: StaffProfileUpdateOneRequiredWithoutClassSubjectsNestedInput
    school?: SchoolUpdateOneRequiredWithoutClassSubjectsNestedInput
  }

  export type ClassSubjectUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassSubjectUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassStudentUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentProfile?: StudentProfileUpdateOneRequiredWithoutClassesNestedInput
  }

  export type ClassStudentUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    studentProfile?: StudentProfileUpdateOneRequiredWithoutAttendanceRecordsNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GradeCreateManyReportCardInput = {
    id?: string
    studentProfileId: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    staffProfileId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
  }

  export type GradeUpdateWithoutReportCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
    studentProfile?: StudentProfileUpdateOneRequiredWithoutGradesNestedInput
    staffProfile?: StaffProfileUpdateOneRequiredWithoutGradesNestedInput
  }

  export type GradeUncheckedUpdateWithoutReportCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    staffProfileId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type GradeUncheckedUpdateManyWithoutReportCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    staffProfileId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ParentStudentRelationCreateManyStudentProfileInput = {
    id?: string
    parentProfileId: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassStudentCreateManyStudentProfileInput = {
    id?: string
    classId: string
    enrollmentDate: Date | string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceCreateManyStudentProfileInput = {
    id?: string
    date: Date | string
    status: string
    timeIn?: Date | string | null
    timeOut?: Date | string | null
    reason?: string | null
    isExcused?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    verifiedBy?: string | null
    classMasterId: string
    classId: string
    recordedBy: string
    modifiedBy?: string | null
    modifiedAt?: Date | string | null
    verificationNotes?: string | null
  }

  export type ReportCardCreateManyStudentProfileInput = {
    id?: string
    schoolId: string
    term: string
    academicYear: string
    teacherComments?: string | null
    principalComments?: string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.ReportCardStatus
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateManyStudentProfileInput = {
    id?: string
    reportCardId: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    staffProfileId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
  }

  export type ParentStudentRelationUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentProfile?: ParentProfileUpdateOneRequiredWithoutChildrenNestedInput
  }

  export type ParentStudentRelationUncheckedUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentProfileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentRelationUncheckedUpdateManyWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentProfileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type ClassStudentUncheckedUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentUncheckedUpdateManyWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceUncheckedUpdateManyWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    timeIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isExcused?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    classMasterId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportCardUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutReportCardsNestedInput
    grades?: GradeUpdateManyWithoutReportCardNestedInput
  }

  export type ReportCardUncheckedUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: GradeUncheckedUpdateManyWithoutReportCardNestedInput
  }

  export type ReportCardUncheckedUpdateManyWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    teacherComments?: NullableStringFieldUpdateOperationsInput | string | null
    principalComments?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumReportCardStatusFieldUpdateOperationsInput | $Enums.ReportCardStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
    reportCard?: ReportCardUpdateOneRequiredWithoutGradesNestedInput
    staffProfile?: StaffProfileUpdateOneRequiredWithoutGradesNestedInput
  }

  export type GradeUncheckedUpdateWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportCardId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    staffProfileId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type GradeUncheckedUpdateManyWithoutStudentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportCardId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    staffProfileId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ParentStudentRelationCreateManyParentProfileInput = {
    id?: string
    studentProfileId: string
    relationship: string
    isPrimary?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentRelationUpdateWithoutParentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentProfile?: StudentProfileUpdateOneRequiredWithoutGuardiansNestedInput
  }

  export type ParentStudentRelationUncheckedUpdateWithoutParentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentRelationUncheckedUpdateManyWithoutParentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    relationship?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffAssignmentCreateManyStaffProfileInput = {
    id?: string
    schoolId: string
    role: $Enums.Role
    startDate: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectAssignmentCreateManyStaffProfileInput = {
    id?: string
    subjectId: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateManyStaffProfileInput = {
    id?: string
    studentProfileId: string
    reportCardId: string
    subjectId: string
    teacherId: string
    grade: number
    comments?: string | null
    assessmentType: string
    assessmentDate: Date | string
    status: $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    term: string
    academicYear: string
    weightage?: number | null
  }

  export type ClassSubjectCreateManyStaffProfileInput = {
    id?: string
    classId: string
    subjectId: string
    schoolId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type StaffAssignmentUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutStaffAssignmentsNestedInput
  }

  export type StaffAssignmentUncheckedUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffAssignmentUncheckedUpdateManyWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectAssignmentUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type SubjectAssignmentUncheckedUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectAssignmentUncheckedUpdateManyWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
    studentProfile?: StudentProfileUpdateOneRequiredWithoutGradesNestedInput
    reportCard?: ReportCardUpdateOneRequiredWithoutGradesNestedInput
  }

  export type GradeUncheckedUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    reportCardId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type GradeUncheckedUpdateManyWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentProfileId?: StringFieldUpdateOperationsInput | string
    reportCardId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    grade?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumGradeStatusFieldUpdateOperationsInput | $Enums.GradeStatus
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    weightage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ClassSubjectUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
    class?: ClassUpdateOneRequiredWithoutClassSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutClassSubjectsNestedInput
    school?: SchoolUpdateOneRequiredWithoutClassSubjectsNestedInput
  }

  export type ClassSubjectUncheckedUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassSubjectUncheckedUpdateManyWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectAssignmentCreateManySubjectInput = {
    id?: string
    staffProfileId: string
    academicYear: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassSubjectCreateManySubjectInput = {
    id?: string
    classId: string
    staffProfileId: string
    schoolId: string
    schedule: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: string
    term: string
    maxStudents?: number | null
    currentEnrollment?: number
  }

  export type SubjectAssignmentUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staffProfile?: StaffProfileUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type SubjectAssignmentUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectAssignmentUncheckedUpdateManyWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    academicYear?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassSubjectUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
    class?: ClassUpdateOneRequiredWithoutClassSubjectsNestedInput
    staffProfile?: StaffProfileUpdateOneRequiredWithoutClassSubjectsNestedInput
    school?: SchoolUpdateOneRequiredWithoutClassSubjectsNestedInput
  }

  export type ClassSubjectUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }

  export type ClassSubjectUncheckedUpdateManyWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    staffProfileId?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    maxStudents?: NullableIntFieldUpdateOperationsInput | number | null
    currentEnrollment?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolCountOutputTypeDefaultArgs instead
     */
    export type SchoolCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassCountOutputTypeDefaultArgs instead
     */
    export type ClassCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportCardCountOutputTypeDefaultArgs instead
     */
    export type ReportCardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportCardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentProfileCountOutputTypeDefaultArgs instead
     */
    export type StudentProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParentProfileCountOutputTypeDefaultArgs instead
     */
    export type ParentProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParentProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffProfileCountOutputTypeDefaultArgs instead
     */
    export type StaffProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectCountOutputTypeDefaultArgs instead
     */
    export type SubjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OTPDefaultArgs instead
     */
    export type OTPArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OTPDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefreshTokenDefaultArgs instead
     */
    export type RefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefreshTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KYCDocumentDefaultArgs instead
     */
    export type KYCDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KYCDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationHistoryDefaultArgs instead
     */
    export type VerificationHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessionalProfileDefaultArgs instead
     */
    export type ProfessionalProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessionalProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolDefaultArgs instead
     */
    export type SchoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffAssignmentDefaultArgs instead
     */
    export type StaffAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffAssignmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParentStudentRelationDefaultArgs instead
     */
    export type ParentStudentRelationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParentStudentRelationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassSubjectDefaultArgs instead
     */
    export type ClassSubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassSubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassDefaultArgs instead
     */
    export type ClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassStudentDefaultArgs instead
     */
    export type ClassStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassStudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportCardDefaultArgs instead
     */
    export type ReportCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportCardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GradeDefaultArgs instead
     */
    export type GradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GradeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentProfileDefaultArgs instead
     */
    export type StudentProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParentProfileDefaultArgs instead
     */
    export type ParentProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParentProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendanceDefaultArgs instead
     */
    export type AttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffProfileDefaultArgs instead
     */
    export type StaffProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectDefaultArgs instead
     */
    export type SubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectAssignmentDefaultArgs instead
     */
    export type SubjectAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectAssignmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunicationGroupDefaultArgs instead
     */
    export type CommunicationGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunicationGroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolRoleDefaultArgs instead
     */
    export type SchoolRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileDefaultArgs instead
     */
    export type FileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileQuotaDefaultArgs instead
     */
    export type FileQuotaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileQuotaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}